This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:37:39,472 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:37:39,473 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:37:39,480 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:37:39,480 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:37:39,481 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:37:39,481 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:37:39,482 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:37:39,483 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:37:39,484 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:37:39,484 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:37:39,485 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:37:39,485 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:37:39,486 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:37:39,486 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:37:39,486 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:37:39,487 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:37:39,488 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:37:39,489 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:37:39,489 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:37:39,490 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:37:39,490 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:37:39,492 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:37:39,492 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:37:39,492 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:37:39,493 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:37:39,493 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:37:39,493 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:37:39,493 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:37:39,494 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:37:39,494 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:37:39,494 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:37:39,494 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:37:39,495 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:37:39,495 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:37:39,495 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:37:39,496 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:37:39,496 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:37:39,496 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:37:39,497 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:37:39,497 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:37:39,497 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:37:39,505 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:37:39,505 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:37:39,506 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:37:39,507 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:37:39,507 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:37:39,508 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:37:39,508 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:37:39,508 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:37:39,508 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:37:39,509 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:37:39,509 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:37:39,509 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:37:39,510 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:37:39,510 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:37:39,510 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:37:39,510 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:37:39,511 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:37:39,511 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:37:39,511 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:37:39,511 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:37:39,511 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:37:39,512 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:37:39,512 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:37:39,512 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:37:39,512 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:37:39,513 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:37:39,535 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:37:39,546 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:37:39,549 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:37:39,550 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:37:39,550 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:37:39,551 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl
[2020-11-25 03:37:39,551 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl'
[2020-11-25 03:37:39,667 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:37:39,668 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:37:39,668 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:37:39,668 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:37:39,668 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:37:39,684 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,685 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,725 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,726 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,755 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,775 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,789 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,808 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:37:39,809 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:37:39,809 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:37:39,811 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:37:39,814 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/1) ...
[2020-11-25 03:37:39,837 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:37:39,843 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:37:39,850 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:37:39,857 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s312 && amount_s312>_balances_ERC20[this][msg.sender] ) && amount_s312>=0 ) && amount_s312<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s312]>=0 ) && _balances_ERC20[this][recipient_s312]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s312,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPGT,IdentifierExpression[amount_s312,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s312,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s312,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s312,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s312,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:37:39,866 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-25 03:37:39,866 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:37:39,884 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:37:39 PropertyContainer
[2020-11-25 03:37:39,884 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:37:39,885 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:37:39,885 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:37:39,885 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:37:39,886 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/2) ...
[2020-11-25 03:37:39,886 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:37:39,886 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:37:39,910 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:37:39" (2/2) ...
[2020-11-25 03:37:39,911 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:37:39,911 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:37:39,911 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:37:39,911 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:37:39,912 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/2) ...
[2020-11-25 03:37:39,963 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:37:39,963 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:37:39,963 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:37:39,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:37:39,964 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:37:39,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:37:39,965 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:37:39,965 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:37:39,965 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:37:39,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:37:39,965 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,965 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:37:39,965 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,965 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,966 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:37:39,966 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,966 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:37:39,966 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:37:39,966 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:37:39,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:37:39,966 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:37:39,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:37:39,966 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:37:39,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:37:39,967 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:37:39,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:37:39,967 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:37:39,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:37:39,967 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:37:39,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:37:39,967 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:37:39,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:37:39,967 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:37:39,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:37:39,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:37:39,968 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:37:39,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:37:39,969 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:37:39,969 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:37:39,969 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:37:39,969 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:37:39,969 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:37:39,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:37:39,969 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:37:39,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:37:39,969 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:37:39,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:37:39,970 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:37:39,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:37:39,970 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:37:39,970 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:37:39,970 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:37:39,970 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:37:39,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:37:39,970 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:37:39,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:37:39,970 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:37:39,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:37:39,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:37:39,971 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:37:39,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:37:39,971 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:37:39,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:37:39,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:37:39,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:37:39,971 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:37:39,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:37:39,971 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:37:39,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:37:39,972 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:37:39,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:37:39,972 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:37:39,972 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 03:37:39,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 03:37:39,972 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 03:37:39,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 03:37:39,972 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 03:37:39,972 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 03:37:39,973 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 03:37:39,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 03:37:39,973 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 03:37:39,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 03:37:39,973 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:37:39,973 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:37:39,973 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage
[2020-11-25 03:37:39,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage
[2020-11-25 03:37:39,973 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage
[2020-11-25 03:37:39,973 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage
[2020-11-25 03:37:39,973 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage
[2020-11-25 03:37:39,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage
[2020-11-25 03:37:39,974 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage
[2020-11-25 03:37:39,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage
[2020-11-25 03:37:39,974 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage
[2020-11-25 03:37:39,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage
[2020-11-25 03:37:39,974 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage
[2020-11-25 03:37:39,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage
[2020-11-25 03:37:39,974 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage
[2020-11-25 03:37:39,974 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage
[2020-11-25 03:37:39,974 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:37:39,975 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable
[2020-11-25 03:37:39,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable
[2020-11-25 03:37:39,975 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable
[2020-11-25 03:37:39,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable
[2020-11-25 03:37:39,975 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable
[2020-11-25 03:37:39,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable
[2020-11-25 03:37:39,975 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable
[2020-11-25 03:37:39,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable
[2020-11-25 03:37:39,975 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:37:39,975 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken
[2020-11-25 03:37:39,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken
[2020-11-25 03:37:39,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken
[2020-11-25 03:37:39,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 03:37:39,976 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__success
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:37:39,977 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:37:39,978 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Storage
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Storage
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Governable
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Governable
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RewardToken
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:37:39,979 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,980 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:37:39,981 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:37:39,982 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:37:39,983 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:37:39,984 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:37:39,985 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 03:37:39,986 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__success
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__fail
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__success
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__fail
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__success
[2020-11-25 03:37:39,987 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__fail
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__success
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__fail
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__success
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__fail
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__success
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__fail
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__success
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__fail
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__success
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__fail
[2020-11-25 03:37:39,988 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__success
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__fail
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__success
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__fail
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__success
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__fail
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__success
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__fail
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__success
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:37:39,989 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__fail
[2020-11-25 03:37:39,990 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:37:39,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:37:39,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:37:39,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:37:39,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:37:39,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:37:39,992 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:37:39,993 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:37:39,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:37:39,995 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:37:39,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:37:39,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:37:39,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 03:37:39,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__fail
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__success
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__fail
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__success
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__fail
[2020-11-25 03:37:40,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__success
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__fail
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__success
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__fail
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__success
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__fail
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__success
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__fail
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__success
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__fail
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__success
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__fail
[2020-11-25 03:37:40,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__fail
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__fail
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__fail
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:37:40,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__fail
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__success
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:37:40,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:37:40,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Storage
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Storage
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Governable
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Governable
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RewardToken
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:37:40,005 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:37:40,005 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:37:40,238 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:37:40,238 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:37:41,324 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:37:41,324 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 03:37:41,327 INFO  L202        PluginConnector]: Adding new model RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:37:41 BoogieIcfgContainer
[2020-11-25 03:37:41,327 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:37:39" (2/2) ...
[2020-11-25 03:37:41,327 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:37:41,327 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@42ed1ee1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:37:41, skipping insertion in model container
[2020-11-25 03:37:41,327 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:37:41,327 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:37:41,327 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:37:41,328 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:37:41,328 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/3) ...
[2020-11-25 03:37:41,329 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1648a3d1 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:37:41, skipping insertion in model container
[2020-11-25 03:37:41,329 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:37:39" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:37:41,365 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:37:41 NWAContainer
[2020-11-25 03:37:41,366 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:37:41,366 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:37:41,366 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:37:41,367 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:37:41,367 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:37:41" (3/4) ...
[2020-11-25 03:37:41,368 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3130fa2c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:37:41, skipping insertion in model container
[2020-11-25 03:37:41,368 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:37:41" (4/4) ...
[2020-11-25 03:37:41,371 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:37:41,379 INFO  L110   BuchiProductObserver]: Initial RCFG 4295 locations, 6255 edges
[2020-11-25 03:37:41,379 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:37:41,394 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:37:44,655 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:37:44,669 INFO  L110   BuchiProductObserver]: BuchiProgram size 11020 locations, 20421 edges
[2020-11-25 03:37:44,670 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:37:44 BoogieIcfgContainer
[2020-11-25 03:37:44,670 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:37:44,670 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:37:44,670 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:37:44,672 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:37:44,672 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:37:44" (1/1) ...
[2020-11-25 03:37:44,851 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:37:44,856 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:37:44,858 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:37:44,865 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:37:44,918 INFO  L313           BlockEncoder]: Initial Icfg 11020 locations, 20421 edges
[2020-11-25 03:37:44,918 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:37:44,919 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:37:44,919 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:37:44,919 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:37:44,938 INFO  L70    emoveInfeasibleEdges]: Removed 312 edges and 30 locations because of local infeasibility
[2020-11-25 03:37:44,956 INFO  L70        RemoveSinkStates]: Removed 318 edges and 192 locations by removing sink states
[2020-11-25 03:37:44,978 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:37:44,984 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:37:44,990 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:37:44,991 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:37:44,995 INFO  L313           BlockEncoder]: Encoded RCFG 10754 locations, 19726 edges
[2020-11-25 03:37:44,995 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:37:44 BasicIcfg
[2020-11-25 03:37:44,995 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:37:44,995 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:37:44,995 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:37:44,997 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:37:44,997 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:37:44,997 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:37:39" (1/6) ...
[2020-11-25 03:37:44,998 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@76873714 and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:37:44, skipping insertion in model container
[2020-11-25 03:37:44,998 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:37:44,999 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:37:39" (2/6) ...
[2020-11-25 03:37:44,999 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@76873714 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:37:44, skipping insertion in model container
[2020-11-25 03:37:44,999 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:37:44,999 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:37:41" (3/6) ...
[2020-11-25 03:37:44,999 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@76873714 and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:37:44, skipping insertion in model container
[2020-11-25 03:37:44,999 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:37:44,999 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:37:41" (4/6) ...
[2020-11-25 03:37:44,999 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@76873714 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:37:44, skipping insertion in model container
[2020-11-25 03:37:44,999 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:37:44,999 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:37:44" (5/6) ...
[2020-11-25 03:37:45,000 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@76873714 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:37:45, skipping insertion in model container
[2020-11-25 03:37:45,000 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:37:45,000 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:37:44" (6/6) ...
[2020-11-25 03:37:45,001 INFO  L404   chiAutomizerObserver]: Analyzing ICFG RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_transfer-self-fail.bpl_BEv2
[2020-11-25 03:37:45,036 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:37:45,036 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:37:45,036 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:37:45,036 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:37:45,036 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:37:45,036 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:37:45,036 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:37:45,036 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:37:45,036 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:37:45,101 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10754 states.
[2020-11-25 03:37:45,172 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:45,172 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:45,172 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:45,179 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:45,179 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:45,179 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:37:45,179 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10754 states.
[2020-11-25 03:37:45,210 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:45,210 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:45,210 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:45,211 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:45,211 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:45,225 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:45,225 INFO  L82        PathProgramCache]: Analyzing trace with hash 784190919, now seen corresponding path program 1 times
[2020-11-25 03:37:45,230 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:45,255 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:45,296 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:37:45,297 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:37:45,298 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:37:45,728 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:45,738 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:37:45,738 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:37:45,740 INFO  L87              Difference]: Start difference. First operand 10754 states. Second operand 3 states.
[2020-11-25 03:37:46,192 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:46,193 INFO  L93              Difference]: Finished difference Result 7284 states and 12334 transitions.
[2020-11-25 03:37:46,193 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:37:46,194 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7284 states and 12334 transitions.
[2020-11-25 03:37:46,246 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:46,306 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7284 states to 7284 states and 12334 transitions.
[2020-11-25 03:37:46,307 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 03:37:46,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1262
[2020-11-25 03:37:46,312 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7284 states and 12334 transitions.
[2020-11-25 03:37:46,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:46,343 INFO  L728         BuchiCegarLoop]: Abstraction has 7284 states and 12334 transitions.
[2020-11-25 03:37:46,362 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7284 states and 12334 transitions.
[2020-11-25 03:37:46,485 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7284 to 6598.
[2020-11-25 03:37:46,485 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6598 states.
[2020-11-25 03:37:46,501 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6598 states to 6598 states and 11145 transitions.
[2020-11-25 03:37:46,502 INFO  L751         BuchiCegarLoop]: Abstraction has 6598 states and 11145 transitions.
[2020-11-25 03:37:46,502 INFO  L631         BuchiCegarLoop]: Abstraction has 6598 states and 11145 transitions.
[2020-11-25 03:37:46,502 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:37:46,502 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6598 states and 11145 transitions.
[2020-11-25 03:37:46,516 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:46,516 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:46,516 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:46,518 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:46,518 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND FALSE  !(DType[this] == RewardToken)
[L6412]   COND TRUE   DType[this] == ERC20Capped
[L6413]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND TRUE   !(account_s734 != null)
[L6301]               revert := true;
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND TRUE   revert
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND TRUE   revert
[L6413]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6414]   COND TRUE   revert
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND TRUE   revert
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:46,523 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:46,523 INFO  L82        PathProgramCache]: Analyzing trace with hash 80514234, now seen corresponding path program 1 times
[2020-11-25 03:37:46,524 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:46,536 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:46,571 INFO  L134       CoverageAnalysis]: Checked inductivity of 20 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 19 trivial. 0 not checked.
[2020-11-25 03:37:46,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:37:46,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 03:37:46,572 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:46,573 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:37:46,573 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:37:46,573 INFO  L87              Difference]: Start difference. First operand 6598 states and 11145 transitions. cyclomatic complexity: 4549 Second operand 4 states.
[2020-11-25 03:37:47,329 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:47,329 INFO  L93              Difference]: Finished difference Result 5699 states and 6931 transitions.
[2020-11-25 03:37:47,329 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:37:47,329 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5699 states and 6931 transitions.
[2020-11-25 03:37:47,341 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:47,358 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5699 states to 5699 states and 6931 transitions.
[2020-11-25 03:37:47,358 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 969
[2020-11-25 03:37:47,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1154
[2020-11-25 03:37:47,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5699 states and 6931 transitions.
[2020-11-25 03:37:47,363 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:47,363 INFO  L728         BuchiCegarLoop]: Abstraction has 5699 states and 6931 transitions.
[2020-11-25 03:37:47,368 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5699 states and 6931 transitions.
[2020-11-25 03:37:47,408 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5699 to 5685.
[2020-11-25 03:37:47,409 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5685 states.
[2020-11-25 03:37:47,415 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5685 states to 5685 states and 6917 transitions.
[2020-11-25 03:37:47,415 INFO  L751         BuchiCegarLoop]: Abstraction has 5685 states and 6917 transitions.
[2020-11-25 03:37:47,415 INFO  L631         BuchiCegarLoop]: Abstraction has 5685 states and 6917 transitions.
[2020-11-25 03:37:47,415 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:37:47,415 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5685 states and 6917 transitions.
[2020-11-25 03:37:47,422 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:47,422 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:47,422 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:47,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:47,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND FALSE  !(DType[this] == RewardToken)
[L6412]   COND FALSE  !(DType[this] == ERC20Capped)
[L6417]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6422]   COND TRUE   DType[this] == MinterRole
[L6423]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND TRUE   !(account_s734 != null)
[L6301]               revert := true;
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND TRUE   revert
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND TRUE   revert
[L6423]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6424]   COND TRUE   revert
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND TRUE   revert
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND TRUE   revert
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND TRUE   revert
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:47,429 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:47,429 INFO  L82        PathProgramCache]: Analyzing trace with hash 1726055673, now seen corresponding path program 1 times
[2020-11-25 03:37:47,430 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:47,440 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:47,491 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:37:47,491 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:37:47,491 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:37:47,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:47,492 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:37:47,492 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:37:47,492 INFO  L87              Difference]: Start difference. First operand 5685 states and 6917 transitions. cyclomatic complexity: 1234 Second operand 3 states.
[2020-11-25 03:37:47,573 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:47,573 INFO  L93              Difference]: Finished difference Result 5690 states and 6922 transitions.
[2020-11-25 03:37:47,573 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:37:47,573 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5690 states and 6922 transitions.
[2020-11-25 03:37:47,589 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:47,606 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5690 states to 5690 states and 6922 transitions.
[2020-11-25 03:37:47,606 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1150
[2020-11-25 03:37:47,607 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1150
[2020-11-25 03:37:47,607 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5690 states and 6922 transitions.
[2020-11-25 03:37:47,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:47,611 INFO  L728         BuchiCegarLoop]: Abstraction has 5690 states and 6922 transitions.
[2020-11-25 03:37:47,616 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5690 states and 6922 transitions.
[2020-11-25 03:37:47,655 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5690 to 5686.
[2020-11-25 03:37:47,655 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5686 states.
[2020-11-25 03:37:47,662 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5686 states to 5686 states and 6918 transitions.
[2020-11-25 03:37:47,663 INFO  L751         BuchiCegarLoop]: Abstraction has 5686 states and 6918 transitions.
[2020-11-25 03:37:47,663 INFO  L631         BuchiCegarLoop]: Abstraction has 5686 states and 6918 transitions.
[2020-11-25 03:37:47,663 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:37:47,663 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5686 states and 6918 transitions.
[2020-11-25 03:37:47,671 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:47,671 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:47,671 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:47,694 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:47,694 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND TRUE   !(account_s734 != null)
[L6301]               revert := true;
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND TRUE   revert
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND TRUE   revert
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND TRUE   revert
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND TRUE   revert
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND TRUE   revert
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND TRUE   revert
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:47,714 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:47,714 INFO  L82        PathProgramCache]: Analyzing trace with hash -566004771, now seen corresponding path program 1 times
[2020-11-25 03:37:47,715 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:47,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:47,778 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 52 trivial. 0 not checked.
[2020-11-25 03:37:47,778 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:37:47,778 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 03:37:47,779 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:47,779 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 03:37:47,779 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 03:37:47,779 INFO  L87              Difference]: Start difference. First operand 5686 states and 6918 transitions. cyclomatic complexity: 1234 Second operand 12 states.
[2020-11-25 03:37:48,005 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:48,005 INFO  L93              Difference]: Finished difference Result 5746 states and 7011 transitions.
[2020-11-25 03:37:48,005 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 03:37:48,005 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5746 states and 7011 transitions.
[2020-11-25 03:37:48,017 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:48,034 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5746 states to 5746 states and 7011 transitions.
[2020-11-25 03:37:48,034 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1166
[2020-11-25 03:37:48,035 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1166
[2020-11-25 03:37:48,035 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5746 states and 7011 transitions.
[2020-11-25 03:37:48,040 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:48,040 INFO  L728         BuchiCegarLoop]: Abstraction has 5746 states and 7011 transitions.
[2020-11-25 03:37:48,044 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5746 states and 7011 transitions.
[2020-11-25 03:37:48,078 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5746 to 5730.
[2020-11-25 03:37:48,078 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5730 states.
[2020-11-25 03:37:48,084 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5730 states to 5730 states and 6987 transitions.
[2020-11-25 03:37:48,084 INFO  L751         BuchiCegarLoop]: Abstraction has 5730 states and 6987 transitions.
[2020-11-25 03:37:48,084 INFO  L631         BuchiCegarLoop]: Abstraction has 5730 states and 6987 transitions.
[2020-11-25 03:37:48,084 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:37:48,084 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5730 states and 6987 transitions.
[2020-11-25 03:37:48,090 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:37:48,090 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:48,090 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:48,092 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:48,092 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND TRUE   !!__var_29
[L6250]               revert := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND TRUE   revert
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND TRUE   revert
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND TRUE   revert
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND TRUE   revert
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND TRUE   !(sender_s495 != null)
[L5828]               revert := true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND TRUE   revert
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:48,096 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:48,096 INFO  L82        PathProgramCache]: Analyzing trace with hash -33293663, now seen corresponding path program 1 times
[2020-11-25 03:37:48,097 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:48,106 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:48,143 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 03:37:48,143 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:37:48,143 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:37:48,143 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:48,143 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:37:48,143 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:37:48,143 INFO  L87              Difference]: Start difference. First operand 5730 states and 6987 transitions. cyclomatic complexity: 1259 Second operand 3 states.
[2020-11-25 03:37:48,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:48,242 INFO  L93              Difference]: Finished difference Result 6390 states and 7499 transitions.
[2020-11-25 03:37:48,243 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:37:48,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6390 states and 7499 transitions.
[2020-11-25 03:37:48,254 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:48,269 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6390 states to 5854 states and 6836 transitions.
[2020-11-25 03:37:48,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1171
[2020-11-25 03:37:48,270 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1205
[2020-11-25 03:37:48,270 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5854 states and 6836 transitions.
[2020-11-25 03:37:48,276 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:48,276 INFO  L728         BuchiCegarLoop]: Abstraction has 5854 states and 6836 transitions.
[2020-11-25 03:37:48,282 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5854 states and 6836 transitions.
[2020-11-25 03:37:48,317 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5854 to 5445.
[2020-11-25 03:37:48,317 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5445 states.
[2020-11-25 03:37:48,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5445 states to 5445 states and 6325 transitions.
[2020-11-25 03:37:48,323 INFO  L751         BuchiCegarLoop]: Abstraction has 5445 states and 6325 transitions.
[2020-11-25 03:37:48,323 INFO  L631         BuchiCegarLoop]: Abstraction has 5445 states and 6325 transitions.
[2020-11-25 03:37:48,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:37:48,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5445 states and 6325 transitions.
[2020-11-25 03:37:48,328 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:48,328 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:48,328 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:48,332 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:48,332 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6356]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6356]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6357]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6356]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6356]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6357]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6356]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6356]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6357]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6356]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6356]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6357]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6557]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6558]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6558]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6559]   COND FALSE  !(revert)
[L6570]   COND TRUE   __tmp__DType[this] == RewardToken
[L6571]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6571]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6572]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:48,339 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:48,340 INFO  L82        PathProgramCache]: Analyzing trace with hash 1520933378, now seen corresponding path program 1 times
[2020-11-25 03:37:48,341 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:48,358 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:48,581 INFO  L134       CoverageAnalysis]: Checked inductivity of 1651 backedges. 0 proven. 45 refuted. 0 times theorem prover too weak. 1606 trivial. 0 not checked.
[2020-11-25 03:37:48,581 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:37:48,581 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:37:48,581 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:48,582 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:37:48,582 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:37:48,582 INFO  L87              Difference]: Start difference. First operand 5445 states and 6325 transitions. cyclomatic complexity: 882 Second operand 3 states.
[2020-11-25 03:37:48,626 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:48,626 INFO  L93              Difference]: Finished difference Result 5448 states and 6328 transitions.
[2020-11-25 03:37:48,626 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:37:48,627 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5448 states and 6328 transitions.
[2020-11-25 03:37:48,636 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:48,647 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5448 states to 5448 states and 6328 transitions.
[2020-11-25 03:37:48,647 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1154
[2020-11-25 03:37:48,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1154
[2020-11-25 03:37:48,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5448 states and 6328 transitions.
[2020-11-25 03:37:48,651 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:48,651 INFO  L728         BuchiCegarLoop]: Abstraction has 5448 states and 6328 transitions.
[2020-11-25 03:37:48,655 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5448 states and 6328 transitions.
[2020-11-25 03:37:48,680 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5448 to 5446.
[2020-11-25 03:37:48,680 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5446 states.
[2020-11-25 03:37:48,685 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5446 states to 5446 states and 6326 transitions.
[2020-11-25 03:37:48,685 INFO  L751         BuchiCegarLoop]: Abstraction has 5446 states and 6326 transitions.
[2020-11-25 03:37:48,685 INFO  L631         BuchiCegarLoop]: Abstraction has 5446 states and 6326 transitions.
[2020-11-25 03:37:48,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:37:48,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5446 states and 6326 transitions.
[2020-11-25 03:37:48,690 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:48,690 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:48,690 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:48,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:48,693 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6553]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6553]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6580]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6581]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6581]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6582]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:48,699 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:48,699 INFO  L82        PathProgramCache]: Analyzing trace with hash -1931373318, now seen corresponding path program 1 times
[2020-11-25 03:37:48,700 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:48,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:48,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1639 trivial. 0 not checked.
[2020-11-25 03:37:48,967 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:37:48,967 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:37:48,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:48,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:37:48,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:37:48,968 INFO  L87              Difference]: Start difference. First operand 5446 states and 6326 transitions. cyclomatic complexity: 882 Second operand 3 states.
[2020-11-25 03:37:49,012 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:49,012 INFO  L93              Difference]: Finished difference Result 5458 states and 6339 transitions.
[2020-11-25 03:37:49,012 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:37:49,012 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5458 states and 6339 transitions.
[2020-11-25 03:37:49,020 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:49,029 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5458 states to 5458 states and 6339 transitions.
[2020-11-25 03:37:49,029 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1158
[2020-11-25 03:37:49,030 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1158
[2020-11-25 03:37:49,030 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5458 states and 6339 transitions.
[2020-11-25 03:37:49,033 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:49,033 INFO  L728         BuchiCegarLoop]: Abstraction has 5458 states and 6339 transitions.
[2020-11-25 03:37:49,037 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5458 states and 6339 transitions.
[2020-11-25 03:37:49,060 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5458 to 5450.
[2020-11-25 03:37:49,061 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5450 states.
[2020-11-25 03:37:49,065 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5450 states to 5450 states and 6330 transitions.
[2020-11-25 03:37:49,066 INFO  L751         BuchiCegarLoop]: Abstraction has 5450 states and 6330 transitions.
[2020-11-25 03:37:49,066 INFO  L631         BuchiCegarLoop]: Abstraction has 5450 states and 6330 transitions.
[2020-11-25 03:37:49,066 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:37:49,066 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5450 states and 6330 transitions.
[2020-11-25 03:37:49,071 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:49,071 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:49,071 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:49,073 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:49,073 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND TRUE   __tmp__DType[this] == RewardToken
[L6548]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6548]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6549]   COND FALSE  !(revert)
[L6570]   COND TRUE   __tmp__DType[this] == RewardToken
[L6571]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6571]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6572]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:49,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:49,079 INFO  L82        PathProgramCache]: Analyzing trace with hash 1582042539, now seen corresponding path program 1 times
[2020-11-25 03:37:49,080 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:49,100 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:49,410 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 1607 trivial. 0 not checked.
[2020-11-25 03:37:49,410 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:37:49,411 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:37:49,411 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:49,411 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:37:49,412 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:37:49,412 INFO  L87              Difference]: Start difference. First operand 5450 states and 6330 transitions. cyclomatic complexity: 882 Second operand 4 states.
[2020-11-25 03:37:50,095 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:50,095 INFO  L93              Difference]: Finished difference Result 6084 states and 7112 transitions.
[2020-11-25 03:37:50,095 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:37:50,096 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6084 states and 7112 transitions.
[2020-11-25 03:37:50,108 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 03:37:50,120 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6084 states to 5788 states and 6786 transitions.
[2020-11-25 03:37:50,120 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1263
[2020-11-25 03:37:50,121 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1263
[2020-11-25 03:37:50,121 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5788 states and 6786 transitions.
[2020-11-25 03:37:50,124 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:50,124 INFO  L728         BuchiCegarLoop]: Abstraction has 5788 states and 6786 transitions.
[2020-11-25 03:37:50,128 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5788 states and 6786 transitions.
[2020-11-25 03:37:50,153 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5788 to 5212.
[2020-11-25 03:37:50,153 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5212 states.
[2020-11-25 03:37:50,159 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5212 states to 5212 states and 6062 transitions.
[2020-11-25 03:37:50,159 INFO  L751         BuchiCegarLoop]: Abstraction has 5212 states and 6062 transitions.
[2020-11-25 03:37:50,159 INFO  L631         BuchiCegarLoop]: Abstraction has 5212 states and 6062 transitions.
[2020-11-25 03:37:50,159 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:37:50,159 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5212 states and 6062 transitions.
[2020-11-25 03:37:50,166 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:37:50,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:37:50,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:37:50,168 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:37:50,168 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC200 := false;
[L2]                  call_transfer_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND FALSE  !(choice == 19)
[L11102]  COND TRUE   choice == 18
[L11103]              gas := gas - 21000;
[L11104]  COND TRUE   gas >= 0
[L11105]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11106]              assume msgvalue_MSG == 0;
[L11107]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == recipient_s312 && amount_s312 > _balances_ERC20[this][msgsender_MSG]) && amount_s312 >= 0) && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s312] >= 0) && _balances_ERC20[this][recipient_s312] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC200 := true;
[L2]                  call_transfer_ERC200 := false;
[L2]                  revert := revert_hold;
[L555]                havoc __exception;
[L556]                revert := false;
[L557]    COND FALSE  !(__exception)
[L588]    CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L5082]   COND TRUE   DType[this] == RewardToken
[L5083]   CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L5083]   RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]   COND FALSE  !(revert)
[L5105]   COND TRUE   DType[this] == RewardToken
[L5106]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5826]               __var_14 := null;
[L5827]   COND FALSE  !(!(sender_s495 != null))
[L5831]               __var_15 := null;
[L5832]   COND FALSE  !(!(recipient_s495 != null))
[L5836]   CALL        call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L4815]   COND FALSE  !(!(b_s136 <= a_s136))
[L4819]               c_s136 := (a_s136 - b_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4820]               __ret_0_ := c_s136;
[L5836]   RET         call __var_16 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s495], amount_s495, 1272735687);
[L5837]   COND FALSE  !(revert)
[L5840]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s495];
[L5841]               _balances_ERC20[this][sender_s495] := __var_16;
[L5842]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s495];
[L5843]   CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L4791]               c_s109 := (a_s109 + b_s109) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4792]   COND FALSE  !(!(c_s109 >= a_s109))
[L4796]               __ret_0_ := c_s109;
[L5843]   RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s495], amount_s495);
[L5844]   COND FALSE  !(revert)
[L5847]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s495];
[L5848]               _balances_ERC20[this][recipient_s495] := __var_17;
[L5849]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s495];
[L5850]               assert { :EventEmitted "Transfer_ERC20" } true;
[L5106]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_3, recipient_s312, amount_s312);
[L5107]   COND FALSE  !(revert)
[L5128]               __ret_0_ := true;
[L588]    RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L589]                assume !revert && gas >= 0;
[L11107]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s312, amount_s312);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:37:50,174 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:37:50,175 INFO  L82        PathProgramCache]: Analyzing trace with hash 1443032556, now seen corresponding path program 1 times
[2020-11-25 03:37:50,176 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:37:50,204 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:37:50,522 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:37:50,522 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:37:50,522 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 03:37:50,523 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:37:50,523 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 03:37:50,523 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=70, Unknown=0, NotChecked=0, Total=90
[2020-11-25 03:37:50,523 INFO  L87              Difference]: Start difference. First operand 5212 states and 6062 transitions. cyclomatic complexity: 852 Second operand 10 states.
[2020-11-25 03:37:52,172 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:37:52,172 INFO  L93              Difference]: Finished difference Result 2904 states and 3370 transitions.
[2020-11-25 03:37:52,172 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 03:37:52,172 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2904 states and 3370 transitions.
[2020-11-25 03:37:52,176 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:37:52,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2904 states to 0 states and 0 transitions.
[2020-11-25 03:37:52,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 03:37:52,177 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 03:37:52,177 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 03:37:52,177 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:37:52,177 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:37:52,177 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:37:52,177 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:37:52,177 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:37:52,177 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 03:37:52,177 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:37:52,177 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 03:37:52,180 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:37:52 BasicIcfg
[2020-11-25 03:37:52,180 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:37:52,180 INFO  L168              Benchmark]: Toolchain (without parser) took 12513.59 ms. Allocated memory was 1.0 GB in the beginning and 2.7 GB in the end (delta: 1.6 GB). Free memory was 924.5 MB in the beginning and 2.0 GB in the end (delta: -1.1 GB). Peak memory consumption was 541.3 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,181 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,182 INFO  L168              Benchmark]: Boogie Preprocessor took 140.34 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.6 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,182 INFO  L168              Benchmark]: UtopiaSpecLang took 75.82 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,183 INFO  L168              Benchmark]: Boogie Printer took 26.15 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,183 INFO  L168              Benchmark]: RCFGBuilder took 1416.05 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.0 MB). Free memory was 881.5 MB in the beginning and 751.8 MB in the end (delta: 129.8 MB). Peak memory consumption was 193.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,183 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.46 ms. Allocated memory is still 1.1 GB. Free memory was 751.8 MB in the beginning and 748.3 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,184 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3304.01 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 415.8 MB). Free memory was 748.3 MB in the beginning and 770.2 MB in the end (delta: -21.9 MB). Peak memory consumption was 393.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,184 INFO  L168              Benchmark]: BlockEncodingV2 took 324.80 ms. Allocated memory was 1.5 GB in the beginning and 1.5 GB in the end (delta: 1.0 MB). Free memory was 770.2 MB in the beginning and 1.3 GB in the end (delta: -503.3 MB). Peak memory consumption was 178.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,184 INFO  L168              Benchmark]: BuchiAutomizer took 7185.05 ms. Allocated memory was 1.5 GB in the beginning and 2.7 GB in the end (delta: 1.1 GB). Free memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: -732.4 MB). Peak memory consumption was 409.5 MB. Max. memory is 15.3 GB.
[2020-11-25 03:37:52,187 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11020 locations, 20421 edges
  - StatisticsResult: Encoded RCFG
    10754 locations, 19726 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 140.34 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.6 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 75.82 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.15 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1416.05 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.0 MB). Free memory was 881.5 MB in the beginning and 751.8 MB in the end (delta: 129.8 MB). Peak memory consumption was 193.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.46 ms. Allocated memory is still 1.1 GB. Free memory was 751.8 MB in the beginning and 748.3 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3304.01 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 415.8 MB). Free memory was 748.3 MB in the beginning and 770.2 MB in the end (delta: -21.9 MB). Peak memory consumption was 393.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 324.80 ms. Allocated memory was 1.5 GB in the beginning and 1.5 GB in the end (delta: 1.0 MB). Free memory was 770.2 MB in the beginning and 1.3 GB in the end (delta: -503.3 MB). Peak memory consumption was 178.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7185.05 ms. Allocated memory was 1.5 GB in the beginning and 2.7 GB in the end (delta: 1.1 GB). Free memory was 1.3 GB in the beginning and 2.0 GB in the end (delta: -732.4 MB). Peak memory consumption was 409.5 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4295 locations, 6255 edges
  - StatisticsResult: BuchiProgram size
    11020 locations, 20421 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 12 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.1s and 10 iterations.  TraceHistogramMax:12. Analysis of lassos took 1.9s. Construction of modules took 2.7s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 8 MinimizatonAttempts, 1715 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 6598 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 55213 SDtfs, 24516 SDslu, 97925 SDs, 0 SdLazy, 25844 SolverSat, 4752 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
