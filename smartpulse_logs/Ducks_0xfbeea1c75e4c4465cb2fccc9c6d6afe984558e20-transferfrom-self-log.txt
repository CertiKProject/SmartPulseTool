This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 18:35:51,086 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 18:35:51,087 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 18:35:51,094 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 18:35:51,094 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 18:35:51,094 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 18:35:51,095 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 18:35:51,096 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 18:35:51,097 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 18:35:51,097 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 18:35:51,098 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 18:35:51,098 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 18:35:51,099 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 18:35:51,099 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 18:35:51,100 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 18:35:51,100 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 18:35:51,100 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 18:35:51,101 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 18:35:51,102 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 18:35:51,103 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 18:35:51,103 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 18:35:51,104 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 18:35:51,105 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 18:35:51,105 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 18:35:51,105 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 18:35:51,106 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 18:35:51,106 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 18:35:51,107 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 18:35:51,107 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 18:35:51,107 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 18:35:51,107 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 18:35:51,107 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 18:35:51,108 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 18:35:51,108 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 18:35:51,109 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 18:35:51,109 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 18:35:51,109 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 18:35:51,109 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 18:35:51,109 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 18:35:51,110 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 18:35:51,110 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 18:35:51,110 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 18:35:51,115 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 18:35:51,116 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 18:35:51,116 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 18:35:51,116 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 18:35:51,116 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 18:35:51,116 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 18:35:51,117 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 18:35:51,117 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 18:35:51,117 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 18:35:51,118 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 18:35:51,118 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 18:35:51,118 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 18:35:51,118 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 18:35:51,118 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 18:35:51,134 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 18:35:51,147 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 18:35:51,150 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 18:35:51,152 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 18:35:51,153 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 18:35:51,154 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl
[2020-11-24 18:35:51,154 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl'
[2020-11-24 18:35:51,210 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 18:35:51,211 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 18:35:51,211 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 18:35:51,211 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 18:35:51,211 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 18:35:51,227 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,228 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,248 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,249 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,262 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,269 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,272 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,279 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 18:35:51,279 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 18:35:51,279 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 18:35:51,281 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 18:35:51,285 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/1) ...
[2020-11-24 18:35:51,297 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-24 18:35:51,302 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-24 18:35:51,309 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-24 18:35:51,315 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s393 || p2!=msg.sender ) && from_s393==to_s393 ) && tokens_s393<=balances_Ducks[this][from_s393] ) && tokens_s393<=allowed_Ducks[this][from_s393][msg.sender] ) && tokens_s393>=0 ) && tokens_s393<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][to_s393]>=0 ) && balances_Ducks[this][to_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Ducks[this][from_s393]>=0 ) && balances_Ducks[this][from_s393]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_Ducks[this][from_s393][msg.sender]>=0 ) && allowed_Ducks[this][from_s393][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[to_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 18:35:51,318 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( success_s393==true && allowed_Ducks[this][from_s393][msg.sender]==( ( old(allowed_Ducks[this][from_s393][msg.sender]) ) - tokens_s393 ) ) && _totalSupply_Ducks[this]==( old(_totalSupply_Ducks[this]) ) ) && balances_Ducks[this]==( old(balances_Ducks[this]) ) ) && allowed_Ducks[this][p1][p2]==( old(allowed_Ducks[this][p1][p2]) ) ) && name_Ducks[this]==( old(name_Ducks[this]) ) ) && symbol_Ducks[this]==( old(symbol_Ducks[this]) ) ) && decimals_Ducks[this]==( old(decimals_Ducks[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s393,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_Ducks>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[from_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],IdentifierExpression[tokens_s393,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Ducks,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Ducks>]]]]]]
[2020-11-24 18:35:51,320 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Ducks.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Ducks[this][from] && value <= allowed_Ducks[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][to] >= 0 && balances_Ducks[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Ducks[this][from] >= 0 &&  balances_Ducks[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Ducks[this][from][msg.sender] >= 0 && allowed_Ducks[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Ducks.transferFrom(from, to, value), return == true && allowed_Ducks[this][from][msg.sender] == old(allowed_Ducks[this][from][msg.sender]) - value && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this]) && balances_Ducks[this] == old(balances_Ducks[this]) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2]) && name_Ducks[this] == old(name_Ducks[this]) && symbol_Ducks[this] == old(symbol_Ducks[this]) && decimals_Ducks[this] == old(decimals_Ducks[this]))))
[2020-11-24 18:35:51,321 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_Ducks0) ==> ( <>AP(success_transferFrom_Ducks0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 18:35:51,325 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:35:51 PropertyContainer
[2020-11-24 18:35:51,325 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 18:35:51,326 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 18:35:51,326 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 18:35:51,326 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 18:35:51,327 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/2) ...
[2020-11-24 18:35:51,327 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 18:35:51,327 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 18:35:51,335 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:35:51" (2/2) ...
[2020-11-24 18:35:51,335 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 18:35:51,335 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 18:35:51,335 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 18:35:51,336 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 18:35:51,336 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/2) ...
[2020-11-24 18:35:51,387 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 18:35:51,387 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 18:35:51,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 18:35:51,388 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 18:35:51,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 18:35:51,388 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks
[2020-11-24 18:35:51,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks
[2020-11-24 18:35:51,388 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks
[2020-11-24 18:35:51,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks
[2020-11-24 18:35:51,388 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks
[2020-11-24 18:35:51,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks
[2020-11-24 18:35:51,388 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks
[2020-11-24 18:35:51,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks
[2020-11-24 18:35:51,388 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks
[2020-11-24 18:35:51,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks
[2020-11-24 18:35:51,389 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 18:35:51,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ducks
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__success
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Ducks__fail
[2020-11-24 18:35:51,390 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__success
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Ducks__fail
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__success
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Ducks__fail
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__success
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Ducks__fail
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__success
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Ducks__fail
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 18:35:51,391 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 18:35:51,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 18:35:51,391 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__fail
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Ducks__success
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__fail
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Ducks__success
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__fail
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Ducks__success
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__fail
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Ducks__success
[2020-11-24 18:35:51,392 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__fail
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Ducks__success
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__fail
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Ducks__success
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 18:35:51,393 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 18:35:51,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ducks
[2020-11-24 18:35:51,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 18:35:51,394 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 18:35:51,394 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 18:35:51,585 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 18:35:51,658 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 18:35:51,658 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 18:35:51,658 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 18:35:51,823 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 18:35:51,823 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-24 18:35:51,824 INFO  L202        PluginConnector]: Adding new model Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:35:51 BoogieIcfgContainer
[2020-11-24 18:35:51,824 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:35:51" (2/2) ...
[2020-11-24 18:35:51,825 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 18:35:51,825 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6071957e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:35:51, skipping insertion in model container
[2020-11-24 18:35:51,825 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 18:35:51,825 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 18:35:51,825 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 18:35:51,827 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 18:35:51,827 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/3) ...
[2020-11-24 18:35:51,827 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5ddde35a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:35:51, skipping insertion in model container
[2020-11-24 18:35:51,827 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:35:51" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 18:35:51,864 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:35:51 NWAContainer
[2020-11-24 18:35:51,864 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 18:35:51,864 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 18:35:51,864 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 18:35:51,865 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 18:35:51,866 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:35:51" (3/4) ...
[2020-11-24 18:35:51,866 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@e4df7df and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:35:51, skipping insertion in model container
[2020-11-24 18:35:51,867 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:35:51" (4/4) ...
[2020-11-24 18:35:51,870 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 18:35:51,872 INFO  L110   BuchiProductObserver]: Initial RCFG 614 locations, 765 edges
[2020-11-24 18:35:51,872 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 18:35:51,882 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 18:35:52,729 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 18:35:52,732 INFO  L110   BuchiProductObserver]: BuchiProgram size 1438 locations, 2468 edges
[2020-11-24 18:35:52,732 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:35:52 BoogieIcfgContainer
[2020-11-24 18:35:52,732 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 18:35:52,733 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 18:35:52,733 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 18:35:52,734 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 18:35:52,735 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:35:52" (1/1) ...
[2020-11-24 18:35:52,778 INFO  L313           BlockEncoder]: Initial Icfg 1438 locations, 2468 edges
[2020-11-24 18:35:52,778 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 18:35:52,779 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 18:35:52,779 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 18:35:52,780 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 18:35:52,785 INFO  L70    emoveInfeasibleEdges]: Removed 63 edges and 9 locations because of local infeasibility
[2020-11-24 18:35:52,789 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-24 18:35:52,794 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 18:35:52,797 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 18:35:52,798 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 18:35:52,799 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 18:35:52,801 INFO  L313           BlockEncoder]: Encoded RCFG 1396 locations, 2356 edges
[2020-11-24 18:35:52,802 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 06:35:52 BasicIcfg
[2020-11-24 18:35:52,802 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 18:35:52,802 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 18:35:52,802 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 18:35:52,804 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 18:35:52,805 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:35:52,805 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:35:51" (1/6) ...
[2020-11-24 18:35:52,806 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3948e8 and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 06:35:52, skipping insertion in model container
[2020-11-24 18:35:52,806 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:35:52,806 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:35:51" (2/6) ...
[2020-11-24 18:35:52,807 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3948e8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 06:35:52, skipping insertion in model container
[2020-11-24 18:35:52,807 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:35:52,807 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:35:51" (3/6) ...
[2020-11-24 18:35:52,807 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3948e8 and model type Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 06:35:52, skipping insertion in model container
[2020-11-24 18:35:52,807 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:35:52,807 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:35:51" (4/6) ...
[2020-11-24 18:35:52,807 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3948e8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 06:35:52, skipping insertion in model container
[2020-11-24 18:35:52,807 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:35:52,807 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:35:52" (5/6) ...
[2020-11-24 18:35:52,808 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e3948e8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 06:35:52, skipping insertion in model container
[2020-11-24 18:35:52,808 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:35:52,808 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 06:35:52" (6/6) ...
[2020-11-24 18:35:52,809 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Ducks_0xfbeea1c75e4c4465cb2fccc9c6d6afe984558e20_transferfrom-self.bpl_BEv2
[2020-11-24 18:35:52,839 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 18:35:52,840 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 18:35:52,840 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 18:35:52,840 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 18:35:52,840 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 18:35:52,840 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 18:35:52,840 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 18:35:52,840 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 18:35:52,840 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 18:35:52,855 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1396 states.
[2020-11-24 18:35:52,888 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:52,888 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:52,888 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:52,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:52,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
[2020-11-24 18:35:52,895 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 18:35:52,895 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1396 states.
[2020-11-24 18:35:52,902 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:52,903 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:52,903 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:52,904 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:52,904 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND TRUE   choice == 8
[L1660]              gas := gas - 21000;
[L1661]  COND FALSE  !(gas >= 0)
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:52,917 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:52,917 INFO  L82        PathProgramCache]: Analyzing trace with hash 336895219, now seen corresponding path program 1 times
[2020-11-24 18:35:52,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:52,938 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:52,993 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:35:52,995 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:35:52,996 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 18:35:52,999 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:53,009 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 18:35:53,010 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 18:35:53,011 INFO  L87              Difference]: Start difference. First operand 1396 states. Second operand 5 states.
[2020-11-24 18:35:53,232 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:53,232 INFO  L93              Difference]: Finished difference Result 644 states and 708 transitions.
[2020-11-24 18:35:53,232 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 18:35:53,233 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 644 states and 708 transitions.
[2020-11-24 18:35:53,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:53,241 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 644 states to 194 states and 207 transitions.
[2020-11-24 18:35:53,241 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 18:35:53,242 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 138
[2020-11-24 18:35:53,242 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 194 states and 207 transitions.
[2020-11-24 18:35:53,244 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:53,244 INFO  L728         BuchiCegarLoop]: Abstraction has 194 states and 207 transitions.
[2020-11-24 18:35:53,263 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 194 states and 207 transitions.
[2020-11-24 18:35:53,277 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 194 to 194.
[2020-11-24 18:35:53,277 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 194 states.
[2020-11-24 18:35:53,278 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 194 states to 194 states and 207 transitions.
[2020-11-24 18:35:53,279 INFO  L751         BuchiCegarLoop]: Abstraction has 194 states and 207 transitions.
[2020-11-24 18:35:53,279 INFO  L631         BuchiCegarLoop]: Abstraction has 194 states and 207 transitions.
[2020-11-24 18:35:53,279 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 18:35:53,280 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 194 states and 207 transitions.
[2020-11-24 18:35:53,281 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:53,281 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:53,281 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:53,282 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:53,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND FALSE  !(choice == 8)
[L1665]  COND FALSE  !(choice == 7)
[L1671]  COND FALSE  !(choice == 6)
[L1677]  COND FALSE  !(choice == 5)
[L1684]  COND FALSE  !(choice == 4)
[L1691]  COND TRUE   choice == 3
[L1692]              gas := gas - 21000;
[L1693]  COND TRUE   gas >= 0
[L1694]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1695]              assume msgvalue_MSG == 0;
[L1696]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L449]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L910]   COND TRUE   DType[this] == Ducks
[L911]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L736]   COND TRUE   !(b_s112 <= a_s112)
[L737]               revert := true;
[L911]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L912]   COND TRUE   revert
[L449]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L450]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L1696]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:53,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:53,285 INFO  L82        PathProgramCache]: Analyzing trace with hash 1141244353, now seen corresponding path program 1 times
[2020-11-24 18:35:53,286 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:53,297 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:53,314 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:35:53,315 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:35:53,315 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 18:35:53,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:53,316 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 18:35:53,316 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 18:35:53,317 INFO  L87              Difference]: Start difference. First operand 194 states and 207 transitions. cyclomatic complexity: 14 Second operand 3 states.
[2020-11-24 18:35:53,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:53,324 INFO  L93              Difference]: Finished difference Result 229 states and 243 transitions.
[2020-11-24 18:35:53,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 18:35:53,325 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 229 states and 243 transitions.
[2020-11-24 18:35:53,326 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:35:53,328 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 229 states to 213 states and 222 transitions.
[2020-11-24 18:35:53,328 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 154
[2020-11-24 18:35:53,329 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 159
[2020-11-24 18:35:53,329 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 213 states and 222 transitions.
[2020-11-24 18:35:53,330 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:53,330 INFO  L728         BuchiCegarLoop]: Abstraction has 213 states and 222 transitions.
[2020-11-24 18:35:53,330 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 213 states and 222 transitions.
[2020-11-24 18:35:53,336 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 213 to 202.
[2020-11-24 18:35:53,336 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 202 states.
[2020-11-24 18:35:53,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 202 states to 202 states and 211 transitions.
[2020-11-24 18:35:53,337 INFO  L751         BuchiCegarLoop]: Abstraction has 202 states and 211 transitions.
[2020-11-24 18:35:53,337 INFO  L631         BuchiCegarLoop]: Abstraction has 202 states and 211 transitions.
[2020-11-24 18:35:53,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 18:35:53,337 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 202 states and 211 transitions.
[2020-11-24 18:35:53,338 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:53,338 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:53,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:53,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:53,339 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND FALSE  !(choice == 8)
[L1665]  COND FALSE  !(choice == 7)
[L1671]  COND FALSE  !(choice == 6)
[L1677]  COND FALSE  !(choice == 5)
[L1684]  COND FALSE  !(choice == 4)
[L1691]  COND TRUE   choice == 3
[L1692]              gas := gas - 21000;
[L1693]  COND TRUE   gas >= 0
[L1694]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1695]              assume msgvalue_MSG == 0;
[L1696]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum_balances0 := sum_balances0;
[L435]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum_allowed1 := sum_allowed1;
[L438]               __tmp__Length := Length;
[L439]               __tmp__now := now;
[L440]               __tmp__name_Ducks := name_Ducks;
[L441]               __tmp__symbol_Ducks := symbol_Ducks;
[L442]               __tmp__decimals_Ducks := decimals_Ducks;
[L443]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L444]               __tmp__balances_Ducks := balances_Ducks;
[L445]               __tmp__allowed_Ducks := allowed_Ducks;
[L446]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L868]   COND TRUE   __tmp__DType[this] == Ducks
[L869]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L727]   COND TRUE   !(b_s112 <= a_s112)
[L728]               revert := true;
[L869]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L870]   COND TRUE   revert
[L446]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L447]               assume revert || gas < 0;
[L1696]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:53,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:53,342 INFO  L82        PathProgramCache]: Analyzing trace with hash -658036331, now seen corresponding path program 1 times
[2020-11-24 18:35:53,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:53,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:53,399 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:35:53,399 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:35:53,399 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 18:35:53,400 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:53,400 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:35:53,400 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:35:53,400 INFO  L87              Difference]: Start difference. First operand 202 states and 211 transitions. cyclomatic complexity: 10 Second operand 7 states.
[2020-11-24 18:35:53,489 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:53,489 INFO  L93              Difference]: Finished difference Result 217 states and 225 transitions.
[2020-11-24 18:35:53,489 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 18:35:53,489 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 217 states and 225 transitions.
[2020-11-24 18:35:53,491 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:35:53,492 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 217 states to 213 states and 221 transitions.
[2020-11-24 18:35:53,492 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 159
[2020-11-24 18:35:53,493 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 159
[2020-11-24 18:35:53,493 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 213 states and 221 transitions.
[2020-11-24 18:35:53,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:53,493 INFO  L728         BuchiCegarLoop]: Abstraction has 213 states and 221 transitions.
[2020-11-24 18:35:53,494 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 213 states and 221 transitions.
[2020-11-24 18:35:53,497 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 213 to 200.
[2020-11-24 18:35:53,497 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 200 states.
[2020-11-24 18:35:53,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 200 states to 200 states and 208 transitions.
[2020-11-24 18:35:53,498 INFO  L751         BuchiCegarLoop]: Abstraction has 200 states and 208 transitions.
[2020-11-24 18:35:53,498 INFO  L631         BuchiCegarLoop]: Abstraction has 200 states and 208 transitions.
[2020-11-24 18:35:53,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 18:35:53,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 200 states and 208 transitions.
[2020-11-24 18:35:53,499 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:53,499 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:53,500 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:53,501 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:53,501 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND FALSE  !(choice == 8)
[L1665]  COND FALSE  !(choice == 7)
[L1671]  COND FALSE  !(choice == 6)
[L1677]  COND FALSE  !(choice == 5)
[L1684]  COND FALSE  !(choice == 4)
[L1691]  COND TRUE   choice == 3
[L1692]              gas := gas - 21000;
[L1693]  COND TRUE   gas >= 0
[L1694]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1695]              assume msgvalue_MSG == 0;
[L1696]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum_balances0 := sum_balances0;
[L435]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum_allowed1 := sum_allowed1;
[L438]               __tmp__Length := Length;
[L439]               __tmp__now := now;
[L440]               __tmp__name_Ducks := name_Ducks;
[L441]               __tmp__symbol_Ducks := symbol_Ducks;
[L442]               __tmp__decimals_Ducks := decimals_Ducks;
[L443]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L444]               __tmp__balances_Ducks := balances_Ducks;
[L445]               __tmp__allowed_Ducks := allowed_Ducks;
[L446]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L868]   COND TRUE   __tmp__DType[this] == Ducks
[L869]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L727]   COND FALSE  !(!(b_s112 <= a_s112))
[L731]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L869]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L870]   COND TRUE   revert
[L446]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L447]               assume revert || gas < 0;
[L1696]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:53,503 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:53,503 INFO  L82        PathProgramCache]: Analyzing trace with hash -833447856, now seen corresponding path program 1 times
[2020-11-24 18:35:53,504 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:53,512 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:53,530 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:35:53,530 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:35:53,530 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 18:35:53,531 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:53,531 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 18:35:53,531 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 18:35:53,531 INFO  L87              Difference]: Start difference. First operand 200 states and 208 transitions. cyclomatic complexity: 9 Second operand 5 states.
[2020-11-24 18:35:53,543 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:53,543 INFO  L93              Difference]: Finished difference Result 211 states and 216 transitions.
[2020-11-24 18:35:53,543 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 18:35:53,543 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 211 states and 216 transitions.
[2020-11-24 18:35:53,544 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:35:53,545 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 211 states to 211 states and 216 transitions.
[2020-11-24 18:35:53,546 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 157
[2020-11-24 18:35:53,546 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 157
[2020-11-24 18:35:53,546 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 211 states and 216 transitions.
[2020-11-24 18:35:53,546 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:53,546 INFO  L728         BuchiCegarLoop]: Abstraction has 211 states and 216 transitions.
[2020-11-24 18:35:53,546 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 211 states and 216 transitions.
[2020-11-24 18:35:53,549 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 211 to 200.
[2020-11-24 18:35:53,549 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 200 states.
[2020-11-24 18:35:53,550 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 200 states to 200 states and 205 transitions.
[2020-11-24 18:35:53,550 INFO  L751         BuchiCegarLoop]: Abstraction has 200 states and 205 transitions.
[2020-11-24 18:35:53,550 INFO  L631         BuchiCegarLoop]: Abstraction has 200 states and 205 transitions.
[2020-11-24 18:35:53,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 18:35:53,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 200 states and 205 transitions.
[2020-11-24 18:35:53,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:53,551 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:53,551 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:53,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:53,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND FALSE  !(choice == 8)
[L1665]  COND FALSE  !(choice == 7)
[L1671]  COND FALSE  !(choice == 6)
[L1677]  COND FALSE  !(choice == 5)
[L1684]  COND FALSE  !(choice == 4)
[L1691]  COND TRUE   choice == 3
[L1692]              gas := gas - 21000;
[L1693]  COND TRUE   gas >= 0
[L1694]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1695]              assume msgvalue_MSG == 0;
[L1696]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND FALSE  !(__exception)
[L449]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L910]   COND TRUE   DType[this] == Ducks
[L911]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L736]   COND FALSE  !(!(b_s112 <= a_s112))
[L740]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L911]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][from_s393], tokens_s393);
[L912]   COND FALSE  !(revert)
[L918]               sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][from_s393];
[L919]               balances_Ducks[this][from_s393] := __var_4;
[L920]               sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][from_s393];
[L921]   COND TRUE   DType[this] == Ducks
[L922]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L736]   COND FALSE  !(!(b_s112 <= a_s112))
[L740]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L922]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L923]   COND FALSE  !(revert)
[L929]               sum_allowed1[from_s393] := sum_allowed1[from_s393] - allowed_Ducks[this][from_s393][msgsender_MSG];
[L930]               allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L931]               sum_allowed1[from_s393] := sum_allowed1[from_s393] + allowed_Ducks[this][from_s393][msgsender_MSG];
[L932]   COND TRUE   DType[this] == Ducks
[L933]   CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L718]               c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L719]   COND FALSE  !(!(c_s90 >= a_s90))
[L933]   RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Ducks[this][to_s393], tokens_s393);
[L934]   COND FALSE  !(revert)
[L940]               sum_balances0[this] := sum_balances0[this] - balances_Ducks[this][to_s393];
[L941]               balances_Ducks[this][to_s393] := __var_6;
[L942]               sum_balances0[this] := sum_balances0[this] + balances_Ducks[this][to_s393];
[L943]               assert { :EventEmitted "Transfer_Ducks" } true;
[L944]               success_s393 := true;
[L449]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__success(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L450]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((success_s393 == true && allowed_Ducks[this][from_s393][msgsender_MSG] == old(allowed_Ducks[this][from_s393][msgsender_MSG]) - tokens_s393) && _totalSupply_Ducks[this] == old(_totalSupply_Ducks[this])) && balances_Ducks[this] == old(balances_Ducks[this])) && allowed_Ducks[this][p1][p2] == old(allowed_Ducks[this][p1][p2])) && name_Ducks[this] == old(name_Ducks[this])) && symbol_Ducks[this] == old(symbol_Ducks[this])) && decimals_Ducks[this] == old(decimals_Ducks[this]));
[L3]                 revert := revert_hold;
[L1696]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:53,554 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:53,554 INFO  L82        PathProgramCache]: Analyzing trace with hash 307866963, now seen corresponding path program 1 times
[2020-11-24 18:35:53,555 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:53,632 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:54,195 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 18:35:54,195 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:35:54,196 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-24 18:35:54,197 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:54,197 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-24 18:35:54,197 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=40, Invalid=302, Unknown=0, NotChecked=0, Total=342
[2020-11-24 18:35:54,198 INFO  L87              Difference]: Start difference. First operand 200 states and 205 transitions. cyclomatic complexity: 6 Second operand 19 states.
[2020-11-24 18:35:54,869 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:54,869 INFO  L93              Difference]: Finished difference Result 199 states and 203 transitions.
[2020-11-24 18:35:54,869 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 18:35:54,869 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 199 states and 203 transitions.
[2020-11-24 18:35:54,870 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:54,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 199 states to 156 states and 159 transitions.
[2020-11-24 18:35:54,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 119
[2020-11-24 18:35:54,871 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 119
[2020-11-24 18:35:54,871 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 156 states and 159 transitions.
[2020-11-24 18:35:54,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:54,871 INFO  L728         BuchiCegarLoop]: Abstraction has 156 states and 159 transitions.
[2020-11-24 18:35:54,871 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 156 states and 159 transitions.
[2020-11-24 18:35:54,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 156 to 156.
[2020-11-24 18:35:54,873 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 156 states.
[2020-11-24 18:35:54,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 156 states to 156 states and 159 transitions.
[2020-11-24 18:35:54,874 INFO  L751         BuchiCegarLoop]: Abstraction has 156 states and 159 transitions.
[2020-11-24 18:35:54,874 INFO  L631         BuchiCegarLoop]: Abstraction has 156 states and 159 transitions.
[2020-11-24 18:35:54,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 18:35:54,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 156 states and 159 transitions.
[2020-11-24 18:35:54,874 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:54,874 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:54,874 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:54,875 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:54,875 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND FALSE  !(choice == 8)
[L1665]  COND FALSE  !(choice == 7)
[L1671]  COND FALSE  !(choice == 6)
[L1677]  COND FALSE  !(choice == 5)
[L1684]  COND FALSE  !(choice == 4)
[L1691]  COND TRUE   choice == 3
[L1692]              gas := gas - 21000;
[L1693]  COND TRUE   gas >= 0
[L1694]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1695]              assume msgvalue_MSG == 0;
[L1696]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum_balances0 := sum_balances0;
[L435]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum_allowed1 := sum_allowed1;
[L438]               __tmp__Length := Length;
[L439]               __tmp__now := now;
[L440]               __tmp__name_Ducks := name_Ducks;
[L441]               __tmp__symbol_Ducks := symbol_Ducks;
[L442]               __tmp__decimals_Ducks := decimals_Ducks;
[L443]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L444]               __tmp__balances_Ducks := balances_Ducks;
[L445]               __tmp__allowed_Ducks := allowed_Ducks;
[L446]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L868]   COND TRUE   __tmp__DType[this] == Ducks
[L869]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L727]   COND FALSE  !(!(b_s112 <= a_s112))
[L731]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L869]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L870]   COND FALSE  !(revert)
[L876]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L877]               __tmp__balances_Ducks[this][from_s393] := __var_4;
[L878]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L879]   COND TRUE   __tmp__DType[this] == Ducks
[L880]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L727]   COND TRUE   !(b_s112 <= a_s112)
[L728]               revert := true;
[L880]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L881]   COND TRUE   revert
[L446]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L447]               assume revert || gas < 0;
[L1696]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:54,877 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:54,877 INFO  L82        PathProgramCache]: Analyzing trace with hash -1506103374, now seen corresponding path program 1 times
[2020-11-24 18:35:54,877 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:54,883 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:54,905 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 18:35:54,905 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:35:54,905 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 18:35:54,905 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:54,906 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:35:54,906 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:35:54,906 INFO  L87              Difference]: Start difference. First operand 156 states and 159 transitions. cyclomatic complexity: 4 Second operand 7 states.
[2020-11-24 18:35:54,932 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:54,933 INFO  L93              Difference]: Finished difference Result 158 states and 160 transitions.
[2020-11-24 18:35:54,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 18:35:54,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 158 states and 160 transitions.
[2020-11-24 18:35:54,933 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:54,934 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 158 states to 151 states and 153 transitions.
[2020-11-24 18:35:54,934 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 114
[2020-11-24 18:35:54,934 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 114
[2020-11-24 18:35:54,934 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 151 states and 153 transitions.
[2020-11-24 18:35:54,934 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:54,934 INFO  L728         BuchiCegarLoop]: Abstraction has 151 states and 153 transitions.
[2020-11-24 18:35:54,934 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 151 states and 153 transitions.
[2020-11-24 18:35:54,935 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 151 to 151.
[2020-11-24 18:35:54,936 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 151 states.
[2020-11-24 18:35:54,936 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 151 states to 151 states and 153 transitions.
[2020-11-24 18:35:54,936 INFO  L751         BuchiCegarLoop]: Abstraction has 151 states and 153 transitions.
[2020-11-24 18:35:54,936 INFO  L631         BuchiCegarLoop]: Abstraction has 151 states and 153 transitions.
[2020-11-24 18:35:54,936 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 18:35:54,936 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 151 states and 153 transitions.
[2020-11-24 18:35:54,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:54,937 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:54,937 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:54,937 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:54,937 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND FALSE  !(choice == 8)
[L1665]  COND FALSE  !(choice == 7)
[L1671]  COND FALSE  !(choice == 6)
[L1677]  COND FALSE  !(choice == 5)
[L1684]  COND FALSE  !(choice == 4)
[L1691]  COND TRUE   choice == 3
[L1692]              gas := gas - 21000;
[L1693]  COND TRUE   gas >= 0
[L1694]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1695]              assume msgvalue_MSG == 0;
[L1696]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum_balances0 := sum_balances0;
[L435]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum_allowed1 := sum_allowed1;
[L438]               __tmp__Length := Length;
[L439]               __tmp__now := now;
[L440]               __tmp__name_Ducks := name_Ducks;
[L441]               __tmp__symbol_Ducks := symbol_Ducks;
[L442]               __tmp__decimals_Ducks := decimals_Ducks;
[L443]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L444]               __tmp__balances_Ducks := balances_Ducks;
[L445]               __tmp__allowed_Ducks := allowed_Ducks;
[L446]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L868]   COND TRUE   __tmp__DType[this] == Ducks
[L869]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L727]   COND FALSE  !(!(b_s112 <= a_s112))
[L731]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L869]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L870]   COND FALSE  !(revert)
[L876]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L877]               __tmp__balances_Ducks[this][from_s393] := __var_4;
[L878]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L879]   COND TRUE   __tmp__DType[this] == Ducks
[L880]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L727]   COND FALSE  !(!(b_s112 <= a_s112))
[L731]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L880]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L881]   COND FALSE  !(revert)
[L887]               __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L888]               __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L889]               __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L890]   COND TRUE   __tmp__DType[this] == Ducks
[L891]   CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L709]               c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L710]   COND TRUE   !(c_s90 >= a_s90)
[L711]               revert := true;
[L891]   RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L892]   COND TRUE   revert
[L446]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L447]               assume revert || gas < 0;
[L1696]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:54,939 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:54,939 INFO  L82        PathProgramCache]: Analyzing trace with hash 861111682, now seen corresponding path program 1 times
[2020-11-24 18:35:54,939 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:54,946 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:54,990 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 18:35:54,991 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:35:54,991 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-24 18:35:54,991 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:54,991 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 18:35:54,991 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-24 18:35:54,991 INFO  L87              Difference]: Start difference. First operand 151 states and 153 transitions. cyclomatic complexity: 3 Second operand 14 states.
[2020-11-24 18:35:55,054 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:55,054 INFO  L93              Difference]: Finished difference Result 157 states and 158 transitions.
[2020-11-24 18:35:55,054 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 18:35:55,054 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 157 states and 158 transitions.
[2020-11-24 18:35:55,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:55,056 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 157 states to 146 states and 147 transitions.
[2020-11-24 18:35:55,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 109
[2020-11-24 18:35:55,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 109
[2020-11-24 18:35:55,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 146 states and 147 transitions.
[2020-11-24 18:35:55,056 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:55,056 INFO  L728         BuchiCegarLoop]: Abstraction has 146 states and 147 transitions.
[2020-11-24 18:35:55,056 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 146 states and 147 transitions.
[2020-11-24 18:35:55,057 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 146 to 146.
[2020-11-24 18:35:55,057 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 146 states.
[2020-11-24 18:35:55,058 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 146 states to 146 states and 147 transitions.
[2020-11-24 18:35:55,058 INFO  L751         BuchiCegarLoop]: Abstraction has 146 states and 147 transitions.
[2020-11-24 18:35:55,058 INFO  L631         BuchiCegarLoop]: Abstraction has 146 states and 147 transitions.
[2020-11-24 18:35:55,058 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 18:35:55,058 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 146 states and 147 transitions.
[2020-11-24 18:35:55,058 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:35:55,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:35:55,059 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:35:55,059 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:35:55,059 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_Ducks0 := false;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1722]              assume null == 0;
[L1723]  CALL        call this := FreshRefGenerator__success();
[L701]               havoc newRef;
[L702]               assume Alloc[newRef] == false;
[L703]               Alloc[newRef] := true;
[L704]               assume newRef != null;
[L1723]  RET         call this := FreshRefGenerator__success();
[L1724]              assume now >= 0;
[L1725]              assume DType[this] == Ducks;
[L1726]              assume !revert && gas >= 0;
[L1727]  CALL        call CorralChoice_Ducks(this);
[L1617]              havoc msgsender_MSG;
[L1618]              havoc msgvalue_MSG;
[L1619]              havoc choice;
[L1620]              havoc __ret_0_totalSupply;
[L1621]              havoc tokenOwner_s247;
[L1622]              havoc balance_s247;
[L1623]              havoc tokenOwner_s263;
[L1624]              havoc spender_s263;
[L1625]              havoc remaining_s263;
[L1626]              havoc to_s334;
[L1627]              havoc tokens_s334;
[L1628]              havoc success_s334;
[L1629]              havoc spender_s291;
[L1630]              havoc tokens_s291;
[L1631]              havoc success_s291;
[L1632]              havoc from_s393;
[L1633]              havoc to_s393;
[L1634]              havoc tokens_s393;
[L1635]              havoc success_s393;
[L1636]              havoc a_s90;
[L1637]              havoc b_s90;
[L1638]              havoc c_s90;
[L1639]              havoc a_s112;
[L1640]              havoc b_s112;
[L1641]              havoc c_s112;
[L1642]              havoc a_s140;
[L1643]              havoc b_s140;
[L1644]              havoc c_s140;
[L1645]              havoc a_s162;
[L1646]              havoc b_s162;
[L1647]              havoc c_s162;
[L1648]              havoc __ret_0_name;
[L1649]              havoc __ret_0_symbol;
[L1650]              havoc __ret_0_decimals;
[L1651]              havoc __ret_0__totalSupply;
[L1652]              havoc tmpNow;
[L1653]              havoc gas;
[L1654]              assume gas > 4000000 && gas <= 8000000;
[L1655]              tmpNow := now;
[L1656]              havoc now;
[L1657]              assume now > tmpNow;
[L1658]              assume msgsender_MSG != null;
[L1659]  COND FALSE  !(choice == 8)
[L1665]  COND FALSE  !(choice == 7)
[L1671]  COND FALSE  !(choice == 6)
[L1677]  COND FALSE  !(choice == 5)
[L1684]  COND FALSE  !(choice == 4)
[L1691]  COND TRUE   choice == 3
[L1692]              gas := gas - 21000;
[L1693]  COND TRUE   gas >= 0
[L1694]              assume tokens_s393 >= 0 && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1695]              assume msgvalue_MSG == 0;
[L1696]  CALL        call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s393 || p2 != msgsender_MSG) && from_s393 == to_s393) && tokens_s393 <= balances_Ducks[this][from_s393]) && tokens_s393 <= allowed_Ducks[this][from_s393][msgsender_MSG]) && tokens_s393 >= 0) && tokens_s393 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][to_s393] >= 0) && balances_Ducks[this][to_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Ducks[this][from_s393] >= 0) && balances_Ducks[this][from_s393] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Ducks[this][from_s393][msgsender_MSG] >= 0) && allowed_Ducks[this][from_s393][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Ducks0 := true;
[L3]                 call_transferFrom_Ducks0 := false;
[L3]                 revert := revert_hold;
[L426]               havoc __exception;
[L427]               revert := false;
[L428]   COND TRUE   __exception
[L429]               __tmp__Balance := Balance;
[L430]               __tmp__DType := DType;
[L431]               __tmp__Alloc := Alloc;
[L432]               __tmp__balance_ADDR := balance_ADDR;
[L433]               __tmp__M_Ref_int := M_Ref_int;
[L434]               __tmp__sum_balances0 := sum_balances0;
[L435]               __tmp__alloc_allowed_Ducks_lvl0 := alloc_allowed_Ducks_lvl0;
[L436]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L437]               __tmp__sum_allowed1 := sum_allowed1;
[L438]               __tmp__Length := Length;
[L439]               __tmp__now := now;
[L440]               __tmp__name_Ducks := name_Ducks;
[L441]               __tmp__symbol_Ducks := symbol_Ducks;
[L442]               __tmp__decimals_Ducks := decimals_Ducks;
[L443]               __tmp___totalSupply_Ducks := _totalSupply_Ducks;
[L444]               __tmp__balances_Ducks := balances_Ducks;
[L445]               __tmp__allowed_Ducks := allowed_Ducks;
[L446]   CALL        call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L868]   COND TRUE   __tmp__DType[this] == Ducks
[L869]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L727]   COND FALSE  !(!(b_s112 <= a_s112))
[L731]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L869]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][from_s393], tokens_s393);
[L870]   COND FALSE  !(revert)
[L876]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][from_s393];
[L877]               __tmp__balances_Ducks[this][from_s393] := __var_4;
[L878]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][from_s393];
[L879]   COND TRUE   __tmp__DType[this] == Ducks
[L880]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L727]   COND FALSE  !(!(b_s112 <= a_s112))
[L731]               c_s112 := (a_s112 - b_s112) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L880]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Ducks[this][from_s393][msgsender_MSG], tokens_s393);
[L881]   COND FALSE  !(revert)
[L887]               __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] - __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L888]               __tmp__allowed_Ducks[this][from_s393][msgsender_MSG] := __var_5;
[L889]               __tmp__sum_allowed1[from_s393] := __tmp__sum_allowed1[from_s393] + __tmp__allowed_Ducks[this][from_s393][msgsender_MSG];
[L890]   COND TRUE   __tmp__DType[this] == Ducks
[L891]   CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L709]               c_s90 := (a_s90 + b_s90) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L710]   COND FALSE  !(!(c_s90 >= a_s90))
[L891]   RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Ducks[this][to_s393], tokens_s393);
[L892]   COND FALSE  !(revert)
[L898]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Ducks[this][to_s393];
[L899]               __tmp__balances_Ducks[this][to_s393] := __var_6;
[L900]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Ducks[this][to_s393];
[L901]               success_s393 := true;
[L446]   RET         call success_s393 := transferFrom~address~address~uint256_Ducks__fail(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L447]               assume revert || gas < 0;
[L1696]  RET         call success_s393 := transferFrom~address~address~uint256_Ducks(this, msgsender_MSG, msgvalue_MSG, from_s393, to_s393, tokens_s393);
[L1727]  RET         call CorralChoice_Ducks(this);

Loop:
[L1727]        assume true;

[2020-11-24 18:35:55,061 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:35:55,061 INFO  L82        PathProgramCache]: Analyzing trace with hash -346848962, now seen corresponding path program 1 times
[2020-11-24 18:35:55,062 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:35:55,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:35:55,079 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 18:35:55,080 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:35:55,080 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 18:35:55,080 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:35:55,080 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 18:35:55,080 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 18:35:55,080 INFO  L87              Difference]: Start difference. First operand 146 states and 147 transitions. cyclomatic complexity: 2 Second operand 5 states.
[2020-11-24 18:35:55,088 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:35:55,088 INFO  L93              Difference]: Finished difference Result 139 states and 139 transitions.
[2020-11-24 18:35:55,088 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 18:35:55,088 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 139 states and 139 transitions.
[2020-11-24 18:35:55,089 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 18:35:55,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 139 states to 0 states and 0 transitions.
[2020-11-24 18:35:55,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 18:35:55,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 18:35:55,089 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 18:35:55,089 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:35:55,089 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 18:35:55,089 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 18:35:55,089 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 18:35:55,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 18:35:55,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 18:35:55,089 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 18:35:55,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 18:35:55,092 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 06:35:55 BasicIcfg
[2020-11-24 18:35:55,092 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 18:35:55,093 INFO  L168              Benchmark]: Toolchain (without parser) took 3882.71 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 260.0 MB). Free memory was 940.6 MB in the beginning and 884.5 MB in the end (delta: 56.0 MB). Peak memory consumption was 316.1 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,094 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.25 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,094 INFO  L168              Benchmark]: Boogie Preprocessor took 68.01 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,094 INFO  L168              Benchmark]: UtopiaSpecLang took 46.60 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,094 INFO  L168              Benchmark]: Boogie Printer took 9.16 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,095 INFO  L168              Benchmark]: RCFGBuilder took 489.70 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,095 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.63 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 877.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,095 INFO  L168              Benchmark]: BÃ¼chi Program Product took 868.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.1 MB). Free memory was 877.9 MB in the beginning and 980.1 MB in the end (delta: -102.2 MB). Peak memory consumption was 160.9 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,095 INFO  L168              Benchmark]: BlockEncodingV2 took 69.18 ms. Allocated memory is still 1.1 GB. Free memory was 973.8 MB in the beginning and 940.8 MB in the end (delta: 33.0 MB). Peak memory consumption was 33.0 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,096 INFO  L168              Benchmark]: BuchiAutomizer took 2290.40 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 192.9 MB). Free memory was 940.8 MB in the beginning and 884.5 MB in the end (delta: 56.3 MB). Peak memory consumption was 249.2 MB. Max. memory is 15.3 GB.
[2020-11-24 18:35:55,098 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1438 locations, 2468 edges
  - StatisticsResult: Encoded RCFG
    1396 locations, 2356 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.25 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 68.01 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 46.60 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 9.16 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 489.70 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.5 MB in the end (delta: 48.3 MB). Peak memory consumption was 48.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.63 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 877.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 868.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 67.1 MB). Free memory was 877.9 MB in the beginning and 980.1 MB in the end (delta: -102.2 MB). Peak memory consumption was 160.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 69.18 ms. Allocated memory is still 1.1 GB. Free memory was 973.8 MB in the beginning and 940.8 MB in the end (delta: 33.0 MB). Peak memory consumption was 33.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2290.40 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 192.9 MB). Free memory was 940.8 MB in the beginning and 884.5 MB in the end (delta: 56.3 MB). Peak memory consumption was 249.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    614 locations, 765 edges
  - StatisticsResult: BuchiProgram size
    1438 locations, 2468 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.2s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.9s. Construction of modules took 0.5s. BÃ¼chi inclusion checks took 0.5s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.0s AutomataMinimizationTime, 7 MinimizatonAttempts, 35 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 202 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 1892 SDtfs, 1706 SDslu, 4172 SDs, 0 SdLazy, 2481 SolverSat, 573 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_Ducks0) ==> ( <>(success_transferFrom_Ducks0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
