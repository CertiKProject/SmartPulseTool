This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 17:58:17,490 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 17:58:17,492 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 17:58:17,502 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 17:58:17,502 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 17:58:17,502 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 17:58:17,503 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 17:58:17,505 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 17:58:17,506 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 17:58:17,507 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 17:58:17,507 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 17:58:17,508 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 17:58:17,508 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 17:58:17,509 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 17:58:17,510 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 17:58:17,510 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 17:58:17,511 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 17:58:17,512 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 17:58:17,513 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 17:58:17,514 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 17:58:17,515 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 17:58:17,516 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 17:58:17,517 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 17:58:17,517 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 17:58:17,518 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 17:58:17,518 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 17:58:17,518 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 17:58:17,519 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 17:58:17,519 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 17:58:17,519 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 17:58:17,520 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 17:58:17,520 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 17:58:17,521 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 17:58:17,521 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 17:58:17,522 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 17:58:17,522 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 17:58:17,522 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 17:58:17,522 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 17:58:17,523 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 17:58:17,523 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 17:58:17,524 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 17:58:17,524 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 17:58:17,531 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 17:58:17,531 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 17:58:17,532 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 17:58:17,532 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 17:58:17,532 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 17:58:17,532 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 17:58:17,533 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 17:58:17,533 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 17:58:17,533 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 17:58:17,534 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 17:58:17,534 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 17:58:17,555 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 17:58:17,568 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 17:58:17,570 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 17:58:17,571 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 17:58:17,571 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 17:58:17,572 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl
[2020-11-24 17:58:17,572 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl'
[2020-11-24 17:58:17,628 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 17:58:17,630 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 17:58:17,630 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 17:58:17,630 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 17:58:17,630 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 17:58:17,646 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,648 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,668 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,669 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,683 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,689 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,692 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,698 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 17:58:17,698 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 17:58:17,699 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 17:58:17,701 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 17:58:17,704 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/1) ...
[2020-11-24 17:58:17,717 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 17:58:17,722 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 17:58:17,730 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 17:58:17,737 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s458 && p1!=to_s458 ) && ( p2!=from_s458 || p3!=msg.sender ) ) && from_s458!=to_s458 ) && tokens_s458<=balances_XMDDexChain[this][from_s458] ) && tokens_s458<=allowed_XMDDexChain[this][from_s458][msg.sender] ) && ( balances_XMDDexChain[this][to_s458] + tokens_s458 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s458>=0 ) && tokens_s458<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_XMDDexChain[this][to_s458]>=0 ) && balances_XMDDexChain[this][to_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_XMDDexChain[this][from_s458]>=0 ) && balances_XMDDexChain[this][from_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_XMDDexChain[this][from_s458][msg.sender]>=0 ) && allowed_XMDDexChain[this][from_s458][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 17:58:17,740 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( success_s458==true && balances_XMDDexChain[this][from_s458]==( ( old(balances_XMDDexChain[this][from_s458]) ) - tokens_s458 ) ) && balances_XMDDexChain[this][to_s458]==( ( old(balances_XMDDexChain[this][to_s458]) ) + tokens_s458 ) ) && allowed_XMDDexChain[this][from_s458][msg.sender]==( ( old(allowed_XMDDexChain[this][from_s458][msg.sender]) ) - tokens_s458 ) ) && _totalSupply_XMDDexChain[this]==( old(_totalSupply_XMDDexChain[this]) ) ) && balances_XMDDexChain[this][p1]==( old(balances_XMDDexChain[this][p1]) ) ) && allowed_XMDDexChain[this][p2][p3]==( old(allowed_XMDDexChain[this][p2][p3]) ) ) && symbol_XMDDexChain[this]==( old(symbol_XMDDexChain[this]) ) ) && name_XMDDexChain[this]==( old(name_XMDDexChain[this]) ) ) && decimals_XMDDexChain[this]==( old(decimals_XMDDexChain[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s458,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_XMDDexChain>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]]
[2020-11-24 17:58:17,744 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 17:58:17,744 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_XMDDexChain0) ==> ( <>AP(success_transferFrom_XMDDexChain0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 17:58:17,750 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 05:58:17 PropertyContainer
[2020-11-24 17:58:17,750 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 17:58:17,751 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 17:58:17,751 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 17:58:17,751 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 17:58:17,752 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/2) ...
[2020-11-24 17:58:17,752 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 17:58:17,752 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 17:58:17,761 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 05:58:17" (2/2) ...
[2020-11-24 17:58:17,761 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 17:58:17,761 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 17:58:17,761 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 17:58:17,761 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 17:58:17,762 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/2) ...
[2020-11-24 17:58:17,815 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 17:58:17,817 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 17:58:17,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 17:58:17,817 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 17:58:17,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 17:58:17,817 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain
[2020-11-24 17:58:17,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain
[2020-11-24 17:58:17,817 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain
[2020-11-24 17:58:17,817 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain
[2020-11-24 17:58:17,818 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 17:58:17,818 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 17:58:17,818 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_XMDDexChain
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 17:58:17,819 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain__success
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain__fail
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain__success
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain__fail
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain__success
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain__fail
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain__success
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain__fail
[2020-11-24 17:58:17,820 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain__success
[2020-11-24 17:58:17,821 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain__fail
[2020-11-24 17:58:17,821 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain__success
[2020-11-24 17:58:17,821 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain__fail
[2020-11-24 17:58:17,821 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 17:58:17,821 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 17:58:17,821 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 17:58:17,821 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 17:58:17,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 17:58:17,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 17:58:17,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 17:58:17,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 17:58:17,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 17:58:17,821 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain__fail
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain__success
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain__fail
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain__success
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain__fail
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain__success
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain__fail
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain__success
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain__fail
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain__success
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain__fail
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain__success
[2020-11-24 17:58:17,822 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 17:58:17,823 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_XMDDexChain
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 17:58:17,824 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 17:58:17,824 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 17:58:17,970 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 17:58:17,970 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 17:58:17,971 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 17:58:18,063 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 17:58:18,286 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 17:58:18,286 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-24 17:58:18,289 INFO  L202        PluginConnector]: Adding new model XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 05:58:18 BoogieIcfgContainer
[2020-11-24 17:58:18,289 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 05:58:17" (2/2) ...
[2020-11-24 17:58:18,289 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 17:58:18,290 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1c001c82 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 05:58:18, skipping insertion in model container
[2020-11-24 17:58:18,290 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 17:58:18,290 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 17:58:18,290 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 17:58:18,292 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 17:58:18,292 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/3) ...
[2020-11-24 17:58:18,292 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@400c47c0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 05:58:18, skipping insertion in model container
[2020-11-24 17:58:18,293 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 05:58:17" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 17:58:18,331 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 05:58:18 NWAContainer
[2020-11-24 17:58:18,332 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 17:58:18,332 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 17:58:18,332 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 17:58:18,333 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 17:58:18,334 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 05:58:18" (3/4) ...
[2020-11-24 17:58:18,335 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@648cf4c6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 05:58:18, skipping insertion in model container
[2020-11-24 17:58:18,335 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 05:58:18" (4/4) ...
[2020-11-24 17:58:18,338 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 17:58:18,341 INFO  L110   BuchiProductObserver]: Initial RCFG 688 locations, 843 edges
[2020-11-24 17:58:18,341 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 17:58:18,351 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 17:58:19,257 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 17:58:19,260 INFO  L110   BuchiProductObserver]: BuchiProgram size 1598 locations, 2718 edges
[2020-11-24 17:58:19,260 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 05:58:19 BoogieIcfgContainer
[2020-11-24 17:58:19,260 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 17:58:19,260 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 17:58:19,261 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 17:58:19,262 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 17:58:19,263 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 05:58:19" (1/1) ...
[2020-11-24 17:58:19,309 INFO  L313           BlockEncoder]: Initial Icfg 1598 locations, 2718 edges
[2020-11-24 17:58:19,310 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 17:58:19,310 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 17:58:19,310 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 17:58:19,311 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 17:58:19,319 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 13 locations because of local infeasibility
[2020-11-24 17:58:19,323 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-24 17:58:19,329 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 17:58:19,331 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 17:58:19,332 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 17:58:19,333 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 17:58:19,334 INFO  L313           BlockEncoder]: Encoded RCFG 1548 locations, 2588 edges
[2020-11-24 17:58:19,335 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 05:58:19 BasicIcfg
[2020-11-24 17:58:19,335 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 17:58:19,335 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 17:58:19,335 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 17:58:19,337 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 17:58:19,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 17:58:19,338 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 05:58:17" (1/6) ...
[2020-11-24 17:58:19,339 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5726abf9 and model type XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 05:58:19, skipping insertion in model container
[2020-11-24 17:58:19,339 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 17:58:19,339 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 05:58:17" (2/6) ...
[2020-11-24 17:58:19,340 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5726abf9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 05:58:19, skipping insertion in model container
[2020-11-24 17:58:19,340 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 17:58:19,340 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 05:58:18" (3/6) ...
[2020-11-24 17:58:19,340 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5726abf9 and model type XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 05:58:19, skipping insertion in model container
[2020-11-24 17:58:19,340 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 17:58:19,340 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 05:58:18" (4/6) ...
[2020-11-24 17:58:19,340 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5726abf9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 05:58:19, skipping insertion in model container
[2020-11-24 17:58:19,340 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 17:58:19,340 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 05:58:19" (5/6) ...
[2020-11-24 17:58:19,340 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5726abf9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 05:58:19, skipping insertion in model container
[2020-11-24 17:58:19,341 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 17:58:19,341 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 05:58:19" (6/6) ...
[2020-11-24 17:58:19,341 INFO  L404   chiAutomizerObserver]: Analyzing ICFG XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl_BEv2
[2020-11-24 17:58:19,372 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 17:58:19,372 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 17:58:19,372 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 17:58:19,372 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 17:58:19,372 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 17:58:19,372 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 17:58:19,372 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 17:58:19,372 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 17:58:19,372 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 17:58:19,387 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1548 states.
[2020-11-24 17:58:19,418 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:19,418 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:19,418 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:19,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:19,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
[2020-11-24 17:58:19,424 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 17:58:19,425 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1548 states.
[2020-11-24 17:58:19,432 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:19,432 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:19,432 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:19,433 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:19,433 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND TRUE   choice == 8
[L1876]              gas := gas - 21000;
[L1877]  COND FALSE  !(gas >= 0)
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:19,446 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:19,446 INFO  L82        PathProgramCache]: Analyzing trace with hash 592061045, now seen corresponding path program 1 times
[2020-11-24 17:58:19,450 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:19,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:19,530 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 17:58:19,532 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 17:58:19,532 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 17:58:19,536 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:19,642 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 17:58:19,643 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 17:58:19,645 INFO  L87              Difference]: Start difference. First operand 1548 states. Second operand 4 states.
[2020-11-24 17:58:19,818 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:19,819 INFO  L93              Difference]: Finished difference Result 673 states and 737 transitions.
[2020-11-24 17:58:19,819 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 17:58:19,820 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 673 states and 737 transitions.
[2020-11-24 17:58:19,826 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:19,832 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 673 states to 209 states and 222 transitions.
[2020-11-24 17:58:19,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 17:58:19,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 151
[2020-11-24 17:58:19,834 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 209 states and 222 transitions.
[2020-11-24 17:58:19,836 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:19,836 INFO  L728         BuchiCegarLoop]: Abstraction has 209 states and 222 transitions.
[2020-11-24 17:58:19,851 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 209 states and 222 transitions.
[2020-11-24 17:58:19,865 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 209 to 209.
[2020-11-24 17:58:19,865 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 209 states.
[2020-11-24 17:58:19,866 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 209 states to 209 states and 222 transitions.
[2020-11-24 17:58:19,867 INFO  L751         BuchiCegarLoop]: Abstraction has 209 states and 222 transitions.
[2020-11-24 17:58:19,867 INFO  L631         BuchiCegarLoop]: Abstraction has 209 states and 222 transitions.
[2020-11-24 17:58:19,867 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 17:58:19,867 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 209 states and 222 transitions.
[2020-11-24 17:58:19,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:19,869 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:19,869 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:19,870 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:19,870 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND FALSE  !(choice == 8)
[L1883]  COND FALSE  !(choice == 7)
[L1891]  COND FALSE  !(choice == 6)
[L1897]  COND FALSE  !(choice == 5)
[L1903]  COND FALSE  !(choice == 4)
[L1909]  COND FALSE  !(choice == 3)
[L1916]  COND FALSE  !(choice == 2)
[L1923]  COND TRUE   choice == 1
[L1924]              gas := gas - 21000;
[L1925]  COND TRUE   gas >= 0
[L1926]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1927]              assume msgvalue_MSG == 0;
[L1928]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L406]               havoc __exception;
[L407]               revert := false;
[L408]   COND FALSE  !(__exception)
[L431]   CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L964]   COND TRUE   DType[this] == XMDDexChain
[L965]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L802]   COND TRUE   !(b_s45 <= a_s45)
[L803]               revert := true;
[L965]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L966]   COND TRUE   revert
[L431]   RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L432]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L1928]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:19,873 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:19,873 INFO  L82        PathProgramCache]: Analyzing trace with hash -215414867, now seen corresponding path program 1 times
[2020-11-24 17:58:19,874 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:19,886 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:19,906 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 17:58:19,907 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 17:58:19,907 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 17:58:19,908 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:19,908 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 17:58:19,908 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 17:58:19,909 INFO  L87              Difference]: Start difference. First operand 209 states and 222 transitions. cyclomatic complexity: 14 Second operand 3 states.
[2020-11-24 17:58:19,917 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:19,917 INFO  L93              Difference]: Finished difference Result 244 states and 258 transitions.
[2020-11-24 17:58:19,917 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 17:58:19,917 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 244 states and 258 transitions.
[2020-11-24 17:58:19,919 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 17:58:19,921 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 244 states to 228 states and 237 transitions.
[2020-11-24 17:58:19,921 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 167
[2020-11-24 17:58:19,921 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 172
[2020-11-24 17:58:19,921 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 228 states and 237 transitions.
[2020-11-24 17:58:19,922 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:19,922 INFO  L728         BuchiCegarLoop]: Abstraction has 228 states and 237 transitions.
[2020-11-24 17:58:19,923 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 228 states and 237 transitions.
[2020-11-24 17:58:19,928 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 228 to 217.
[2020-11-24 17:58:19,928 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 217 states.
[2020-11-24 17:58:19,929 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 217 states to 217 states and 226 transitions.
[2020-11-24 17:58:19,929 INFO  L751         BuchiCegarLoop]: Abstraction has 217 states and 226 transitions.
[2020-11-24 17:58:19,929 INFO  L631         BuchiCegarLoop]: Abstraction has 217 states and 226 transitions.
[2020-11-24 17:58:19,929 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 17:58:19,929 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 217 states and 226 transitions.
[2020-11-24 17:58:19,930 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:19,930 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:19,930 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:19,932 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:19,932 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND FALSE  !(choice == 8)
[L1883]  COND FALSE  !(choice == 7)
[L1891]  COND FALSE  !(choice == 6)
[L1897]  COND FALSE  !(choice == 5)
[L1903]  COND FALSE  !(choice == 4)
[L1909]  COND FALSE  !(choice == 3)
[L1916]  COND FALSE  !(choice == 2)
[L1923]  COND TRUE   choice == 1
[L1924]              gas := gas - 21000;
[L1925]  COND TRUE   gas >= 0
[L1926]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1927]              assume msgvalue_MSG == 0;
[L1928]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L406]               havoc __exception;
[L407]               revert := false;
[L408]   COND TRUE   __exception
[L409]               __tmp__Balance := Balance;
[L410]               __tmp__DType := DType;
[L411]               __tmp__Alloc := Alloc;
[L412]               __tmp__balance_ADDR := balance_ADDR;
[L413]               __tmp__M_Ref_int := M_Ref_int;
[L414]               __tmp__sum_balances0 := sum_balances0;
[L415]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L416]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L417]               __tmp__sum_allowed1 := sum_allowed1;
[L418]               __tmp__Length := Length;
[L419]               __tmp__now := now;
[L420]               __tmp__owner_Owned := owner_Owned;
[L421]               __tmp__newOwner_Owned := newOwner_Owned;
[L422]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L423]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L424]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L425]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L426]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L427]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L428]   CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L922]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L923]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L793]   COND FALSE  !(!(b_s45 <= a_s45))
[L797]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L923]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L924]   COND TRUE   revert
[L428]   RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L429]               assume revert || gas < 0;
[L1928]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:19,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:19,935 INFO  L82        PathProgramCache]: Analyzing trace with hash 58541742, now seen corresponding path program 1 times
[2020-11-24 17:58:19,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:19,946 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:19,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 17:58:19,971 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 17:58:19,971 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 17:58:19,971 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:19,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 17:58:19,971 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 17:58:19,971 INFO  L87              Difference]: Start difference. First operand 217 states and 226 transitions. cyclomatic complexity: 10 Second operand 5 states.
[2020-11-24 17:58:19,995 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:19,995 INFO  L93              Difference]: Finished difference Result 228 states and 234 transitions.
[2020-11-24 17:58:19,995 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 17:58:19,995 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 228 states and 234 transitions.
[2020-11-24 17:58:19,997 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 17:58:19,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 228 states to 228 states and 234 transitions.
[2020-11-24 17:58:19,998 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 172
[2020-11-24 17:58:19,999 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 172
[2020-11-24 17:58:19,999 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 228 states and 234 transitions.
[2020-11-24 17:58:19,999 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:20,000 INFO  L728         BuchiCegarLoop]: Abstraction has 228 states and 234 transitions.
[2020-11-24 17:58:20,000 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 228 states and 234 transitions.
[2020-11-24 17:58:20,004 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 228 to 217.
[2020-11-24 17:58:20,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 217 states.
[2020-11-24 17:58:20,005 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 217 states to 217 states and 223 transitions.
[2020-11-24 17:58:20,005 INFO  L751         BuchiCegarLoop]: Abstraction has 217 states and 223 transitions.
[2020-11-24 17:58:20,005 INFO  L631         BuchiCegarLoop]: Abstraction has 217 states and 223 transitions.
[2020-11-24 17:58:20,005 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 17:58:20,005 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 217 states and 223 transitions.
[2020-11-24 17:58:20,006 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:20,006 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:20,006 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:20,007 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:20,007 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND FALSE  !(choice == 8)
[L1883]  COND FALSE  !(choice == 7)
[L1891]  COND FALSE  !(choice == 6)
[L1897]  COND FALSE  !(choice == 5)
[L1903]  COND FALSE  !(choice == 4)
[L1909]  COND FALSE  !(choice == 3)
[L1916]  COND FALSE  !(choice == 2)
[L1923]  COND TRUE   choice == 1
[L1924]              gas := gas - 21000;
[L1925]  COND TRUE   gas >= 0
[L1926]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1927]              assume msgvalue_MSG == 0;
[L1928]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L406]               havoc __exception;
[L407]               revert := false;
[L408]   COND TRUE   __exception
[L409]               __tmp__Balance := Balance;
[L410]               __tmp__DType := DType;
[L411]               __tmp__Alloc := Alloc;
[L412]               __tmp__balance_ADDR := balance_ADDR;
[L413]               __tmp__M_Ref_int := M_Ref_int;
[L414]               __tmp__sum_balances0 := sum_balances0;
[L415]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L416]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L417]               __tmp__sum_allowed1 := sum_allowed1;
[L418]               __tmp__Length := Length;
[L419]               __tmp__now := now;
[L420]               __tmp__owner_Owned := owner_Owned;
[L421]               __tmp__newOwner_Owned := newOwner_Owned;
[L422]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L423]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L424]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L425]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L426]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L427]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L428]   CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L922]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L923]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L793]   COND TRUE   !(b_s45 <= a_s45)
[L794]               revert := true;
[L923]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L924]   COND TRUE   revert
[L428]   RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L429]               assume revert || gas < 0;
[L1928]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:20,009 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:20,010 INFO  L82        PathProgramCache]: Analyzing trace with hash 421890278, now seen corresponding path program 1 times
[2020-11-24 17:58:20,011 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:20,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:20,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 17:58:20,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 17:58:20,067 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 17:58:20,068 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:20,068 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 17:58:20,068 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 17:58:20,068 INFO  L87              Difference]: Start difference. First operand 217 states and 223 transitions. cyclomatic complexity: 7 Second operand 7 states.
[2020-11-24 17:58:20,158 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:20,158 INFO  L93              Difference]: Finished difference Result 226 states and 231 transitions.
[2020-11-24 17:58:20,158 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 17:58:20,158 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 226 states and 231 transitions.
[2020-11-24 17:58:20,160 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 17:58:20,161 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 226 states to 222 states and 227 transitions.
[2020-11-24 17:58:20,161 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 166
[2020-11-24 17:58:20,161 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 166
[2020-11-24 17:58:20,161 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 222 states and 227 transitions.
[2020-11-24 17:58:20,162 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:20,162 INFO  L728         BuchiCegarLoop]: Abstraction has 222 states and 227 transitions.
[2020-11-24 17:58:20,162 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 222 states and 227 transitions.
[2020-11-24 17:58:20,165 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 222 to 215.
[2020-11-24 17:58:20,165 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 215 states.
[2020-11-24 17:58:20,166 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 215 states to 215 states and 220 transitions.
[2020-11-24 17:58:20,166 INFO  L751         BuchiCegarLoop]: Abstraction has 215 states and 220 transitions.
[2020-11-24 17:58:20,166 INFO  L631         BuchiCegarLoop]: Abstraction has 215 states and 220 transitions.
[2020-11-24 17:58:20,166 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 17:58:20,166 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 215 states and 220 transitions.
[2020-11-24 17:58:20,167 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:20,167 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:20,167 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:20,168 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:20,168 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND FALSE  !(choice == 8)
[L1883]  COND FALSE  !(choice == 7)
[L1891]  COND FALSE  !(choice == 6)
[L1897]  COND FALSE  !(choice == 5)
[L1903]  COND FALSE  !(choice == 4)
[L1909]  COND FALSE  !(choice == 3)
[L1916]  COND FALSE  !(choice == 2)
[L1923]  COND TRUE   choice == 1
[L1924]              gas := gas - 21000;
[L1925]  COND TRUE   gas >= 0
[L1926]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1927]              assume msgvalue_MSG == 0;
[L1928]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L406]               havoc __exception;
[L407]               revert := false;
[L408]   COND FALSE  !(__exception)
[L431]   CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L964]   COND TRUE   DType[this] == XMDDexChain
[L965]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L802]   COND FALSE  !(!(b_s45 <= a_s45))
[L806]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L966]   COND FALSE  !(revert)
[L972]               sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L973]               balances_XMDDexChain[this][from_s458] := __var_4;
[L974]               sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L975]   COND TRUE   DType[this] == XMDDexChain
[L976]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L802]   COND FALSE  !(!(b_s45 <= a_s45))
[L806]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L976]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L977]   COND FALSE  !(revert)
[L983]               sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L984]               allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_5;
[L985]               sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L986]   COND TRUE   DType[this] == XMDDexChain
[L987]   CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L784]               c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L785]   COND FALSE  !(!(c_s23 >= a_s23))
[L987]   RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L988]   COND FALSE  !(revert)
[L994]               sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L995]               balances_XMDDexChain[this][to_s458] := __var_6;
[L996]               sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L997]               assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L998]               success_s458 := true;
[L431]   RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L432]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L1928]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:20,171 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:20,171 INFO  L82        PathProgramCache]: Analyzing trace with hash -996762162, now seen corresponding path program 1 times
[2020-11-24 17:58:20,172 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:20,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:21,002 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 17:58:21,003 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 17:58:21,003 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-24 17:58:21,003 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:21,003 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-24 17:58:21,003 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=301, Unknown=0, NotChecked=0, Total=342
[2020-11-24 17:58:21,003 INFO  L87              Difference]: Start difference. First operand 215 states and 220 transitions. cyclomatic complexity: 6 Second operand 19 states.
[2020-11-24 17:58:21,385 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:21,385 INFO  L93              Difference]: Finished difference Result 214 states and 218 transitions.
[2020-11-24 17:58:21,385 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 17:58:21,385 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 214 states and 218 transitions.
[2020-11-24 17:58:21,386 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:21,387 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 214 states to 171 states and 174 transitions.
[2020-11-24 17:58:21,387 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 132
[2020-11-24 17:58:21,387 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 132
[2020-11-24 17:58:21,387 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 171 states and 174 transitions.
[2020-11-24 17:58:21,387 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:21,387 INFO  L728         BuchiCegarLoop]: Abstraction has 171 states and 174 transitions.
[2020-11-24 17:58:21,388 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 171 states and 174 transitions.
[2020-11-24 17:58:21,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 171 to 171.
[2020-11-24 17:58:21,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 171 states.
[2020-11-24 17:58:21,390 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 171 states to 171 states and 174 transitions.
[2020-11-24 17:58:21,390 INFO  L751         BuchiCegarLoop]: Abstraction has 171 states and 174 transitions.
[2020-11-24 17:58:21,390 INFO  L631         BuchiCegarLoop]: Abstraction has 171 states and 174 transitions.
[2020-11-24 17:58:21,390 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 17:58:21,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 171 states and 174 transitions.
[2020-11-24 17:58:21,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:21,391 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:21,391 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:21,392 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:21,392 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND FALSE  !(choice == 8)
[L1883]  COND FALSE  !(choice == 7)
[L1891]  COND FALSE  !(choice == 6)
[L1897]  COND FALSE  !(choice == 5)
[L1903]  COND FALSE  !(choice == 4)
[L1909]  COND FALSE  !(choice == 3)
[L1916]  COND FALSE  !(choice == 2)
[L1923]  COND TRUE   choice == 1
[L1924]              gas := gas - 21000;
[L1925]  COND TRUE   gas >= 0
[L1926]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1927]              assume msgvalue_MSG == 0;
[L1928]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L406]               havoc __exception;
[L407]               revert := false;
[L408]   COND TRUE   __exception
[L409]               __tmp__Balance := Balance;
[L410]               __tmp__DType := DType;
[L411]               __tmp__Alloc := Alloc;
[L412]               __tmp__balance_ADDR := balance_ADDR;
[L413]               __tmp__M_Ref_int := M_Ref_int;
[L414]               __tmp__sum_balances0 := sum_balances0;
[L415]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L416]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L417]               __tmp__sum_allowed1 := sum_allowed1;
[L418]               __tmp__Length := Length;
[L419]               __tmp__now := now;
[L420]               __tmp__owner_Owned := owner_Owned;
[L421]               __tmp__newOwner_Owned := newOwner_Owned;
[L422]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L423]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L424]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L425]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L426]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L427]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L428]   CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L922]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L923]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L793]   COND FALSE  !(!(b_s45 <= a_s45))
[L797]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L923]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L924]   COND FALSE  !(revert)
[L930]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L931]               __tmp__balances_XMDDexChain[this][from_s458] := __var_4;
[L932]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L933]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L934]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L793]   COND FALSE  !(!(b_s45 <= a_s45))
[L797]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L934]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L935]   COND FALSE  !(revert)
[L941]               __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L942]               __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_5;
[L943]               __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L944]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L945]   CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L775]               c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L776]   COND TRUE   !(c_s23 >= a_s23)
[L777]               revert := true;
[L945]   RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L946]   COND TRUE   revert
[L428]   RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L429]               assume revert || gas < 0;
[L1928]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:21,393 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:21,394 INFO  L82        PathProgramCache]: Analyzing trace with hash 469242717, now seen corresponding path program 1 times
[2020-11-24 17:58:21,394 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:21,401 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:21,442 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 17:58:21,442 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 17:58:21,442 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 17:58:21,442 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:21,442 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 17:58:21,443 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-24 17:58:21,443 INFO  L87              Difference]: Start difference. First operand 171 states and 174 transitions. cyclomatic complexity: 4 Second operand 9 states.
[2020-11-24 17:58:21,491 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:21,491 INFO  L93              Difference]: Finished difference Result 179 states and 181 transitions.
[2020-11-24 17:58:21,491 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 17:58:21,491 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 179 states and 181 transitions.
[2020-11-24 17:58:21,492 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:21,493 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 179 states to 172 states and 174 transitions.
[2020-11-24 17:58:21,493 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 133
[2020-11-24 17:58:21,493 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 133
[2020-11-24 17:58:21,493 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 172 states and 174 transitions.
[2020-11-24 17:58:21,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:21,493 INFO  L728         BuchiCegarLoop]: Abstraction has 172 states and 174 transitions.
[2020-11-24 17:58:21,493 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 172 states and 174 transitions.
[2020-11-24 17:58:21,495 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 172 to 166.
[2020-11-24 17:58:21,495 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 166 states.
[2020-11-24 17:58:21,495 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 166 states to 166 states and 168 transitions.
[2020-11-24 17:58:21,495 INFO  L751         BuchiCegarLoop]: Abstraction has 166 states and 168 transitions.
[2020-11-24 17:58:21,495 INFO  L631         BuchiCegarLoop]: Abstraction has 166 states and 168 transitions.
[2020-11-24 17:58:21,495 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 17:58:21,495 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 166 states and 168 transitions.
[2020-11-24 17:58:21,496 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:21,496 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:21,496 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:21,497 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:21,497 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND FALSE  !(choice == 8)
[L1883]  COND FALSE  !(choice == 7)
[L1891]  COND FALSE  !(choice == 6)
[L1897]  COND FALSE  !(choice == 5)
[L1903]  COND FALSE  !(choice == 4)
[L1909]  COND FALSE  !(choice == 3)
[L1916]  COND FALSE  !(choice == 2)
[L1923]  COND TRUE   choice == 1
[L1924]              gas := gas - 21000;
[L1925]  COND TRUE   gas >= 0
[L1926]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1927]              assume msgvalue_MSG == 0;
[L1928]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L406]               havoc __exception;
[L407]               revert := false;
[L408]   COND TRUE   __exception
[L409]               __tmp__Balance := Balance;
[L410]               __tmp__DType := DType;
[L411]               __tmp__Alloc := Alloc;
[L412]               __tmp__balance_ADDR := balance_ADDR;
[L413]               __tmp__M_Ref_int := M_Ref_int;
[L414]               __tmp__sum_balances0 := sum_balances0;
[L415]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L416]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L417]               __tmp__sum_allowed1 := sum_allowed1;
[L418]               __tmp__Length := Length;
[L419]               __tmp__now := now;
[L420]               __tmp__owner_Owned := owner_Owned;
[L421]               __tmp__newOwner_Owned := newOwner_Owned;
[L422]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L423]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L424]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L425]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L426]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L427]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L428]   CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L922]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L923]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L793]   COND FALSE  !(!(b_s45 <= a_s45))
[L797]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L923]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L924]   COND FALSE  !(revert)
[L930]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L931]               __tmp__balances_XMDDexChain[this][from_s458] := __var_4;
[L932]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L933]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L934]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L793]   COND FALSE  !(!(b_s45 <= a_s45))
[L797]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L934]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L935]   COND FALSE  !(revert)
[L941]               __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L942]               __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_5;
[L943]               __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L944]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L945]   CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L775]               c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L776]   COND FALSE  !(!(c_s23 >= a_s23))
[L945]   RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L946]   COND FALSE  !(revert)
[L952]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][to_s458];
[L953]               __tmp__balances_XMDDexChain[this][to_s458] := __var_6;
[L954]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][to_s458];
[L955]               success_s458 := true;
[L428]   RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L429]               assume revert || gas < 0;
[L1928]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:21,498 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:21,498 INFO  L82        PathProgramCache]: Analyzing trace with hash 526814735, now seen corresponding path program 1 times
[2020-11-24 17:58:21,499 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:21,503 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:21,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 17:58:21,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 17:58:21,526 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 17:58:21,527 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:21,527 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 17:58:21,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 17:58:21,527 INFO  L87              Difference]: Start difference. First operand 166 states and 168 transitions. cyclomatic complexity: 3 Second operand 5 states.
[2020-11-24 17:58:21,537 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:21,537 INFO  L93              Difference]: Finished difference Result 170 states and 171 transitions.
[2020-11-24 17:58:21,537 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 17:58:21,538 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 170 states and 171 transitions.
[2020-11-24 17:58:21,539 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:21,539 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 170 states to 148 states and 149 transitions.
[2020-11-24 17:58:21,539 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 109
[2020-11-24 17:58:21,539 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 109
[2020-11-24 17:58:21,539 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 148 states and 149 transitions.
[2020-11-24 17:58:21,540 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:21,540 INFO  L728         BuchiCegarLoop]: Abstraction has 148 states and 149 transitions.
[2020-11-24 17:58:21,540 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 148 states and 149 transitions.
[2020-11-24 17:58:21,541 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 148 to 148.
[2020-11-24 17:58:21,541 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 148 states.
[2020-11-24 17:58:21,542 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 148 states to 148 states and 149 transitions.
[2020-11-24 17:58:21,542 INFO  L751         BuchiCegarLoop]: Abstraction has 148 states and 149 transitions.
[2020-11-24 17:58:21,542 INFO  L631         BuchiCegarLoop]: Abstraction has 148 states and 149 transitions.
[2020-11-24 17:58:21,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 17:58:21,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 148 states and 149 transitions.
[2020-11-24 17:58:21,542 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 17:58:21,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 17:58:21,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 17:58:21,543 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 17:58:21,543 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1938]              assume null == 0;
[L1939]  CALL        call this := FreshRefGenerator__success();
[L767]               havoc newRef;
[L768]               assume Alloc[newRef] == false;
[L769]               Alloc[newRef] := true;
[L770]               assume newRef != null;
[L1939]  RET         call this := FreshRefGenerator__success();
[L1940]              assume now >= 0;
[L1941]              assume DType[this] == XMDDexChain;
[L1942]              assume !revert && gas >= 0;
[L1943]  CALL        call CorralChoice_XMDDexChain(this);
[L1823]              havoc msgsender_MSG;
[L1824]              havoc msgvalue_MSG;
[L1825]              havoc choice;
[L1826]              havoc a_s23;
[L1827]              havoc b_s23;
[L1828]              havoc c_s23;
[L1829]              havoc a_s45;
[L1830]              havoc b_s45;
[L1831]              havoc c_s45;
[L1832]              havoc a_s73;
[L1833]              havoc b_s73;
[L1834]              havoc c_s73;
[L1835]              havoc a_s95;
[L1836]              havoc b_s95;
[L1837]              havoc c_s95;
[L1838]              havoc __ret_0_totalSupply;
[L1839]              havoc tokenOwner_s328;
[L1840]              havoc balance_s328;
[L1841]              havoc tokenOwner_s474;
[L1842]              havoc spender_s474;
[L1843]              havoc remaining_s474;
[L1844]              havoc to_s371;
[L1845]              havoc tokens_s371;
[L1846]              havoc success_s371;
[L1847]              havoc spender_s399;
[L1848]              havoc tokens_s399;
[L1849]              havoc success_s399;
[L1850]              havoc from_s458;
[L1851]              havoc to_s458;
[L1852]              havoc tokens_s458;
[L1853]              havoc success_s458;
[L1854]              havoc __ret_0_owner;
[L1855]              havoc __ret_0_newOwner;
[L1856]              havoc _newOwner_s217;
[L1857]              havoc __ret_0_symbol;
[L1858]              havoc __ret_0_name;
[L1859]              havoc __ret_0_decimals;
[L1860]              havoc __ret_0__totalSupply;
[L1861]              havoc spender_s517;
[L1862]              havoc tokens_s517;
[L1863]              havoc data_s517;
[L1864]              havoc success_s517;
[L1865]              havoc tokenAddress_s544;
[L1866]              havoc tokens_s544;
[L1867]              havoc success_s544;
[L1868]              havoc tmpNow;
[L1869]              havoc gas;
[L1870]              assume gas > 4000000 && gas <= 8000000;
[L1871]              tmpNow := now;
[L1872]              havoc now;
[L1873]              assume now > tmpNow;
[L1874]              assume msgsender_MSG != null;
[L1875]  COND FALSE  !(choice == 8)
[L1883]  COND FALSE  !(choice == 7)
[L1891]  COND FALSE  !(choice == 6)
[L1897]  COND FALSE  !(choice == 5)
[L1903]  COND FALSE  !(choice == 4)
[L1909]  COND FALSE  !(choice == 3)
[L1916]  COND FALSE  !(choice == 2)
[L1923]  COND TRUE   choice == 1
[L1924]              gas := gas - 21000;
[L1925]  COND TRUE   gas >= 0
[L1926]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1927]              assume msgvalue_MSG == 0;
[L1928]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L406]               havoc __exception;
[L407]               revert := false;
[L408]   COND TRUE   __exception
[L409]               __tmp__Balance := Balance;
[L410]               __tmp__DType := DType;
[L411]               __tmp__Alloc := Alloc;
[L412]               __tmp__balance_ADDR := balance_ADDR;
[L413]               __tmp__M_Ref_int := M_Ref_int;
[L414]               __tmp__sum_balances0 := sum_balances0;
[L415]               __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L416]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L417]               __tmp__sum_allowed1 := sum_allowed1;
[L418]               __tmp__Length := Length;
[L419]               __tmp__now := now;
[L420]               __tmp__owner_Owned := owner_Owned;
[L421]               __tmp__newOwner_Owned := newOwner_Owned;
[L422]               __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L423]               __tmp__name_XMDDexChain := name_XMDDexChain;
[L424]               __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L425]               __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L426]               __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L427]               __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L428]   CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L922]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L923]   CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L793]   COND FALSE  !(!(b_s45 <= a_s45))
[L797]               c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L923]   RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L924]   COND FALSE  !(revert)
[L930]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L931]               __tmp__balances_XMDDexChain[this][from_s458] := __var_4;
[L932]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L933]   COND TRUE   __tmp__DType[this] == XMDDexChain
[L934]   CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L793]   COND TRUE   !(b_s45 <= a_s45)
[L794]               revert := true;
[L934]   RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L935]   COND TRUE   revert
[L428]   RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L429]               assume revert || gas < 0;
[L1928]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1943]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L1943]        assume true;

[2020-11-24 17:58:21,545 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 17:58:21,545 INFO  L82        PathProgramCache]: Analyzing trace with hash -1058621547, now seen corresponding path program 1 times
[2020-11-24 17:58:21,545 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 17:58:21,565 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 17:58:21,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 17:58:21,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 17:58:21,589 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 17:58:21,589 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 17:58:21,589 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 17:58:21,589 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 17:58:21,589 INFO  L87              Difference]: Start difference. First operand 148 states and 149 transitions. cyclomatic complexity: 2 Second operand 7 states.
[2020-11-24 17:58:21,602 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 17:58:21,602 INFO  L93              Difference]: Finished difference Result 139 states and 139 transitions.
[2020-11-24 17:58:21,602 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 17:58:21,602 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 139 states and 139 transitions.
[2020-11-24 17:58:21,603 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 17:58:21,603 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 139 states to 0 states and 0 transitions.
[2020-11-24 17:58:21,603 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 17:58:21,603 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 17:58:21,603 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 17:58:21,603 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 17:58:21,603 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 17:58:21,603 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 17:58:21,604 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 17:58:21,604 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 17:58:21,604 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 17:58:21,604 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 17:58:21,604 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 17:58:21,607 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 05:58:21 BasicIcfg
[2020-11-24 17:58:21,607 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 17:58:21,607 INFO  L168              Benchmark]: Toolchain (without parser) took 3978.27 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 306.7 MB). Free memory was 951.3 MB in the beginning and 1.2 GB in the end (delta: -284.5 MB). Peak memory consumption was 22.2 MB. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,608 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,608 INFO  L168              Benchmark]: Boogie Preprocessor took 68.43 ms. Allocated memory is still 1.0 GB. Free memory was 951.3 MB in the beginning and 940.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,608 INFO  L168              Benchmark]: UtopiaSpecLang took 51.98 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,609 INFO  L168              Benchmark]: Boogie Printer took 10.26 ms. Allocated memory is still 1.0 GB. Free memory is still 935.2 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,609 INFO  L168              Benchmark]: RCFGBuilder took 528.61 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 881.5 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,609 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.72 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 877.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,609 INFO  L168              Benchmark]: BÃ¼chi Program Product took 928.38 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 877.9 MB in the beginning and 938.1 MB in the end (delta: -60.2 MB). Peak memory consumption was 161.8 MB. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,610 INFO  L168              Benchmark]: BlockEncodingV2 took 74.43 ms. Allocated memory is still 1.1 GB. Free memory was 938.1 MB in the beginning and 902.4 MB in the end (delta: 35.7 MB). Peak memory consumption was 35.7 MB. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,610 INFO  L168              Benchmark]: BuchiAutomizer took 2271.69 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 250.6 MB). Free memory was 902.4 MB in the beginning and 1.2 GB in the end (delta: -333.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 17:58:21,612 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1598 locations, 2718 edges
  - StatisticsResult: Encoded RCFG
    1548 locations, 2588 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 68.43 ms. Allocated memory is still 1.0 GB. Free memory was 951.3 MB in the beginning and 940.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 51.98 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.26 ms. Allocated memory is still 1.0 GB. Free memory is still 935.2 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 528.61 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 881.5 MB in the end (delta: 53.7 MB). Peak memory consumption was 53.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.72 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 877.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 928.38 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.1 MB). Free memory was 877.9 MB in the beginning and 938.1 MB in the end (delta: -60.2 MB). Peak memory consumption was 161.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 74.43 ms. Allocated memory is still 1.1 GB. Free memory was 938.1 MB in the beginning and 902.4 MB in the end (delta: 35.7 MB). Peak memory consumption was 35.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2271.69 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 250.6 MB). Free memory was 902.4 MB in the beginning and 1.2 GB in the end (delta: -333.4 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    688 locations, 843 edges
  - StatisticsResult: BuchiProgram size
    1598 locations, 2718 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.2s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.2s. Construction of modules took 0.4s. BÃ¼chi inclusion checks took 0.3s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.0s AutomataMinimizationTime, 7 MinimizatonAttempts, 35 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 217 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 2021 SDtfs, 1828 SDslu, 4498 SDs, 0 SdLazy, 1993 SolverSat, 594 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_XMDDexChain0) ==> ( <>(success_transferFrom_XMDDexChain0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
