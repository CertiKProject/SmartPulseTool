This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 19:15:05,934 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 19:15:05,936 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 19:15:05,946 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 19:15:05,946 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 19:15:05,947 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 19:15:05,948 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 19:15:05,950 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 19:15:05,951 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 19:15:05,952 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 19:15:05,953 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 19:15:05,953 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 19:15:05,954 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 19:15:05,954 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 19:15:05,955 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 19:15:05,956 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 19:15:05,957 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 19:15:05,958 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 19:15:05,960 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 19:15:05,961 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 19:15:05,962 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 19:15:05,962 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 19:15:05,964 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 19:15:05,964 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 19:15:05,965 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 19:15:05,965 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 19:15:05,966 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 19:15:05,966 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 19:15:05,966 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 19:15:05,967 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 19:15:05,967 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 19:15:05,968 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 19:15:05,968 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 19:15:05,969 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 19:15:05,970 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 19:15:05,970 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 19:15:05,970 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 19:15:05,970 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 19:15:05,970 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 19:15:05,971 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 19:15:05,972 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 19:15:05,972 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 19:15:05,980 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 19:15:05,980 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 19:15:05,981 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 19:15:05,981 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 19:15:05,981 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 19:15:05,981 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 19:15:05,981 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 19:15:05,981 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 19:15:05,982 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 19:15:05,982 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 19:15:05,982 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 19:15:05,982 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 19:15:05,982 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 19:15:05,982 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 19:15:05,982 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 19:15:05,983 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 19:15:05,984 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 19:15:05,984 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 19:15:05,984 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 19:15:06,008 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 19:15:06,023 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 19:15:06,025 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 19:15:06,026 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 19:15:06,027 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 19:15:06,027 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl
[2020-11-24 19:15:06,027 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl'
[2020-11-24 19:15:06,090 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 19:15:06,092 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 19:15:06,092 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 19:15:06,092 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 19:15:06,092 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 19:15:06,108 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,110 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,127 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,128 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,143 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,149 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,153 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,158 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 19:15:06,159 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 19:15:06,159 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 19:15:06,162 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 19:15:06,166 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/1) ...
[2020-11-24 19:15:06,184 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Hakka.transfer(to, value), msg.sender == to && value <= balanceOf_Hakka[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && balanceOf_Hakka[this] == old(balanceOf_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:06,191 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Hakka.transfer(to, value), msg.sender == to && value <= balanceOf_Hakka[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && balanceOf_Hakka[this] == old(balanceOf_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:06,198 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Hakka.transfer(to, value), msg.sender == to && value <= balanceOf_Hakka[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && balanceOf_Hakka[this] == old(balanceOf_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:06,203 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s210 && amount_s210<=balanceOf_Hakka[this][msg.sender] ) && amount_s210>=0 ) && amount_s210<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_Hakka[this][to_s210]>=0 ) && balanceOf_Hakka[this][to_s210]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_Hakka[this][msg.sender]>=0 ) && balanceOf_Hakka[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 19:15:06,206 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( __ret_0_==true && totalSupply_Hakka[this]==( old(totalSupply_Hakka[this]) ) ) && balanceOf_Hakka[this]==( old(balanceOf_Hakka[this]) ) ) && allowance_Hakka[this]==( old(allowance_Hakka[this]) ) ) && nonces_Hakka[this]==( old(nonces_Hakka[this]) ) ) && DOMAIN_SEPARATOR_Hakka[this]==( old(DOMAIN_SEPARATOR_Hakka[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_Hakka>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[nonces_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[nonces_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[DOMAIN_SEPARATOR_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[DOMAIN_SEPARATOR_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]]
[2020-11-24 19:15:06,209 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Hakka.transfer(to, value), msg.sender == to && value <= balanceOf_Hakka[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && balanceOf_Hakka[this] == old(balanceOf_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:06,209 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_Hakka0) ==> ( <>AP(success_transfer_Hakka0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 19:15:06,214 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:06 PropertyContainer
[2020-11-24 19:15:06,214 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 19:15:06,214 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 19:15:06,214 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 19:15:06,214 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 19:15:06,215 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/2) ...
[2020-11-24 19:15:06,215 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 19:15:06,215 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 19:15:06,223 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:06" (2/2) ...
[2020-11-24 19:15:06,223 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 19:15:06,224 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 19:15:06,224 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 19:15:06,224 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 19:15:06,224 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/2) ...
[2020-11-24 19:15:06,278 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 19:15:06,278 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_Hakka__success
[2020-11-24 19:15:06,278 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_Hakka__success
[2020-11-24 19:15:06,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Hakka
[2020-11-24 19:15:06,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Hakka
[2020-11-24 19:15:06,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Hakka
[2020-11-24 19:15:06,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Hakka
[2020-11-24 19:15:06,278 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Hakka
[2020-11-24 19:15:06,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Hakka
[2020-11-24 19:15:06,279 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Hakka
[2020-11-24 19:15:06,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Hakka
[2020-11-24 19:15:06,279 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Hakka
[2020-11-24 19:15:06,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Hakka
[2020-11-24 19:15:06,279 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Hakka
[2020-11-24 19:15:06,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Hakka
[2020-11-24 19:15:06,279 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 19:15:06,279 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 19:15:06,279 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 19:15:06,279 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Hakka
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_Hakka__fail
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_Hakka__fail
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Hakka__success
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Hakka__fail
[2020-11-24 19:15:06,280 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Hakka__success
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Hakka__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Hakka__success
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Hakka__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Hakka__success
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Hakka__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Hakka__success
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Hakka__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Hakka__success
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Hakka__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 19:15:06,281 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_Hakka__fail
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_Hakka__success
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_Hakka__fail
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_Hakka__success
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Hakka__fail
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Hakka__success
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Hakka__fail
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Hakka__success
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Hakka__fail
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Hakka__success
[2020-11-24 19:15:06,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Hakka__fail
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Hakka__success
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Hakka__fail
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Hakka__success
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Hakka__fail
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Hakka__success
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 19:15:06,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 19:15:06,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 19:15:06,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 19:15:06,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 19:15:06,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 19:15:06,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Hakka
[2020-11-24 19:15:06,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 19:15:06,284 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 19:15:06,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 19:15:06,605 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 19:15:06,606 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 19:15:06,607 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 19:15:06,717 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 19:15:06,717 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-24 19:15:06,719 INFO  L202        PluginConnector]: Adding new model Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:06 BoogieIcfgContainer
[2020-11-24 19:15:06,719 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:06" (2/2) ...
[2020-11-24 19:15:06,719 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 19:15:06,719 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@582b803d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:06, skipping insertion in model container
[2020-11-24 19:15:06,719 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 19:15:06,720 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 19:15:06,720 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 19:15:06,721 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 19:15:06,721 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/3) ...
[2020-11-24 19:15:06,722 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6216e61 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:06, skipping insertion in model container
[2020-11-24 19:15:06,722 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:06" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 19:15:06,758 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:06 NWAContainer
[2020-11-24 19:15:06,758 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 19:15:06,759 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 19:15:06,759 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 19:15:06,760 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 19:15:06,760 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:06" (3/4) ...
[2020-11-24 19:15:06,761 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@21baa4b8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:06, skipping insertion in model container
[2020-11-24 19:15:06,761 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:06" (4/4) ...
[2020-11-24 19:15:06,764 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 19:15:06,767 INFO  L110   BuchiProductObserver]: Initial RCFG 523 locations, 622 edges
[2020-11-24 19:15:06,767 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 19:15:06,776 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 19:15:07,559 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 19:15:07,563 INFO  L110   BuchiProductObserver]: BuchiProgram size 1200 locations, 1992 edges
[2020-11-24 19:15:07,563 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:07 BoogieIcfgContainer
[2020-11-24 19:15:07,563 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 19:15:07,563 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 19:15:07,564 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 19:15:07,565 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 19:15:07,566 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:07" (1/1) ...
[2020-11-24 19:15:07,609 INFO  L313           BlockEncoder]: Initial Icfg 1200 locations, 1992 edges
[2020-11-24 19:15:07,610 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 19:15:07,611 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 19:15:07,611 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 19:15:07,612 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 19:15:07,619 INFO  L70    emoveInfeasibleEdges]: Removed 30 edges and 9 locations because of local infeasibility
[2020-11-24 19:15:07,623 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-24 19:15:07,628 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 19:15:07,630 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 19:15:07,632 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 19:15:07,632 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 19:15:07,635 INFO  L313           BlockEncoder]: Encoded RCFG 1180 locations, 1946 edges
[2020-11-24 19:15:07,635 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 07:15:07 BasicIcfg
[2020-11-24 19:15:07,635 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 19:15:07,635 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 19:15:07,636 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 19:15:07,638 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 19:15:07,638 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:07,638 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:06" (1/6) ...
[2020-11-24 19:15:07,640 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8a5b17e and model type Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 07:15:07, skipping insertion in model container
[2020-11-24 19:15:07,640 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:07,640 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:06" (2/6) ...
[2020-11-24 19:15:07,640 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8a5b17e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 07:15:07, skipping insertion in model container
[2020-11-24 19:15:07,641 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:07,641 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:06" (3/6) ...
[2020-11-24 19:15:07,641 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8a5b17e and model type Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 07:15:07, skipping insertion in model container
[2020-11-24 19:15:07,641 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:07,641 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:06" (4/6) ...
[2020-11-24 19:15:07,641 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8a5b17e and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 07:15:07, skipping insertion in model container
[2020-11-24 19:15:07,641 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:07,642 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:07" (5/6) ...
[2020-11-24 19:15:07,642 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8a5b17e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 07:15:07, skipping insertion in model container
[2020-11-24 19:15:07,642 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:07,642 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 07:15:07" (6/6) ...
[2020-11-24 19:15:07,643 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-self.bpl_BEv2
[2020-11-24 19:15:07,682 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 19:15:07,683 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 19:15:07,683 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 19:15:07,683 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 19:15:07,683 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 19:15:07,683 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 19:15:07,684 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 19:15:07,684 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 19:15:07,684 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 19:15:07,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1180 states.
[2020-11-24 19:15:07,746 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:07,747 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:07,747 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:07,758 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:07,759 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
[2020-11-24 19:15:07,759 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 19:15:07,759 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1180 states.
[2020-11-24 19:15:07,773 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:07,773 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:07,773 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:07,775 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:07,776 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND TRUE   choice == 6
[L1489]              gas := gas - 21000;
[L1490]  COND FALSE  !(gas >= 0)
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:07,802 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:07,802 INFO  L82        PathProgramCache]: Analyzing trace with hash -1505508262, now seen corresponding path program 1 times
[2020-11-24 19:15:07,807 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:07,827 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:07,877 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:07,879 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:07,879 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 19:15:07,883 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:07,895 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 19:15:07,895 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 19:15:07,897 INFO  L87              Difference]: Start difference. First operand 1180 states. Second operand 4 states.
[2020-11-24 19:15:08,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:08,125 INFO  L93              Difference]: Finished difference Result 608 states and 668 transitions.
[2020-11-24 19:15:08,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 19:15:08,127 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 608 states and 668 transitions.
[2020-11-24 19:15:08,132 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,138 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 608 states to 223 states and 242 transitions.
[2020-11-24 19:15:08,138 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 19:15:08,140 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 155
[2020-11-24 19:15:08,140 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 223 states and 242 transitions.
[2020-11-24 19:15:08,143 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:08,143 INFO  L728         BuchiCegarLoop]: Abstraction has 223 states and 242 transitions.
[2020-11-24 19:15:08,157 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 223 states and 242 transitions.
[2020-11-24 19:15:08,171 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 223 to 223.
[2020-11-24 19:15:08,171 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 223 states.
[2020-11-24 19:15:08,172 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 223 states to 223 states and 242 transitions.
[2020-11-24 19:15:08,173 INFO  L751         BuchiCegarLoop]: Abstraction has 223 states and 242 transitions.
[2020-11-24 19:15:08,173 INFO  L631         BuchiCegarLoop]: Abstraction has 223 states and 242 transitions.
[2020-11-24 19:15:08,173 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 19:15:08,173 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 223 states and 242 transitions.
[2020-11-24 19:15:08,175 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,175 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:08,175 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:08,177 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:08,177 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND FALSE  !(__exception)
[L116]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L736]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L788]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L789]   COND FALSE  !(from_s295 != msgsender_MSG && allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L798]   COND TRUE   !(balanceOf_Hakka[this][from_s295] >= amount_s295)
[L799]               revert := true;
[L736]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L737]   COND TRUE   revert
[L116]   RET         call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L117]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_Hakka[this] == old(totalSupply_Hakka[this])) && balanceOf_Hakka[this] == old(balanceOf_Hakka[this])) && allowance_Hakka[this] == old(allowance_Hakka[this])) && nonces_Hakka[this] == old(nonces_Hakka[this])) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:08,181 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:08,181 INFO  L82        PathProgramCache]: Analyzing trace with hash -465520546, now seen corresponding path program 1 times
[2020-11-24 19:15:08,182 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:08,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:08,214 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:08,215 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:08,215 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 19:15:08,216 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:08,216 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 19:15:08,216 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 19:15:08,217 INFO  L87              Difference]: Start difference. First operand 223 states and 242 transitions. cyclomatic complexity: 20 Second operand 3 states.
[2020-11-24 19:15:08,225 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:08,225 INFO  L93              Difference]: Finished difference Result 266 states and 286 transitions.
[2020-11-24 19:15:08,225 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 19:15:08,226 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 266 states and 286 transitions.
[2020-11-24 19:15:08,228 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:08,230 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 266 states to 245 states and 258 transitions.
[2020-11-24 19:15:08,230 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 174
[2020-11-24 19:15:08,231 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 179
[2020-11-24 19:15:08,231 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 245 states and 258 transitions.
[2020-11-24 19:15:08,232 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:08,232 INFO  L728         BuchiCegarLoop]: Abstraction has 245 states and 258 transitions.
[2020-11-24 19:15:08,232 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 245 states and 258 transitions.
[2020-11-24 19:15:08,238 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 245 to 234.
[2020-11-24 19:15:08,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 234 states.
[2020-11-24 19:15:08,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 234 states to 234 states and 247 transitions.
[2020-11-24 19:15:08,239 INFO  L751         BuchiCegarLoop]: Abstraction has 234 states and 247 transitions.
[2020-11-24 19:15:08,239 INFO  L631         BuchiCegarLoop]: Abstraction has 234 states and 247 transitions.
[2020-11-24 19:15:08,239 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 19:15:08,239 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 234 states and 247 transitions.
[2020-11-24 19:15:08,240 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,240 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:08,240 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:08,242 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:08,242 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND TRUE   __exception
[L90]                __tmp__Balance := Balance;
[L91]                __tmp__DType := DType;
[L92]                __tmp__Alloc := Alloc;
[L93]                __tmp__balance_ADDR := balance_ADDR;
[L94]                __tmp__M_Ref_int := M_Ref_int;
[L95]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L96]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L97]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L98]                __tmp__sum_allowance1 := sum_allowance1;
[L99]                __tmp__sum_nonces2 := sum_nonces2;
[L100]               __tmp__Length := Length;
[L101]               __tmp__now := now;
[L102]               __tmp__owner_Ownable := owner_Ownable;
[L103]               __tmp__name_Hakka := name_Hakka;
[L104]               __tmp__symbol_Hakka := symbol_Hakka;
[L105]               __tmp__version_Hakka := version_Hakka;
[L106]               __tmp__decimals_Hakka := decimals_Hakka;
[L107]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L108]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L109]               __tmp__allowance_Hakka := allowance_Hakka;
[L110]               __tmp__nonces_Hakka := nonces_Hakka;
[L111]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L112]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L113]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L725]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L750]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L751]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L760]   COND TRUE   !(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295)
[L761]               revert := true;
[L725]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L726]   COND TRUE   revert
[L113]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L114]               assume revert || gas < 0;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:08,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:08,245 INFO  L82        PathProgramCache]: Analyzing trace with hash 1500413157, now seen corresponding path program 1 times
[2020-11-24 19:15:08,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:08,258 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:08,313 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:08,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:08,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 19:15:08,314 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:08,314 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 19:15:08,314 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 19:15:08,314 INFO  L87              Difference]: Start difference. First operand 234 states and 247 transitions. cyclomatic complexity: 14 Second operand 7 states.
[2020-11-24 19:15:08,426 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:08,426 INFO  L93              Difference]: Finished difference Result 257 states and 269 transitions.
[2020-11-24 19:15:08,426 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 19:15:08,426 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 257 states and 269 transitions.
[2020-11-24 19:15:08,428 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:08,430 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 257 states to 250 states and 262 transitions.
[2020-11-24 19:15:08,430 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 184
[2020-11-24 19:15:08,430 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 184
[2020-11-24 19:15:08,430 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 250 states and 262 transitions.
[2020-11-24 19:15:08,431 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:08,431 INFO  L728         BuchiCegarLoop]: Abstraction has 250 states and 262 transitions.
[2020-11-24 19:15:08,431 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 250 states and 262 transitions.
[2020-11-24 19:15:08,435 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 250 to 233.
[2020-11-24 19:15:08,435 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 233 states.
[2020-11-24 19:15:08,436 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 233 states to 233 states and 245 transitions.
[2020-11-24 19:15:08,436 INFO  L751         BuchiCegarLoop]: Abstraction has 233 states and 245 transitions.
[2020-11-24 19:15:08,436 INFO  L631         BuchiCegarLoop]: Abstraction has 233 states and 245 transitions.
[2020-11-24 19:15:08,436 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 19:15:08,436 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 233 states and 245 transitions.
[2020-11-24 19:15:08,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:08,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:08,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:08,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND TRUE   __exception
[L90]                __tmp__Balance := Balance;
[L91]                __tmp__DType := DType;
[L92]                __tmp__Alloc := Alloc;
[L93]                __tmp__balance_ADDR := balance_ADDR;
[L94]                __tmp__M_Ref_int := M_Ref_int;
[L95]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L96]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L97]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L98]                __tmp__sum_allowance1 := sum_allowance1;
[L99]                __tmp__sum_nonces2 := sum_nonces2;
[L100]               __tmp__Length := Length;
[L101]               __tmp__now := now;
[L102]               __tmp__owner_Ownable := owner_Ownable;
[L103]               __tmp__name_Hakka := name_Hakka;
[L104]               __tmp__symbol_Hakka := symbol_Hakka;
[L105]               __tmp__version_Hakka := version_Hakka;
[L106]               __tmp__decimals_Hakka := decimals_Hakka;
[L107]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L108]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L109]               __tmp__allowance_Hakka := allowance_Hakka;
[L110]               __tmp__nonces_Hakka := nonces_Hakka;
[L111]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L112]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L113]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L725]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L750]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L751]   COND TRUE   from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L752]   CALL        call __var_3 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L706]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L707]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L752]   RET         call __var_3 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L753]   COND TRUE   revert
[L725]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L726]   COND TRUE   revert
[L113]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L114]               assume revert || gas < 0;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:08,441 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:08,441 INFO  L82        PathProgramCache]: Analyzing trace with hash -355265746, now seen corresponding path program 1 times
[2020-11-24 19:15:08,442 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:08,450 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:08,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:08,471 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:08,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 19:15:08,471 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:08,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 19:15:08,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 19:15:08,471 INFO  L87              Difference]: Start difference. First operand 233 states and 245 transitions. cyclomatic complexity: 13 Second operand 3 states.
[2020-11-24 19:15:08,478 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:08,478 INFO  L93              Difference]: Finished difference Result 255 states and 271 transitions.
[2020-11-24 19:15:08,478 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 19:15:08,478 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 255 states and 271 transitions.
[2020-11-24 19:15:08,480 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,481 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 255 states to 224 states and 232 transitions.
[2020-11-24 19:15:08,481 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 165
[2020-11-24 19:15:08,482 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 201
[2020-11-24 19:15:08,482 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 224 states and 232 transitions.
[2020-11-24 19:15:08,482 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:08,482 INFO  L728         BuchiCegarLoop]: Abstraction has 224 states and 232 transitions.
[2020-11-24 19:15:08,483 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 224 states and 232 transitions.
[2020-11-24 19:15:08,485 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 224 to 224.
[2020-11-24 19:15:08,485 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 224 states.
[2020-11-24 19:15:08,486 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 224 states to 224 states and 232 transitions.
[2020-11-24 19:15:08,486 INFO  L751         BuchiCegarLoop]: Abstraction has 224 states and 232 transitions.
[2020-11-24 19:15:08,486 INFO  L631         BuchiCegarLoop]: Abstraction has 224 states and 232 transitions.
[2020-11-24 19:15:08,486 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 19:15:08,486 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 224 states and 232 transitions.
[2020-11-24 19:15:08,487 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,487 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:08,487 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:08,488 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:08,488 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND TRUE   __exception
[L90]                __tmp__Balance := Balance;
[L91]                __tmp__DType := DType;
[L92]                __tmp__Alloc := Alloc;
[L93]                __tmp__balance_ADDR := balance_ADDR;
[L94]                __tmp__M_Ref_int := M_Ref_int;
[L95]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L96]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L97]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L98]                __tmp__sum_allowance1 := sum_allowance1;
[L99]                __tmp__sum_nonces2 := sum_nonces2;
[L100]               __tmp__Length := Length;
[L101]               __tmp__now := now;
[L102]               __tmp__owner_Ownable := owner_Ownable;
[L103]               __tmp__name_Hakka := name_Hakka;
[L104]               __tmp__symbol_Hakka := symbol_Hakka;
[L105]               __tmp__version_Hakka := version_Hakka;
[L106]               __tmp__decimals_Hakka := decimals_Hakka;
[L107]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L108]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L109]               __tmp__allowance_Hakka := allowance_Hakka;
[L110]               __tmp__nonces_Hakka := nonces_Hakka;
[L111]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L112]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L113]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L725]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L750]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L751]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L760]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L764]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L706]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L707]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L764]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L765]   COND TRUE   revert
[L725]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L726]   COND TRUE   revert
[L113]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L114]               assume revert || gas < 0;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:08,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:08,490 INFO  L82        PathProgramCache]: Analyzing trace with hash 541090871, now seen corresponding path program 1 times
[2020-11-24 19:15:08,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:08,499 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:08,523 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:08,523 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:08,523 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 19:15:08,523 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:08,524 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 19:15:08,524 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 19:15:08,524 INFO  L87              Difference]: Start difference. First operand 224 states and 232 transitions. cyclomatic complexity: 9 Second operand 5 states.
[2020-11-24 19:15:08,537 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:08,537 INFO  L93              Difference]: Finished difference Result 235 states and 240 transitions.
[2020-11-24 19:15:08,537 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 19:15:08,538 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 235 states and 240 transitions.
[2020-11-24 19:15:08,539 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:08,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 235 states to 235 states and 240 transitions.
[2020-11-24 19:15:08,540 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 212
[2020-11-24 19:15:08,541 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 212
[2020-11-24 19:15:08,541 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 235 states and 240 transitions.
[2020-11-24 19:15:08,541 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:08,541 INFO  L728         BuchiCegarLoop]: Abstraction has 235 states and 240 transitions.
[2020-11-24 19:15:08,541 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 235 states and 240 transitions.
[2020-11-24 19:15:08,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 235 to 224.
[2020-11-24 19:15:08,544 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 224 states.
[2020-11-24 19:15:08,544 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 224 states to 224 states and 229 transitions.
[2020-11-24 19:15:08,544 INFO  L751         BuchiCegarLoop]: Abstraction has 224 states and 229 transitions.
[2020-11-24 19:15:08,544 INFO  L631         BuchiCegarLoop]: Abstraction has 224 states and 229 transitions.
[2020-11-24 19:15:08,544 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 19:15:08,544 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 224 states and 229 transitions.
[2020-11-24 19:15:08,545 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,545 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:08,546 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:08,546 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:08,547 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND TRUE   __exception
[L90]                __tmp__Balance := Balance;
[L91]                __tmp__DType := DType;
[L92]                __tmp__Alloc := Alloc;
[L93]                __tmp__balance_ADDR := balance_ADDR;
[L94]                __tmp__M_Ref_int := M_Ref_int;
[L95]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L96]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L97]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L98]                __tmp__sum_allowance1 := sum_allowance1;
[L99]                __tmp__sum_nonces2 := sum_nonces2;
[L100]               __tmp__Length := Length;
[L101]               __tmp__now := now;
[L102]               __tmp__owner_Ownable := owner_Ownable;
[L103]               __tmp__name_Hakka := name_Hakka;
[L104]               __tmp__symbol_Hakka := symbol_Hakka;
[L105]               __tmp__version_Hakka := version_Hakka;
[L106]               __tmp__decimals_Hakka := decimals_Hakka;
[L107]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L108]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L109]               __tmp__allowance_Hakka := allowance_Hakka;
[L110]               __tmp__nonces_Hakka := nonces_Hakka;
[L111]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L112]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L113]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L725]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L750]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L751]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L760]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L764]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L706]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L707]   COND TRUE   !((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157)
[L708]               revert := true;
[L764]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L765]   COND TRUE   revert
[L725]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L726]   COND TRUE   revert
[L113]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L114]               assume revert || gas < 0;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:08,549 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:08,549 INFO  L82        PathProgramCache]: Analyzing trace with hash -783519121, now seen corresponding path program 1 times
[2020-11-24 19:15:08,550 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:08,562 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:08,607 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:08,608 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:08,608 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 19:15:08,608 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:08,608 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 19:15:08,608 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 19:15:08,608 INFO  L87              Difference]: Start difference. First operand 224 states and 229 transitions. cyclomatic complexity: 6 Second operand 7 states.
[2020-11-24 19:15:08,632 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:08,633 INFO  L93              Difference]: Finished difference Result 230 states and 234 transitions.
[2020-11-24 19:15:08,633 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 19:15:08,633 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 230 states and 234 transitions.
[2020-11-24 19:15:08,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,636 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 230 states to 219 states and 223 transitions.
[2020-11-24 19:15:08,636 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 196
[2020-11-24 19:15:08,636 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 196
[2020-11-24 19:15:08,636 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 219 states and 223 transitions.
[2020-11-24 19:15:08,637 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:08,637 INFO  L728         BuchiCegarLoop]: Abstraction has 219 states and 223 transitions.
[2020-11-24 19:15:08,637 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 219 states and 223 transitions.
[2020-11-24 19:15:08,639 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 219 to 219.
[2020-11-24 19:15:08,639 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 219 states.
[2020-11-24 19:15:08,640 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 219 states to 219 states and 223 transitions.
[2020-11-24 19:15:08,640 INFO  L751         BuchiCegarLoop]: Abstraction has 219 states and 223 transitions.
[2020-11-24 19:15:08,640 INFO  L631         BuchiCegarLoop]: Abstraction has 219 states and 223 transitions.
[2020-11-24 19:15:08,640 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 19:15:08,640 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 219 states and 223 transitions.
[2020-11-24 19:15:08,641 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:08,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:08,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:08,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:08,642 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND TRUE   __exception
[L90]                __tmp__Balance := Balance;
[L91]                __tmp__DType := DType;
[L92]                __tmp__Alloc := Alloc;
[L93]                __tmp__balance_ADDR := balance_ADDR;
[L94]                __tmp__M_Ref_int := M_Ref_int;
[L95]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L96]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L97]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L98]                __tmp__sum_allowance1 := sum_allowance1;
[L99]                __tmp__sum_nonces2 := sum_nonces2;
[L100]               __tmp__Length := Length;
[L101]               __tmp__now := now;
[L102]               __tmp__owner_Ownable := owner_Ownable;
[L103]               __tmp__name_Hakka := name_Hakka;
[L104]               __tmp__symbol_Hakka := symbol_Hakka;
[L105]               __tmp__version_Hakka := version_Hakka;
[L106]               __tmp__decimals_Hakka := decimals_Hakka;
[L107]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L108]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L109]               __tmp__allowance_Hakka := allowance_Hakka;
[L110]               __tmp__nonces_Hakka := nonces_Hakka;
[L111]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L112]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L113]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L725]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L750]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L751]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L760]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L764]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L706]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L707]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L764]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L765]   COND FALSE  !(revert)
[L768]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_Hakka[this][from_s295];
[L769]               __tmp__balanceOf_Hakka[this][from_s295] := __var_4;
[L770]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_Hakka[this][from_s295];
[L771]   CALL        call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L688]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L689]   COND TRUE   !((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136)
[L690]               revert := true;
[L771]   RET         call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L772]   COND TRUE   revert
[L725]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L726]   COND TRUE   revert
[L113]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L114]               assume revert || gas < 0;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:08,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:08,645 INFO  L82        PathProgramCache]: Analyzing trace with hash 1095466312, now seen corresponding path program 1 times
[2020-11-24 19:15:08,645 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:08,661 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:08,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:08,808 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:08,808 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-24 19:15:08,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:08,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 19:15:08,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-24 19:15:08,810 INFO  L87              Difference]: Start difference. First operand 219 states and 223 transitions. cyclomatic complexity: 5 Second operand 12 states.
[2020-11-24 19:15:09,074 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:09,074 INFO  L93              Difference]: Finished difference Result 228 states and 231 transitions.
[2020-11-24 19:15:09,074 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 19:15:09,074 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 228 states and 231 transitions.
[2020-11-24 19:15:09,076 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:09,077 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 228 states to 217 states and 220 transitions.
[2020-11-24 19:15:09,077 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 194
[2020-11-24 19:15:09,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 194
[2020-11-24 19:15:09,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 217 states and 220 transitions.
[2020-11-24 19:15:09,078 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:09,078 INFO  L728         BuchiCegarLoop]: Abstraction has 217 states and 220 transitions.
[2020-11-24 19:15:09,079 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 217 states and 220 transitions.
[2020-11-24 19:15:09,081 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 217 to 210.
[2020-11-24 19:15:09,081 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 210 states.
[2020-11-24 19:15:09,082 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 210 states to 210 states and 213 transitions.
[2020-11-24 19:15:09,082 INFO  L751         BuchiCegarLoop]: Abstraction has 210 states and 213 transitions.
[2020-11-24 19:15:09,082 INFO  L631         BuchiCegarLoop]: Abstraction has 210 states and 213 transitions.
[2020-11-24 19:15:09,082 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 19:15:09,082 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 210 states and 213 transitions.
[2020-11-24 19:15:09,084 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:09,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:09,084 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:09,085 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:09,085 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND TRUE   __exception
[L90]                __tmp__Balance := Balance;
[L91]                __tmp__DType := DType;
[L92]                __tmp__Alloc := Alloc;
[L93]                __tmp__balance_ADDR := balance_ADDR;
[L94]                __tmp__M_Ref_int := M_Ref_int;
[L95]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L96]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L97]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L98]                __tmp__sum_allowance1 := sum_allowance1;
[L99]                __tmp__sum_nonces2 := sum_nonces2;
[L100]               __tmp__Length := Length;
[L101]               __tmp__now := now;
[L102]               __tmp__owner_Ownable := owner_Ownable;
[L103]               __tmp__name_Hakka := name_Hakka;
[L104]               __tmp__symbol_Hakka := symbol_Hakka;
[L105]               __tmp__version_Hakka := version_Hakka;
[L106]               __tmp__decimals_Hakka := decimals_Hakka;
[L107]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L108]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L109]               __tmp__allowance_Hakka := allowance_Hakka;
[L110]               __tmp__nonces_Hakka := nonces_Hakka;
[L111]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L112]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L113]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L725]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L750]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L751]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L760]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L764]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L706]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L707]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L764]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L765]   COND FALSE  !(revert)
[L768]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_Hakka[this][from_s295];
[L769]               __tmp__balanceOf_Hakka[this][from_s295] := __var_4;
[L770]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_Hakka[this][from_s295];
[L771]   CALL        call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L688]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L689]   COND FALSE  !(!((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136))
[L771]   RET         call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L772]   COND FALSE  !(revert)
[L775]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_Hakka[this][to_s295];
[L776]               __tmp__balanceOf_Hakka[this][to_s295] := __var_5;
[L777]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_Hakka[this][to_s295];
[L778]               __ret_0_ := true;
[L725]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L726]   COND FALSE  !(revert)
[L729]               __ret_0_ := __var_1;
[L113]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L114]               assume revert || gas < 0;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:09,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:09,087 INFO  L82        PathProgramCache]: Analyzing trace with hash 1560640259, now seen corresponding path program 1 times
[2020-11-24 19:15:09,088 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:09,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:09,130 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:09,130 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:09,130 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 19:15:09,131 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:09,131 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 19:15:09,132 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 19:15:09,132 INFO  L87              Difference]: Start difference. First operand 210 states and 213 transitions. cyclomatic complexity: 4 Second operand 5 states.
[2020-11-24 19:15:09,172 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:09,172 INFO  L93              Difference]: Finished difference Result 210 states and 212 transitions.
[2020-11-24 19:15:09,172 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 19:15:09,172 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 210 states and 212 transitions.
[2020-11-24 19:15:09,173 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:09,174 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 210 states to 148 states and 150 transitions.
[2020-11-24 19:15:09,174 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 125
[2020-11-24 19:15:09,174 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 125
[2020-11-24 19:15:09,174 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 148 states and 150 transitions.
[2020-11-24 19:15:09,175 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:09,175 INFO  L728         BuchiCegarLoop]: Abstraction has 148 states and 150 transitions.
[2020-11-24 19:15:09,175 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 148 states and 150 transitions.
[2020-11-24 19:15:09,176 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 148 to 148.
[2020-11-24 19:15:09,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 148 states.
[2020-11-24 19:15:09,177 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 148 states to 148 states and 150 transitions.
[2020-11-24 19:15:09,177 INFO  L751         BuchiCegarLoop]: Abstraction has 148 states and 150 transitions.
[2020-11-24 19:15:09,177 INFO  L631         BuchiCegarLoop]: Abstraction has 148 states and 150 transitions.
[2020-11-24 19:15:09,177 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 19:15:09,177 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 148 states and 150 transitions.
[2020-11-24 19:15:09,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:09,178 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:09,178 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:09,179 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:09,179 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND FALSE  !(__exception)
[L116]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L736]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L788]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L789]   COND FALSE  !(from_s295 != msgsender_MSG && allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L798]   COND FALSE  !(!(balanceOf_Hakka[this][from_s295] >= amount_s295))
[L802]   CALL        call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L715]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L716]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L802]   RET         call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L803]   COND FALSE  !(revert)
[L806]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][from_s295];
[L807]               balanceOf_Hakka[this][from_s295] := __var_4;
[L808]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][from_s295];
[L809]   CALL        call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L697]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L698]   COND FALSE  !(!((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136))
[L809]   RET         call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L810]   COND FALSE  !(revert)
[L813]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][to_s295];
[L814]               balanceOf_Hakka[this][to_s295] := __var_5;
[L815]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][to_s295];
[L816]               assert { :EventEmitted "Transfer_Hakka" } true;
[L817]               __ret_0_ := true;
[L736]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L737]   COND FALSE  !(revert)
[L740]               __ret_0_ := __var_1;
[L116]   RET         call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L117]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_Hakka[this] == old(totalSupply_Hakka[this])) && balanceOf_Hakka[this] == old(balanceOf_Hakka[this])) && allowance_Hakka[this] == old(allowance_Hakka[this])) && nonces_Hakka[this] == old(nonces_Hakka[this])) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:09,181 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:09,181 INFO  L82        PathProgramCache]: Analyzing trace with hash -1609235906, now seen corresponding path program 1 times
[2020-11-24 19:15:09,182 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:09,218 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:09,477 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:09,477 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:09,477 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 19:15:09,477 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:09,478 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 19:15:09,478 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=265, Unknown=0, NotChecked=0, Total=306
[2020-11-24 19:15:09,478 INFO  L87              Difference]: Start difference. First operand 148 states and 150 transitions. cyclomatic complexity: 3 Second operand 18 states.
[2020-11-24 19:15:09,749 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:09,749 INFO  L93              Difference]: Finished difference Result 175 states and 178 transitions.
[2020-11-24 19:15:09,749 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 19:15:09,749 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 175 states and 178 transitions.
[2020-11-24 19:15:09,750 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:09,750 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 175 states to 148 states and 149 transitions.
[2020-11-24 19:15:09,750 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 125
[2020-11-24 19:15:09,751 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 125
[2020-11-24 19:15:09,751 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 148 states and 149 transitions.
[2020-11-24 19:15:09,751 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:09,751 INFO  L728         BuchiCegarLoop]: Abstraction has 148 states and 149 transitions.
[2020-11-24 19:15:09,751 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 148 states and 149 transitions.
[2020-11-24 19:15:09,752 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 148 to 148.
[2020-11-24 19:15:09,752 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 148 states.
[2020-11-24 19:15:09,753 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 148 states to 148 states and 149 transitions.
[2020-11-24 19:15:09,753 INFO  L751         BuchiCegarLoop]: Abstraction has 148 states and 149 transitions.
[2020-11-24 19:15:09,753 INFO  L631         BuchiCegarLoop]: Abstraction has 148 states and 149 transitions.
[2020-11-24 19:15:09,753 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 19:15:09,753 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 148 states and 149 transitions.
[2020-11-24 19:15:09,753 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:09,753 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:09,753 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:09,754 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:09,754 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_Hakka0 := false;
[L2]                 call_transfer_Hakka0 := false;
[L2]     CALL        call main();
[L1536]              assume null == 0;
[L1537]  CALL        call this := FreshRefGenerator__success();
[L680]               havoc newRef;
[L681]               assume Alloc[newRef] == false;
[L682]               Alloc[newRef] := true;
[L683]               assume newRef != null;
[L1537]  RET         call this := FreshRefGenerator__success();
[L1538]              assume now >= 0;
[L1539]              assume DType[this] == Hakka;
[L1540]              assume !revert && gas >= 0;
[L1541]  CALL        call CorralChoice_Hakka(this);
[L1435]              havoc msgsender_MSG;
[L1436]              havoc msgvalue_MSG;
[L1437]              havoc choice;
[L1438]              havoc __ret_0_owner;
[L1439]              havoc newOwner_s56;
[L1440]              havoc __ret_0_name;
[L1441]              havoc __ret_0_symbol;
[L1442]              havoc __ret_0_version;
[L1443]              havoc __ret_0_decimals;
[L1444]              havoc __ret_0_totalSupply;
[L1445]              havoc arg589_s0;
[L1446]              havoc __ret_0_balanceOf;
[L1447]              havoc arg590_s0;
[L1448]              havoc arg591_s0;
[L1449]              havoc __ret_0_allowance;
[L1450]              havoc arg592_s0;
[L1451]              havoc __ret_0_nonces;
[L1452]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1453]              havoc __ret_0_PERMIT_TYPEHASH;
[L1454]              havoc chainId__s193;
[L1455]              havoc to_s210;
[L1456]              havoc amount_s210;
[L1457]              havoc __ret_0_transfer;
[L1458]              havoc from_s295;
[L1459]              havoc to_s295;
[L1460]              havoc amount_s295;
[L1461]              havoc __ret_0_transferFrom;
[L1462]              havoc to_s331;
[L1463]              havoc amount_s331;
[L1464]              havoc from_s408;
[L1465]              havoc amount_s408;
[L1466]              havoc spender_s436;
[L1467]              havoc amount_s436;
[L1468]              havoc __ret_0_approve;
[L1469]              havoc spender_s479;
[L1470]              havoc amount_s479;
[L1471]              havoc data_s479;
[L1472]              havoc __ret_0_approveAndCall;
[L1473]              havoc holder_s586;
[L1474]              havoc spender_s586;
[L1475]              havoc nonce_s586;
[L1476]              havoc expiry_s586;
[L1477]              havoc allowed_s586;
[L1478]              havoc v_s586;
[L1479]              havoc r_s586;
[L1480]              havoc s_s586;
[L1481]              havoc tmpNow;
[L1482]              havoc gas;
[L1483]              assume gas > 4000000 && gas <= 8000000;
[L1484]              tmpNow := now;
[L1485]              havoc now;
[L1486]              assume now > tmpNow;
[L1487]              assume msgsender_MSG != null;
[L1488]  COND FALSE  !(choice == 6)
[L1494]  COND FALSE  !(choice == 5)
[L1500]  COND FALSE  !(choice == 4)
[L1506]  COND TRUE   choice == 3
[L1507]              gas := gas - 21000;
[L1508]  COND TRUE   gas >= 0
[L1509]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1510]              assume msgvalue_MSG == 0;
[L1511]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s210 && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_Hakka0 := true;
[L2]                 call_transfer_Hakka0 := false;
[L2]                 revert := revert_hold;
[L87]                havoc __exception;
[L88]                revert := false;
[L89]    COND FALSE  !(__exception)
[L116]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L736]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L788]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L789]   COND TRUE   from_s295 != msgsender_MSG && allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L790]   CALL        call __var_3 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L715]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L716]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L790]   RET         call __var_3 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L791]   COND FALSE  !(revert)
[L794]               sum_allowance1[from_s295] := sum_allowance1[from_s295] - allowance_Hakka[this][from_s295][msgsender_MSG];
[L795]               allowance_Hakka[this][from_s295][msgsender_MSG] := __var_3;
[L796]               sum_allowance1[from_s295] := sum_allowance1[from_s295] + allowance_Hakka[this][from_s295][msgsender_MSG];
[L798]   COND FALSE  !(!(balanceOf_Hakka[this][from_s295] >= amount_s295))
[L802]   CALL        call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L715]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L716]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L802]   RET         call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L803]   COND FALSE  !(revert)
[L806]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][from_s295];
[L807]               balanceOf_Hakka[this][from_s295] := __var_4;
[L808]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][from_s295];
[L809]   CALL        call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L697]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L698]   COND FALSE  !(!((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136))
[L809]   RET         call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L810]   COND FALSE  !(revert)
[L813]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][to_s295];
[L814]               balanceOf_Hakka[this][to_s295] := __var_5;
[L815]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][to_s295];
[L816]               assert { :EventEmitted "Transfer_Hakka" } true;
[L817]               __ret_0_ := true;
[L736]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L737]   COND FALSE  !(revert)
[L740]               __ret_0_ := __var_1;
[L116]   RET         call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L117]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((__ret_0_ == true && totalSupply_Hakka[this] == old(totalSupply_Hakka[this])) && balanceOf_Hakka[this] == old(balanceOf_Hakka[this])) && allowance_Hakka[this] == old(allowance_Hakka[this])) && nonces_Hakka[this] == old(nonces_Hakka[this])) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L1511]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1541]  RET         call CorralChoice_Hakka(this);

Loop:
[L1541]        assume true;

[2020-11-24 19:15:09,755 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:09,756 INFO  L82        PathProgramCache]: Analyzing trace with hash 86704071, now seen corresponding path program 1 times
[2020-11-24 19:15:09,756 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:09,761 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:09,775 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 19:15:09,775 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:09,775 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 19:15:09,775 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:09,775 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 19:15:09,775 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 19:15:09,776 INFO  L87              Difference]: Start difference. First operand 148 states and 149 transitions. cyclomatic complexity: 2 Second operand 3 states.
[2020-11-24 19:15:09,778 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:09,778 INFO  L93              Difference]: Finished difference Result 130 states and 130 transitions.
[2020-11-24 19:15:09,778 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 19:15:09,778 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 130 states and 130 transitions.
[2020-11-24 19:15:09,778 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 19:15:09,778 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 130 states to 0 states and 0 transitions.
[2020-11-24 19:15:09,779 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 19:15:09,779 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 19:15:09,779 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 19:15:09,779 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:09,779 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 19:15:09,779 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 19:15:09,779 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 19:15:09,779 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 19:15:09,779 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 19:15:09,779 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 19:15:09,779 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 19:15:09,782 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 07:15:09 BasicIcfg
[2020-11-24 19:15:09,782 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 19:15:09,782 INFO  L168              Benchmark]: Toolchain (without parser) took 3691.56 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 256.9 MB). Free memory was 940.6 MB in the beginning and 902.9 MB in the end (delta: 37.7 MB). Peak memory consumption was 294.6 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,783 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,784 INFO  L168              Benchmark]: Boogie Preprocessor took 66.78 ms. Allocated memory is still 1.0 GB. Free memory is still 940.6 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,784 INFO  L168              Benchmark]: UtopiaSpecLang took 54.87 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,784 INFO  L168              Benchmark]: Boogie Printer took 9.40 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,784 INFO  L168              Benchmark]: RCFGBuilder took 495.80 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 892.2 MB in the end (delta: 37.6 MB). Peak memory consumption was 37.6 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,784 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.95 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 888.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,785 INFO  L168              Benchmark]: BÃ¼chi Program Product took 804.49 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 888.7 MB in the beginning and 1.0 GB in the end (delta: -126.6 MB). Peak memory consumption was 170.2 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,785 INFO  L168              Benchmark]: BlockEncodingV2 took 71.61 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 982.8 MB in the end (delta: 32.5 MB). Peak memory consumption was 32.5 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,785 INFO  L168              Benchmark]: BuchiAutomizer took 2146.64 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 200.3 MB). Free memory was 982.8 MB in the beginning and 902.9 MB in the end (delta: 79.9 MB). Peak memory consumption was 280.2 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:09,788 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1200 locations, 1992 edges
  - StatisticsResult: Encoded RCFG
    1180 locations, 1946 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 66.78 ms. Allocated memory is still 1.0 GB. Free memory is still 940.6 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 54.87 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 9.40 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 495.80 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 892.2 MB in the end (delta: 37.6 MB). Peak memory consumption was 37.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.95 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 888.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 804.49 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 888.7 MB in the beginning and 1.0 GB in the end (delta: -126.6 MB). Peak memory consumption was 170.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 71.61 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 982.8 MB in the end (delta: 32.5 MB). Peak memory consumption was 32.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2146.64 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 200.3 MB). Free memory was 982.8 MB in the beginning and 902.9 MB in the end (delta: 79.9 MB). Peak memory consumption was 280.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    523 locations, 622 edges
  - StatisticsResult: BuchiProgram size
    1200 locations, 1992 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.1s and 11 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.8s. Construction of modules took 0.5s. BÃ¼chi inclusion checks took 0.4s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.0s AutomataMinimizationTime, 9 MinimizatonAttempts, 46 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 234 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 2482 SDtfs, 1749 SDslu, 5551 SDs, 0 SdLazy, 1934 SolverSat, 551 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_Hakka0) ==> ( <>(success_transfer_Hakka0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
