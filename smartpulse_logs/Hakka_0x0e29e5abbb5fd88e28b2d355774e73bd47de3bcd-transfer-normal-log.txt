This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 19:15:00,627 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 19:15:00,628 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 19:15:00,640 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 19:15:00,640 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 19:15:00,640 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 19:15:00,642 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 19:15:00,643 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 19:15:00,645 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 19:15:00,645 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 19:15:00,646 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 19:15:00,646 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 19:15:00,647 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 19:15:00,648 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 19:15:00,649 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 19:15:00,649 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 19:15:00,650 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 19:15:00,651 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 19:15:00,652 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 19:15:00,654 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 19:15:00,655 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 19:15:00,655 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 19:15:00,657 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 19:15:00,657 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 19:15:00,658 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 19:15:00,658 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 19:15:00,658 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 19:15:00,659 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 19:15:00,659 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 19:15:00,659 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 19:15:00,660 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 19:15:00,661 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 19:15:00,661 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 19:15:00,662 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 19:15:00,662 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 19:15:00,662 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 19:15:00,663 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 19:15:00,663 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 19:15:00,663 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 19:15:00,664 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 19:15:00,664 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 19:15:00,665 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 19:15:00,673 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 19:15:00,673 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 19:15:00,674 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 19:15:00,674 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 19:15:00,674 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 19:15:00,674 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 19:15:00,674 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 19:15:00,674 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 19:15:00,674 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 19:15:00,675 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 19:15:00,675 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 19:15:00,675 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 19:15:00,675 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 19:15:00,675 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 19:15:00,675 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 19:15:00,675 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 19:15:00,675 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 19:15:00,675 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 19:15:00,676 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 19:15:00,676 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 19:15:00,676 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 19:15:00,676 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 19:15:00,676 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 19:15:00,676 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 19:15:00,676 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 19:15:00,676 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 19:15:00,702 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 19:15:00,716 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 19:15:00,719 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 19:15:00,720 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 19:15:00,720 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 19:15:00,721 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl
[2020-11-24 19:15:00,721 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl'
[2020-11-24 19:15:00,775 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 19:15:00,776 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 19:15:00,776 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 19:15:00,776 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 19:15:00,776 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 19:15:00,792 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,793 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,811 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,811 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,824 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,830 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,834 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,839 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 19:15:00,839 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 19:15:00,840 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 19:15:00,842 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 19:15:00,846 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/1) ...
[2020-11-24 19:15:00,859 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Hakka.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_Hakka[this][msg.sender] && balanceOf_Hakka[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && balanceOf_Hakka[this][msg.sender] == old(balanceOf_Hakka[this][msg.sender]) - value && balanceOf_Hakka[this][to] == old(balanceOf_Hakka[this][to]) + value && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && balanceOf_Hakka[this][p1] == old(balanceOf_Hakka[this][p1]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:00,864 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Hakka.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_Hakka[this][msg.sender] && balanceOf_Hakka[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && balanceOf_Hakka[this][msg.sender] == old(balanceOf_Hakka[this][msg.sender]) - value && balanceOf_Hakka[this][to] == old(balanceOf_Hakka[this][to]) + value && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && balanceOf_Hakka[this][p1] == old(balanceOf_Hakka[this][p1]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:00,872 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Hakka.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_Hakka[this][msg.sender] && balanceOf_Hakka[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && balanceOf_Hakka[this][msg.sender] == old(balanceOf_Hakka[this][msg.sender]) - value && balanceOf_Hakka[this][to] == old(balanceOf_Hakka[this][to]) + value && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && balanceOf_Hakka[this][p1] == old(balanceOf_Hakka[this][p1]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:00,876 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s210 ) && msg.sender!=to_s210 ) && amount_s210<=balanceOf_Hakka[this][msg.sender] ) && ( balanceOf_Hakka[this][to_s210] + amount_s210 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && amount_s210>=0 ) && amount_s210<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_Hakka[this][to_s210]>=0 ) && balanceOf_Hakka[this][to_s210]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_Hakka[this][msg.sender]>=0 ) && balanceOf_Hakka[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 19:15:00,879 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && balanceOf_Hakka[this][msg.sender]==( ( old(balanceOf_Hakka[this][msg.sender]) ) - amount_s210 ) ) && balanceOf_Hakka[this][to_s210]==( ( old(balanceOf_Hakka[this][to_s210]) ) + amount_s210 ) ) && totalSupply_Hakka[this]==( old(totalSupply_Hakka[this]) ) ) && allowance_Hakka[this]==( old(allowance_Hakka[this]) ) ) && balanceOf_Hakka[this][p1]==( old(balanceOf_Hakka[this][p1]) ) ) && nonces_Hakka[this]==( old(nonces_Hakka[this]) ) ) && DOMAIN_SEPARATOR_Hakka[this]==( old(DOMAIN_SEPARATOR_Hakka[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_Hakka>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]],IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[to_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]],IdentifierExpression[amount_s210,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowance_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowance_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[nonces_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[nonces_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[DOMAIN_SEPARATOR_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[DOMAIN_SEPARATOR_Hakka,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Hakka>]]]]]]
[2020-11-24 19:15:00,882 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Hakka.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balanceOf_Hakka[this][msg.sender] && balanceOf_Hakka[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][to] >= 0 && balanceOf_Hakka[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_Hakka[this][msg.sender] >= 0 &&  balanceOf_Hakka[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Hakka.transfer(to, value), return == true && balanceOf_Hakka[this][msg.sender] == old(balanceOf_Hakka[this][msg.sender]) - value && balanceOf_Hakka[this][to] == old(balanceOf_Hakka[this][to]) + value && totalSupply_Hakka[this] == old(totalSupply_Hakka[this]) && allowance_Hakka[this] == old(allowance_Hakka[this]) && balanceOf_Hakka[this][p1] == old(balanceOf_Hakka[this][p1]) && nonces_Hakka[this] == old(nonces_Hakka[this]) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-24 19:15:00,883 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_Hakka0) ==> ( <>AP(success_transfer_Hakka0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 19:15:00,889 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:00 PropertyContainer
[2020-11-24 19:15:00,889 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 19:15:00,889 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 19:15:00,889 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 19:15:00,890 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 19:15:00,891 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/2) ...
[2020-11-24 19:15:00,891 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 19:15:00,891 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 19:15:00,901 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:00" (2/2) ...
[2020-11-24 19:15:00,901 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 19:15:00,901 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 19:15:00,902 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 19:15:00,902 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 19:15:00,902 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/2) ...
[2020-11-24 19:15:00,952 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 19:15:00,952 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_Hakka__success
[2020-11-24 19:15:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_Hakka__success
[2020-11-24 19:15:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Hakka
[2020-11-24 19:15:00,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Hakka
[2020-11-24 19:15:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Hakka
[2020-11-24 19:15:00,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Hakka
[2020-11-24 19:15:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Hakka
[2020-11-24 19:15:00,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Hakka
[2020-11-24 19:15:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Hakka
[2020-11-24 19:15:00,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Hakka
[2020-11-24 19:15:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Hakka
[2020-11-24 19:15:00,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Hakka
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Hakka
[2020-11-24 19:15:00,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Hakka
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 19:15:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Hakka
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_Hakka__fail
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_Hakka__fail
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Hakka__success
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Hakka__fail
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Hakka__success
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Hakka__fail
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Hakka__success
[2020-11-24 19:15:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Hakka__fail
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Hakka__success
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Hakka__fail
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Hakka__success
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Hakka__fail
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Hakka__success
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Hakka__fail
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 19:15:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 19:15:00,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 19:15:00,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 19:15:00,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_Hakka__fail
[2020-11-24 19:15:00,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_Hakka__success
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_Hakka__fail
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_Hakka__success
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Hakka__fail
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Hakka__success
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Hakka__fail
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Hakka__success
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Hakka__fail
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Hakka__success
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Hakka__fail
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Hakka__success
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Hakka__fail
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Hakka__success
[2020-11-24 19:15:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Hakka__fail
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Hakka__success
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 19:15:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Hakka
[2020-11-24 19:15:00,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 19:15:00,959 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 19:15:00,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 19:15:01,116 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 19:15:01,240 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 19:15:01,241 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 19:15:01,241 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 19:15:01,340 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 19:15:01,340 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-24 19:15:01,342 INFO  L202        PluginConnector]: Adding new model Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:01 BoogieIcfgContainer
[2020-11-24 19:15:01,342 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:00" (2/2) ...
[2020-11-24 19:15:01,342 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 19:15:01,343 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@444dc793 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:01, skipping insertion in model container
[2020-11-24 19:15:01,343 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 19:15:01,343 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 19:15:01,343 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 19:15:01,344 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 19:15:01,345 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/3) ...
[2020-11-24 19:15:01,345 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@20e126f5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:01, skipping insertion in model container
[2020-11-24 19:15:01,345 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:00" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 19:15:01,387 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:01 NWAContainer
[2020-11-24 19:15:01,388 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 19:15:01,388 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 19:15:01,388 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 19:15:01,389 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 19:15:01,389 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:01" (3/4) ...
[2020-11-24 19:15:01,390 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3dc8c596 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:01, skipping insertion in model container
[2020-11-24 19:15:01,390 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:01" (4/4) ...
[2020-11-24 19:15:01,393 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 19:15:01,396 INFO  L110   BuchiProductObserver]: Initial RCFG 524 locations, 623 edges
[2020-11-24 19:15:01,396 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 19:15:01,406 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 19:15:02,208 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 19:15:02,211 INFO  L110   BuchiProductObserver]: BuchiProgram size 1202 locations, 1995 edges
[2020-11-24 19:15:02,211 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:02 BoogieIcfgContainer
[2020-11-24 19:15:02,211 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 19:15:02,211 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 19:15:02,211 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 19:15:02,213 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 19:15:02,214 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:02" (1/1) ...
[2020-11-24 19:15:02,259 INFO  L313           BlockEncoder]: Initial Icfg 1202 locations, 1995 edges
[2020-11-24 19:15:02,260 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 19:15:02,260 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 19:15:02,260 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 19:15:02,261 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 19:15:02,268 INFO  L70    emoveInfeasibleEdges]: Removed 30 edges and 9 locations because of local infeasibility
[2020-11-24 19:15:02,272 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-24 19:15:02,277 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 19:15:02,279 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 19:15:02,281 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 19:15:02,282 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 19:15:02,287 INFO  L313           BlockEncoder]: Encoded RCFG 1182 locations, 1949 edges
[2020-11-24 19:15:02,288 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 07:15:02 BasicIcfg
[2020-11-24 19:15:02,288 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 19:15:02,289 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 19:15:02,290 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 19:15:02,293 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 19:15:02,294 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:02,294 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 07:15:00" (1/6) ...
[2020-11-24 19:15:02,295 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@638754dd and model type Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 07:15:02, skipping insertion in model container
[2020-11-24 19:15:02,295 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:02,295 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 07:15:00" (2/6) ...
[2020-11-24 19:15:02,296 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@638754dd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 07:15:02, skipping insertion in model container
[2020-11-24 19:15:02,296 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:02,296 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 07:15:01" (3/6) ...
[2020-11-24 19:15:02,296 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@638754dd and model type Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 07:15:02, skipping insertion in model container
[2020-11-24 19:15:02,296 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:02,296 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 07:15:01" (4/6) ...
[2020-11-24 19:15:02,297 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@638754dd and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 07:15:02, skipping insertion in model container
[2020-11-24 19:15:02,297 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:02,297 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 07:15:02" (5/6) ...
[2020-11-24 19:15:02,297 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@638754dd and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 07:15:02, skipping insertion in model container
[2020-11-24 19:15:02,297 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 19:15:02,297 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 07:15:02" (6/6) ...
[2020-11-24 19:15:02,299 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Hakka_0x0e29e5abbb5fd88e28b2d355774e73bd47de3bcd_transfer-normal.bpl_BEv2
[2020-11-24 19:15:02,336 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 19:15:02,337 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 19:15:02,337 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 19:15:02,337 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 19:15:02,337 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 19:15:02,337 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 19:15:02,337 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 19:15:02,337 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 19:15:02,337 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 19:15:02,354 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1182 states.
[2020-11-24 19:15:02,392 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:02,393 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:02,393 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:02,402 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:02,402 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
[2020-11-24 19:15:02,402 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 19:15:02,402 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1182 states.
[2020-11-24 19:15:02,412 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:02,412 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:02,412 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:02,414 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:02,414 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND TRUE   choice == 6
[L1490]              gas := gas - 21000;
[L1491]  COND FALSE  !(gas >= 0)
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:02,431 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:02,431 INFO  L82        PathProgramCache]: Analyzing trace with hash -249047851, now seen corresponding path program 1 times
[2020-11-24 19:15:02,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:02,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:02,516 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:02,518 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:02,518 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 19:15:02,522 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:02,534 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 19:15:02,535 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 19:15:02,536 INFO  L87              Difference]: Start difference. First operand 1182 states. Second operand 5 states.
[2020-11-24 19:15:02,769 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:02,770 INFO  L93              Difference]: Finished difference Result 609 states and 669 transitions.
[2020-11-24 19:15:02,770 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 19:15:02,771 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 609 states and 669 transitions.
[2020-11-24 19:15:02,776 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:02,782 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 609 states to 224 states and 243 transitions.
[2020-11-24 19:15:02,783 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 19:15:02,784 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 156
[2020-11-24 19:15:02,784 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 224 states and 243 transitions.
[2020-11-24 19:15:02,787 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:02,787 INFO  L728         BuchiCegarLoop]: Abstraction has 224 states and 243 transitions.
[2020-11-24 19:15:02,801 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 224 states and 243 transitions.
[2020-11-24 19:15:02,816 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 224 to 224.
[2020-11-24 19:15:02,817 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 224 states.
[2020-11-24 19:15:02,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 224 states to 224 states and 243 transitions.
[2020-11-24 19:15:02,819 INFO  L751         BuchiCegarLoop]: Abstraction has 224 states and 243 transitions.
[2020-11-24 19:15:02,819 INFO  L631         BuchiCegarLoop]: Abstraction has 224 states and 243 transitions.
[2020-11-24 19:15:02,819 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 19:15:02,819 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 224 states and 243 transitions.
[2020-11-24 19:15:02,820 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:02,821 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:02,821 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:02,822 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:02,822 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND FALSE  !(__exception)
[L117]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L737]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L789]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L790]   COND FALSE  !(from_s295 != msgsender_MSG && allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L799]   COND TRUE   !(balanceOf_Hakka[this][from_s295] >= amount_s295)
[L800]               revert := true;
[L737]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L738]   COND TRUE   revert
[L117]   RET         call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L118]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_Hakka[this][msgsender_MSG] == old(balanceOf_Hakka[this][msgsender_MSG]) - amount_s210) && balanceOf_Hakka[this][to_s210] == old(balanceOf_Hakka[this][to_s210]) + amount_s210) && totalSupply_Hakka[this] == old(totalSupply_Hakka[this])) && allowance_Hakka[this] == old(allowance_Hakka[this])) && balanceOf_Hakka[this][p1] == old(balanceOf_Hakka[this][p1])) && nonces_Hakka[this] == old(nonces_Hakka[this])) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:02,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:02,825 INFO  L82        PathProgramCache]: Analyzing trace with hash -1675728575, now seen corresponding path program 1 times
[2020-11-24 19:15:02,826 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:02,839 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:02,857 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:02,857 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:02,857 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 19:15:02,859 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:02,859 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 19:15:02,859 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 19:15:02,859 INFO  L87              Difference]: Start difference. First operand 224 states and 243 transitions. cyclomatic complexity: 20 Second operand 3 states.
[2020-11-24 19:15:02,868 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:02,868 INFO  L93              Difference]: Finished difference Result 267 states and 287 transitions.
[2020-11-24 19:15:02,868 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 19:15:02,869 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 267 states and 287 transitions.
[2020-11-24 19:15:02,871 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:02,873 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 267 states to 246 states and 259 transitions.
[2020-11-24 19:15:02,873 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 175
[2020-11-24 19:15:02,873 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 180
[2020-11-24 19:15:02,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 246 states and 259 transitions.
[2020-11-24 19:15:02,875 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:02,875 INFO  L728         BuchiCegarLoop]: Abstraction has 246 states and 259 transitions.
[2020-11-24 19:15:02,875 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 246 states and 259 transitions.
[2020-11-24 19:15:02,881 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 246 to 235.
[2020-11-24 19:15:02,881 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 235 states.
[2020-11-24 19:15:02,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 235 states to 235 states and 248 transitions.
[2020-11-24 19:15:02,882 INFO  L751         BuchiCegarLoop]: Abstraction has 235 states and 248 transitions.
[2020-11-24 19:15:02,882 INFO  L631         BuchiCegarLoop]: Abstraction has 235 states and 248 transitions.
[2020-11-24 19:15:02,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 19:15:02,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 235 states and 248 transitions.
[2020-11-24 19:15:02,883 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:02,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:02,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:02,885 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:02,885 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND TRUE   __exception
[L91]                __tmp__Balance := Balance;
[L92]                __tmp__DType := DType;
[L93]                __tmp__Alloc := Alloc;
[L94]                __tmp__balance_ADDR := balance_ADDR;
[L95]                __tmp__M_Ref_int := M_Ref_int;
[L96]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L97]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L98]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L99]                __tmp__sum_allowance1 := sum_allowance1;
[L100]               __tmp__sum_nonces2 := sum_nonces2;
[L101]               __tmp__Length := Length;
[L102]               __tmp__now := now;
[L103]               __tmp__owner_Ownable := owner_Ownable;
[L104]               __tmp__name_Hakka := name_Hakka;
[L105]               __tmp__symbol_Hakka := symbol_Hakka;
[L106]               __tmp__version_Hakka := version_Hakka;
[L107]               __tmp__decimals_Hakka := decimals_Hakka;
[L108]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L109]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L110]               __tmp__allowance_Hakka := allowance_Hakka;
[L111]               __tmp__nonces_Hakka := nonces_Hakka;
[L112]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L113]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L114]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L726]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L751]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L752]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L761]   COND TRUE   !(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295)
[L762]               revert := true;
[L726]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L727]   COND TRUE   revert
[L114]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L115]               assume revert || gas < 0;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:02,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:02,887 INFO  L82        PathProgramCache]: Analyzing trace with hash -1996365521, now seen corresponding path program 1 times
[2020-11-24 19:15:02,888 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:02,900 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:02,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:02,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:02,960 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 19:15:02,960 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:02,960 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 19:15:02,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 19:15:02,961 INFO  L87              Difference]: Start difference. First operand 235 states and 248 transitions. cyclomatic complexity: 14 Second operand 7 states.
[2020-11-24 19:15:03,073 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:03,073 INFO  L93              Difference]: Finished difference Result 258 states and 270 transitions.
[2020-11-24 19:15:03,074 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 19:15:03,074 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 258 states and 270 transitions.
[2020-11-24 19:15:03,076 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:03,077 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 258 states to 251 states and 263 transitions.
[2020-11-24 19:15:03,077 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 185
[2020-11-24 19:15:03,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 185
[2020-11-24 19:15:03,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 251 states and 263 transitions.
[2020-11-24 19:15:03,078 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:03,078 INFO  L728         BuchiCegarLoop]: Abstraction has 251 states and 263 transitions.
[2020-11-24 19:15:03,079 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 251 states and 263 transitions.
[2020-11-24 19:15:03,082 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 251 to 234.
[2020-11-24 19:15:03,082 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 234 states.
[2020-11-24 19:15:03,083 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 234 states to 234 states and 246 transitions.
[2020-11-24 19:15:03,083 INFO  L751         BuchiCegarLoop]: Abstraction has 234 states and 246 transitions.
[2020-11-24 19:15:03,083 INFO  L631         BuchiCegarLoop]: Abstraction has 234 states and 246 transitions.
[2020-11-24 19:15:03,083 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 19:15:03,083 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 234 states and 246 transitions.
[2020-11-24 19:15:03,084 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,085 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:03,085 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:03,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:03,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND TRUE   __exception
[L91]                __tmp__Balance := Balance;
[L92]                __tmp__DType := DType;
[L93]                __tmp__Alloc := Alloc;
[L94]                __tmp__balance_ADDR := balance_ADDR;
[L95]                __tmp__M_Ref_int := M_Ref_int;
[L96]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L97]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L98]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L99]                __tmp__sum_allowance1 := sum_allowance1;
[L100]               __tmp__sum_nonces2 := sum_nonces2;
[L101]               __tmp__Length := Length;
[L102]               __tmp__now := now;
[L103]               __tmp__owner_Ownable := owner_Ownable;
[L104]               __tmp__name_Hakka := name_Hakka;
[L105]               __tmp__symbol_Hakka := symbol_Hakka;
[L106]               __tmp__version_Hakka := version_Hakka;
[L107]               __tmp__decimals_Hakka := decimals_Hakka;
[L108]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L109]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L110]               __tmp__allowance_Hakka := allowance_Hakka;
[L111]               __tmp__nonces_Hakka := nonces_Hakka;
[L112]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L113]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L114]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L726]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L751]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L752]   COND TRUE   from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L753]   CALL        call __var_3 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L707]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L708]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L753]   RET         call __var_3 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L754]   COND TRUE   revert
[L726]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L727]   COND TRUE   revert
[L114]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L115]               assume revert || gas < 0;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:03,088 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:03,088 INFO  L82        PathProgramCache]: Analyzing trace with hash 1646438938, now seen corresponding path program 1 times
[2020-11-24 19:15:03,089 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:03,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:03,119 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:03,119 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:03,119 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 19:15:03,120 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:03,120 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 19:15:03,120 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 19:15:03,120 INFO  L87              Difference]: Start difference. First operand 234 states and 246 transitions. cyclomatic complexity: 13 Second operand 3 states.
[2020-11-24 19:15:03,126 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:03,127 INFO  L93              Difference]: Finished difference Result 256 states and 272 transitions.
[2020-11-24 19:15:03,127 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 19:15:03,127 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 256 states and 272 transitions.
[2020-11-24 19:15:03,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,130 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 256 states to 225 states and 233 transitions.
[2020-11-24 19:15:03,130 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 166
[2020-11-24 19:15:03,130 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 202
[2020-11-24 19:15:03,130 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 225 states and 233 transitions.
[2020-11-24 19:15:03,130 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:03,131 INFO  L728         BuchiCegarLoop]: Abstraction has 225 states and 233 transitions.
[2020-11-24 19:15:03,131 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 225 states and 233 transitions.
[2020-11-24 19:15:03,133 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 225 to 225.
[2020-11-24 19:15:03,133 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 225 states.
[2020-11-24 19:15:03,134 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 225 states to 225 states and 233 transitions.
[2020-11-24 19:15:03,134 INFO  L751         BuchiCegarLoop]: Abstraction has 225 states and 233 transitions.
[2020-11-24 19:15:03,134 INFO  L631         BuchiCegarLoop]: Abstraction has 225 states and 233 transitions.
[2020-11-24 19:15:03,134 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 19:15:03,134 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 225 states and 233 transitions.
[2020-11-24 19:15:03,135 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:03,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:03,136 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:03,136 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND TRUE   __exception
[L91]                __tmp__Balance := Balance;
[L92]                __tmp__DType := DType;
[L93]                __tmp__Alloc := Alloc;
[L94]                __tmp__balance_ADDR := balance_ADDR;
[L95]                __tmp__M_Ref_int := M_Ref_int;
[L96]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L97]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L98]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L99]                __tmp__sum_allowance1 := sum_allowance1;
[L100]               __tmp__sum_nonces2 := sum_nonces2;
[L101]               __tmp__Length := Length;
[L102]               __tmp__now := now;
[L103]               __tmp__owner_Ownable := owner_Ownable;
[L104]               __tmp__name_Hakka := name_Hakka;
[L105]               __tmp__symbol_Hakka := symbol_Hakka;
[L106]               __tmp__version_Hakka := version_Hakka;
[L107]               __tmp__decimals_Hakka := decimals_Hakka;
[L108]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L109]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L110]               __tmp__allowance_Hakka := allowance_Hakka;
[L111]               __tmp__nonces_Hakka := nonces_Hakka;
[L112]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L113]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L114]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L726]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L751]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L752]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L761]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L765]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L707]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L708]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L765]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L766]   COND TRUE   revert
[L726]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L727]   COND TRUE   revert
[L114]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L115]               assume revert || gas < 0;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:03,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:03,139 INFO  L82        PathProgramCache]: Analyzing trace with hash -50091951, now seen corresponding path program 1 times
[2020-11-24 19:15:03,139 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:03,148 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:03,173 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:03,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:03,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 19:15:03,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:03,174 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 19:15:03,174 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 19:15:03,174 INFO  L87              Difference]: Start difference. First operand 225 states and 233 transitions. cyclomatic complexity: 9 Second operand 5 states.
[2020-11-24 19:15:03,186 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:03,186 INFO  L93              Difference]: Finished difference Result 236 states and 241 transitions.
[2020-11-24 19:15:03,186 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 19:15:03,186 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 236 states and 241 transitions.
[2020-11-24 19:15:03,188 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:03,189 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 236 states to 236 states and 241 transitions.
[2020-11-24 19:15:03,189 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 213
[2020-11-24 19:15:03,189 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 213
[2020-11-24 19:15:03,189 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 236 states and 241 transitions.
[2020-11-24 19:15:03,189 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:03,190 INFO  L728         BuchiCegarLoop]: Abstraction has 236 states and 241 transitions.
[2020-11-24 19:15:03,190 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 236 states and 241 transitions.
[2020-11-24 19:15:03,192 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 236 to 225.
[2020-11-24 19:15:03,192 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 225 states.
[2020-11-24 19:15:03,193 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 225 states to 225 states and 230 transitions.
[2020-11-24 19:15:03,193 INFO  L751         BuchiCegarLoop]: Abstraction has 225 states and 230 transitions.
[2020-11-24 19:15:03,193 INFO  L631         BuchiCegarLoop]: Abstraction has 225 states and 230 transitions.
[2020-11-24 19:15:03,193 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 19:15:03,193 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 225 states and 230 transitions.
[2020-11-24 19:15:03,194 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,194 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:03,194 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:03,195 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:03,195 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND TRUE   __exception
[L91]                __tmp__Balance := Balance;
[L92]                __tmp__DType := DType;
[L93]                __tmp__Alloc := Alloc;
[L94]                __tmp__balance_ADDR := balance_ADDR;
[L95]                __tmp__M_Ref_int := M_Ref_int;
[L96]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L97]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L98]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L99]                __tmp__sum_allowance1 := sum_allowance1;
[L100]               __tmp__sum_nonces2 := sum_nonces2;
[L101]               __tmp__Length := Length;
[L102]               __tmp__now := now;
[L103]               __tmp__owner_Ownable := owner_Ownable;
[L104]               __tmp__name_Hakka := name_Hakka;
[L105]               __tmp__symbol_Hakka := symbol_Hakka;
[L106]               __tmp__version_Hakka := version_Hakka;
[L107]               __tmp__decimals_Hakka := decimals_Hakka;
[L108]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L109]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L110]               __tmp__allowance_Hakka := allowance_Hakka;
[L111]               __tmp__nonces_Hakka := nonces_Hakka;
[L112]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L113]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L114]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L726]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L751]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L752]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L761]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L765]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L707]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L708]   COND TRUE   !((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157)
[L709]               revert := true;
[L765]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L766]   COND TRUE   revert
[L726]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L727]   COND TRUE   revert
[L114]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L115]               assume revert || gas < 0;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:03,197 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:03,197 INFO  L82        PathProgramCache]: Analyzing trace with hash 689160378, now seen corresponding path program 1 times
[2020-11-24 19:15:03,198 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:03,210 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:03,256 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:03,256 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:03,256 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 19:15:03,257 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:03,257 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 19:15:03,257 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 19:15:03,257 INFO  L87              Difference]: Start difference. First operand 225 states and 230 transitions. cyclomatic complexity: 6 Second operand 7 states.
[2020-11-24 19:15:03,284 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:03,284 INFO  L93              Difference]: Finished difference Result 231 states and 235 transitions.
[2020-11-24 19:15:03,285 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 19:15:03,285 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 231 states and 235 transitions.
[2020-11-24 19:15:03,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,288 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 231 states to 220 states and 224 transitions.
[2020-11-24 19:15:03,288 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 197
[2020-11-24 19:15:03,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 197
[2020-11-24 19:15:03,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 220 states and 224 transitions.
[2020-11-24 19:15:03,288 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:03,288 INFO  L728         BuchiCegarLoop]: Abstraction has 220 states and 224 transitions.
[2020-11-24 19:15:03,289 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 220 states and 224 transitions.
[2020-11-24 19:15:03,291 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 220 to 220.
[2020-11-24 19:15:03,292 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 220 states.
[2020-11-24 19:15:03,292 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 220 states to 220 states and 224 transitions.
[2020-11-24 19:15:03,292 INFO  L751         BuchiCegarLoop]: Abstraction has 220 states and 224 transitions.
[2020-11-24 19:15:03,292 INFO  L631         BuchiCegarLoop]: Abstraction has 220 states and 224 transitions.
[2020-11-24 19:15:03,293 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 19:15:03,293 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 220 states and 224 transitions.
[2020-11-24 19:15:03,294 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:03,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:03,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:03,295 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND TRUE   __exception
[L91]                __tmp__Balance := Balance;
[L92]                __tmp__DType := DType;
[L93]                __tmp__Alloc := Alloc;
[L94]                __tmp__balance_ADDR := balance_ADDR;
[L95]                __tmp__M_Ref_int := M_Ref_int;
[L96]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L97]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L98]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L99]                __tmp__sum_allowance1 := sum_allowance1;
[L100]               __tmp__sum_nonces2 := sum_nonces2;
[L101]               __tmp__Length := Length;
[L102]               __tmp__now := now;
[L103]               __tmp__owner_Ownable := owner_Ownable;
[L104]               __tmp__name_Hakka := name_Hakka;
[L105]               __tmp__symbol_Hakka := symbol_Hakka;
[L106]               __tmp__version_Hakka := version_Hakka;
[L107]               __tmp__decimals_Hakka := decimals_Hakka;
[L108]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L109]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L110]               __tmp__allowance_Hakka := allowance_Hakka;
[L111]               __tmp__nonces_Hakka := nonces_Hakka;
[L112]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L113]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L114]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L726]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L751]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L752]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L761]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L765]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L707]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L708]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L765]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L766]   COND FALSE  !(revert)
[L769]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_Hakka[this][from_s295];
[L770]               __tmp__balanceOf_Hakka[this][from_s295] := __var_4;
[L771]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_Hakka[this][from_s295];
[L772]   CALL        call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L689]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L690]   COND TRUE   !((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136)
[L691]               revert := true;
[L772]   RET         call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L773]   COND TRUE   revert
[L726]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L727]   COND TRUE   revert
[L114]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L115]               assume revert || gas < 0;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:03,298 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:03,298 INFO  L82        PathProgramCache]: Analyzing trace with hash 714599935, now seen corresponding path program 1 times
[2020-11-24 19:15:03,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:03,312 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:03,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:03,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:03,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 19:15:03,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:03,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 19:15:03,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-24 19:15:03,421 INFO  L87              Difference]: Start difference. First operand 220 states and 224 transitions. cyclomatic complexity: 5 Second operand 9 states.
[2020-11-24 19:15:03,573 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:03,573 INFO  L93              Difference]: Finished difference Result 229 states and 232 transitions.
[2020-11-24 19:15:03,574 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 19:15:03,574 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 229 states and 232 transitions.
[2020-11-24 19:15:03,575 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 19:15:03,577 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 229 states to 218 states and 221 transitions.
[2020-11-24 19:15:03,577 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 195
[2020-11-24 19:15:03,577 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 195
[2020-11-24 19:15:03,577 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 218 states and 221 transitions.
[2020-11-24 19:15:03,578 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:03,578 INFO  L728         BuchiCegarLoop]: Abstraction has 218 states and 221 transitions.
[2020-11-24 19:15:03,578 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 218 states and 221 transitions.
[2020-11-24 19:15:03,580 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 218 to 211.
[2020-11-24 19:15:03,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 211 states.
[2020-11-24 19:15:03,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 211 states to 211 states and 214 transitions.
[2020-11-24 19:15:03,582 INFO  L751         BuchiCegarLoop]: Abstraction has 211 states and 214 transitions.
[2020-11-24 19:15:03,582 INFO  L631         BuchiCegarLoop]: Abstraction has 211 states and 214 transitions.
[2020-11-24 19:15:03,582 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 19:15:03,582 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 211 states and 214 transitions.
[2020-11-24 19:15:03,583 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:03,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:03,584 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:03,584 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND TRUE   __exception
[L91]                __tmp__Balance := Balance;
[L92]                __tmp__DType := DType;
[L93]                __tmp__Alloc := Alloc;
[L94]                __tmp__balance_ADDR := balance_ADDR;
[L95]                __tmp__M_Ref_int := M_Ref_int;
[L96]                __tmp__sum_balanceOf0 := sum_balanceOf0;
[L97]                __tmp__alloc_allowance_Hakka_lvl0 := alloc_allowance_Hakka_lvl0;
[L98]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L99]                __tmp__sum_allowance1 := sum_allowance1;
[L100]               __tmp__sum_nonces2 := sum_nonces2;
[L101]               __tmp__Length := Length;
[L102]               __tmp__now := now;
[L103]               __tmp__owner_Ownable := owner_Ownable;
[L104]               __tmp__name_Hakka := name_Hakka;
[L105]               __tmp__symbol_Hakka := symbol_Hakka;
[L106]               __tmp__version_Hakka := version_Hakka;
[L107]               __tmp__decimals_Hakka := decimals_Hakka;
[L108]               __tmp__totalSupply_Hakka := totalSupply_Hakka;
[L109]               __tmp__balanceOf_Hakka := balanceOf_Hakka;
[L110]               __tmp__allowance_Hakka := allowance_Hakka;
[L111]               __tmp__nonces_Hakka := nonces_Hakka;
[L112]               __tmp__DOMAIN_SEPARATOR_Hakka := DOMAIN_SEPARATOR_Hakka;
[L113]               __tmp__PERMIT_TYPEHASH_Hakka := PERMIT_TYPEHASH_Hakka;
[L114]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L726]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L751]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L752]   COND FALSE  !(from_s295 != msgsender_MSG && __tmp__allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L761]   COND FALSE  !(!(__tmp__balanceOf_Hakka[this][from_s295] >= amount_s295))
[L765]   CALL        call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L707]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L708]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L765]   RET         call __var_4 := sub~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][from_s295], amount_s295);
[L766]   COND FALSE  !(revert)
[L769]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_Hakka[this][from_s295];
[L770]               __tmp__balanceOf_Hakka[this][from_s295] := __var_4;
[L771]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_Hakka[this][from_s295];
[L772]   CALL        call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L689]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L690]   COND FALSE  !(!((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136))
[L772]   RET         call __var_5 := add~uint256~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balanceOf_Hakka[this][to_s295], amount_s295);
[L773]   COND FALSE  !(revert)
[L776]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_Hakka[this][to_s295];
[L777]               __tmp__balanceOf_Hakka[this][to_s295] := __var_5;
[L778]               __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_Hakka[this][to_s295];
[L779]               __ret_0_ := true;
[L726]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L727]   COND FALSE  !(revert)
[L730]               __ret_0_ := __var_1;
[L114]   RET         call __ret_0_ := transfer~address~uint256_Hakka__fail(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L115]               assume revert || gas < 0;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:03,586 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:03,587 INFO  L82        PathProgramCache]: Analyzing trace with hash 985312027, now seen corresponding path program 1 times
[2020-11-24 19:15:03,587 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:03,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:03,630 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:03,630 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:03,630 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 19:15:03,631 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:03,631 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 19:15:03,631 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 19:15:03,632 INFO  L87              Difference]: Start difference. First operand 211 states and 214 transitions. cyclomatic complexity: 4 Second operand 5 states.
[2020-11-24 19:15:03,654 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:03,654 INFO  L93              Difference]: Finished difference Result 211 states and 213 transitions.
[2020-11-24 19:15:03,654 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 19:15:03,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 211 states and 213 transitions.
[2020-11-24 19:15:03,656 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,657 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 211 states to 149 states and 151 transitions.
[2020-11-24 19:15:03,657 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 126
[2020-11-24 19:15:03,657 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 126
[2020-11-24 19:15:03,657 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 149 states and 151 transitions.
[2020-11-24 19:15:03,657 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:03,658 INFO  L728         BuchiCegarLoop]: Abstraction has 149 states and 151 transitions.
[2020-11-24 19:15:03,658 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 149 states and 151 transitions.
[2020-11-24 19:15:03,659 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 149 to 149.
[2020-11-24 19:15:03,660 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 149 states.
[2020-11-24 19:15:03,660 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 149 states to 149 states and 151 transitions.
[2020-11-24 19:15:03,660 INFO  L751         BuchiCegarLoop]: Abstraction has 149 states and 151 transitions.
[2020-11-24 19:15:03,661 INFO  L631         BuchiCegarLoop]: Abstraction has 149 states and 151 transitions.
[2020-11-24 19:15:03,661 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 19:15:03,661 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 149 states and 151 transitions.
[2020-11-24 19:15:03,661 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:03,662 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:03,662 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:03,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:03,663 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND FALSE  !(__exception)
[L117]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L737]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L789]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L790]   COND FALSE  !(from_s295 != msgsender_MSG && allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L799]   COND FALSE  !(!(balanceOf_Hakka[this][from_s295] >= amount_s295))
[L803]   CALL        call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L716]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L717]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L803]   RET         call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L804]   COND FALSE  !(revert)
[L807]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][from_s295];
[L808]               balanceOf_Hakka[this][from_s295] := __var_4;
[L809]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][from_s295];
[L810]   CALL        call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L698]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L699]   COND FALSE  !(!((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136))
[L810]   RET         call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L811]   COND FALSE  !(revert)
[L814]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][to_s295];
[L815]               balanceOf_Hakka[this][to_s295] := __var_5;
[L816]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][to_s295];
[L817]               assert { :EventEmitted "Transfer_Hakka" } true;
[L818]               __ret_0_ := true;
[L737]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L738]   COND FALSE  !(revert)
[L741]               __ret_0_ := __var_1;
[L117]   RET         call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L118]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_Hakka[this][msgsender_MSG] == old(balanceOf_Hakka[this][msgsender_MSG]) - amount_s210) && balanceOf_Hakka[this][to_s210] == old(balanceOf_Hakka[this][to_s210]) + amount_s210) && totalSupply_Hakka[this] == old(totalSupply_Hakka[this])) && allowance_Hakka[this] == old(allowance_Hakka[this])) && balanceOf_Hakka[this][p1] == old(balanceOf_Hakka[this][p1])) && nonces_Hakka[this] == old(nonces_Hakka[this])) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:03,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:03,665 INFO  L82        PathProgramCache]: Analyzing trace with hash -57444718, now seen corresponding path program 1 times
[2020-11-24 19:15:03,665 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:03,722 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:04,137 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 19:15:04,138 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:04,138 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 19:15:04,138 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:04,138 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 19:15:04,138 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=269, Unknown=0, NotChecked=0, Total=306
[2020-11-24 19:15:04,139 INFO  L87              Difference]: Start difference. First operand 149 states and 151 transitions. cyclomatic complexity: 3 Second operand 18 states.
[2020-11-24 19:15:04,508 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:04,508 INFO  L93              Difference]: Finished difference Result 176 states and 179 transitions.
[2020-11-24 19:15:04,508 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 19:15:04,508 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 176 states and 179 transitions.
[2020-11-24 19:15:04,509 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:04,510 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 176 states to 149 states and 150 transitions.
[2020-11-24 19:15:04,510 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 126
[2020-11-24 19:15:04,510 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 126
[2020-11-24 19:15:04,510 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 149 states and 150 transitions.
[2020-11-24 19:15:04,510 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:04,510 INFO  L728         BuchiCegarLoop]: Abstraction has 149 states and 150 transitions.
[2020-11-24 19:15:04,510 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 149 states and 150 transitions.
[2020-11-24 19:15:04,511 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 149 to 149.
[2020-11-24 19:15:04,511 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 149 states.
[2020-11-24 19:15:04,512 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 149 states to 149 states and 150 transitions.
[2020-11-24 19:15:04,512 INFO  L751         BuchiCegarLoop]: Abstraction has 149 states and 150 transitions.
[2020-11-24 19:15:04,512 INFO  L631         BuchiCegarLoop]: Abstraction has 149 states and 150 transitions.
[2020-11-24 19:15:04,512 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 19:15:04,512 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 149 states and 150 transitions.
[2020-11-24 19:15:04,512 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 19:15:04,513 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 19:15:04,513 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 19:15:04,513 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 19:15:04,513 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L3]                 success_transfer_Hakka0 := false;
[L3]                 call_transfer_Hakka0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L1537]              assume null == 0;
[L1538]  CALL        call this := FreshRefGenerator__success();
[L681]               havoc newRef;
[L682]               assume Alloc[newRef] == false;
[L683]               Alloc[newRef] := true;
[L684]               assume newRef != null;
[L1538]  RET         call this := FreshRefGenerator__success();
[L1539]              assume now >= 0;
[L1540]              assume DType[this] == Hakka;
[L1541]              assume !revert && gas >= 0;
[L1542]  CALL        call CorralChoice_Hakka(this);
[L1436]              havoc msgsender_MSG;
[L1437]              havoc msgvalue_MSG;
[L1438]              havoc choice;
[L1439]              havoc __ret_0_owner;
[L1440]              havoc newOwner_s56;
[L1441]              havoc __ret_0_name;
[L1442]              havoc __ret_0_symbol;
[L1443]              havoc __ret_0_version;
[L1444]              havoc __ret_0_decimals;
[L1445]              havoc __ret_0_totalSupply;
[L1446]              havoc arg589_s0;
[L1447]              havoc __ret_0_balanceOf;
[L1448]              havoc arg590_s0;
[L1449]              havoc arg591_s0;
[L1450]              havoc __ret_0_allowance;
[L1451]              havoc arg592_s0;
[L1452]              havoc __ret_0_nonces;
[L1453]              havoc __ret_0_DOMAIN_SEPARATOR;
[L1454]              havoc __ret_0_PERMIT_TYPEHASH;
[L1455]              havoc chainId__s193;
[L1456]              havoc to_s210;
[L1457]              havoc amount_s210;
[L1458]              havoc __ret_0_transfer;
[L1459]              havoc from_s295;
[L1460]              havoc to_s295;
[L1461]              havoc amount_s295;
[L1462]              havoc __ret_0_transferFrom;
[L1463]              havoc to_s331;
[L1464]              havoc amount_s331;
[L1465]              havoc from_s408;
[L1466]              havoc amount_s408;
[L1467]              havoc spender_s436;
[L1468]              havoc amount_s436;
[L1469]              havoc __ret_0_approve;
[L1470]              havoc spender_s479;
[L1471]              havoc amount_s479;
[L1472]              havoc data_s479;
[L1473]              havoc __ret_0_approveAndCall;
[L1474]              havoc holder_s586;
[L1475]              havoc spender_s586;
[L1476]              havoc nonce_s586;
[L1477]              havoc expiry_s586;
[L1478]              havoc allowed_s586;
[L1479]              havoc v_s586;
[L1480]              havoc r_s586;
[L1481]              havoc s_s586;
[L1482]              havoc tmpNow;
[L1483]              havoc gas;
[L1484]              assume gas > 4000000 && gas <= 8000000;
[L1485]              tmpNow := now;
[L1486]              havoc now;
[L1487]              assume now > tmpNow;
[L1488]              assume msgsender_MSG != null;
[L1489]  COND FALSE  !(choice == 6)
[L1495]  COND FALSE  !(choice == 5)
[L1501]  COND FALSE  !(choice == 4)
[L1507]  COND TRUE   choice == 3
[L1508]              gas := gas - 21000;
[L1509]  COND TRUE   gas >= 0
[L1510]              assume amount_s210 >= 0 && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1511]              assume msgvalue_MSG == 0;
[L1512]  CALL        call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s210) && msgsender_MSG != to_s210) && amount_s210 <= balanceOf_Hakka[this][msgsender_MSG]) && balanceOf_Hakka[this][to_s210] + amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && amount_s210 >= 0) && amount_s210 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][to_s210] >= 0) && balanceOf_Hakka[this][to_s210] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_Hakka[this][msgsender_MSG] >= 0) && balanceOf_Hakka[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Hakka0 := true;
[L3]                 call_transfer_Hakka0 := false;
[L3]                 revert := revert_hold;
[L88]                havoc __exception;
[L89]                revert := false;
[L90]    COND FALSE  !(__exception)
[L117]   CALL        call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L737]   CALL        call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L789]               __var_2 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L790]   COND TRUE   from_s295 != msgsender_MSG && allowance_Hakka[this][from_s295][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L791]   CALL        call __var_3 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L716]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L717]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L791]   RET         call __var_3 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, allowance_Hakka[this][from_s295][msgsender_MSG], amount_s295);
[L792]   COND FALSE  !(revert)
[L795]               sum_allowance1[from_s295] := sum_allowance1[from_s295] - allowance_Hakka[this][from_s295][msgsender_MSG];
[L796]               allowance_Hakka[this][from_s295][msgsender_MSG] := __var_3;
[L797]               sum_allowance1[from_s295] := sum_allowance1[from_s295] + allowance_Hakka[this][from_s295][msgsender_MSG];
[L799]   COND FALSE  !(!(balanceOf_Hakka[this][from_s295] >= amount_s295))
[L803]   CALL        call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L716]               z_s157 := (x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L717]   COND FALSE  !(!((x_s157 - y_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s157))
[L803]   RET         call __var_4 := sub~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][from_s295], amount_s295);
[L804]   COND FALSE  !(revert)
[L807]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][from_s295];
[L808]               balanceOf_Hakka[this][from_s295] := __var_4;
[L809]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][from_s295];
[L810]   CALL        call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L698]               z_s136 := (x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L699]   COND FALSE  !(!((x_s136 + y_s136) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s136))
[L810]   RET         call __var_5 := add~uint256~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_Hakka[this][to_s295], amount_s295);
[L811]   COND FALSE  !(revert)
[L814]               sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_Hakka[this][to_s295];
[L815]               balanceOf_Hakka[this][to_s295] := __var_5;
[L816]               sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_Hakka[this][to_s295];
[L817]               assert { :EventEmitted "Transfer_Hakka" } true;
[L818]               __ret_0_ := true;
[L737]   RET         call __var_1 := transferFrom~address~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s210, amount_s210);
[L738]   COND FALSE  !(revert)
[L741]               __ret_0_ := __var_1;
[L117]   RET         call __ret_0_ := transfer~address~uint256_Hakka__success(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L118]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((__ret_0_ == true && balanceOf_Hakka[this][msgsender_MSG] == old(balanceOf_Hakka[this][msgsender_MSG]) - amount_s210) && balanceOf_Hakka[this][to_s210] == old(balanceOf_Hakka[this][to_s210]) + amount_s210) && totalSupply_Hakka[this] == old(totalSupply_Hakka[this])) && allowance_Hakka[this] == old(allowance_Hakka[this])) && balanceOf_Hakka[this][p1] == old(balanceOf_Hakka[this][p1])) && nonces_Hakka[this] == old(nonces_Hakka[this])) && DOMAIN_SEPARATOR_Hakka[this] == old(DOMAIN_SEPARATOR_Hakka[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L1512]  RET         call __ret_0_transfer := transfer~address~uint256_Hakka(this, msgsender_MSG, msgvalue_MSG, to_s210, amount_s210);
[L1542]  RET         call CorralChoice_Hakka(this);

Loop:
[L1542]        assume true;

[2020-11-24 19:15:04,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 19:15:04,515 INFO  L82        PathProgramCache]: Analyzing trace with hash 1644745110, now seen corresponding path program 1 times
[2020-11-24 19:15:04,515 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 19:15:04,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 19:15:04,535 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 19:15:04,535 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 19:15:04,536 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 19:15:04,536 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 19:15:04,536 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 19:15:04,536 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 19:15:04,536 INFO  L87              Difference]: Start difference. First operand 149 states and 150 transitions. cyclomatic complexity: 2 Second operand 3 states.
[2020-11-24 19:15:04,539 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 19:15:04,539 INFO  L93              Difference]: Finished difference Result 131 states and 131 transitions.
[2020-11-24 19:15:04,539 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 19:15:04,539 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 131 states and 131 transitions.
[2020-11-24 19:15:04,539 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 19:15:04,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 131 states to 0 states and 0 transitions.
[2020-11-24 19:15:04,540 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 19:15:04,540 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 19:15:04,540 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 19:15:04,540 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 19:15:04,540 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 19:15:04,540 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 19:15:04,540 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 19:15:04,540 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 19:15:04,540 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 19:15:04,540 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 19:15:04,540 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 19:15:04,543 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 07:15:04 BasicIcfg
[2020-11-24 19:15:04,543 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 19:15:04,543 INFO  L168              Benchmark]: Toolchain (without parser) took 3768.59 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 247.5 MB). Free memory was 940.6 MB in the beginning and 749.2 MB in the end (delta: 191.4 MB). Peak memory consumption was 438.8 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,544 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,545 INFO  L168              Benchmark]: Boogie Preprocessor took 63.29 ms. Allocated memory is still 1.0 GB. Free memory is still 940.6 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,545 INFO  L168              Benchmark]: UtopiaSpecLang took 49.55 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,545 INFO  L168              Benchmark]: Boogie Printer took 12.08 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,545 INFO  L168              Benchmark]: RCFGBuilder took 441.22 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 892.2 MB in the end (delta: 37.6 MB). Peak memory consumption was 37.6 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,546 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.71 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 883.3 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,546 INFO  L168              Benchmark]: BÃ¼chi Program Product took 823.35 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 883.3 MB in the beginning and 1.0 GB in the end (delta: -129.0 MB). Peak memory consumption was 164.8 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,546 INFO  L168              Benchmark]: BlockEncodingV2 took 77.32 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 985.9 MB in the end (delta: 26.3 MB). Peak memory consumption was 26.3 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,547 INFO  L168              Benchmark]: BuchiAutomizer took 2253.71 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 187.7 MB). Free memory was 985.9 MB in the beginning and 749.2 MB in the end (delta: 236.7 MB). Peak memory consumption was 424.4 MB. Max. memory is 15.3 GB.
[2020-11-24 19:15:04,549 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1202 locations, 1995 edges
  - StatisticsResult: Encoded RCFG
    1182 locations, 1949 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 63.29 ms. Allocated memory is still 1.0 GB. Free memory is still 940.6 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 49.55 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.08 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 441.22 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 892.2 MB in the end (delta: 37.6 MB). Peak memory consumption was 37.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.71 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 883.3 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 823.35 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.8 MB). Free memory was 883.3 MB in the beginning and 1.0 GB in the end (delta: -129.0 MB). Peak memory consumption was 164.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 77.32 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 985.9 MB in the end (delta: 26.3 MB). Peak memory consumption was 26.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 2253.71 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 187.7 MB). Free memory was 985.9 MB in the beginning and 749.2 MB in the end (delta: 236.7 MB). Peak memory consumption was 424.4 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    524 locations, 623 edges
  - StatisticsResult: BuchiProgram size
    1202 locations, 1995 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic). 10 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 2.2s and 11 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.0s. Construction of modules took 0.4s. BÃ¼chi inclusion checks took 0.4s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.0s AutomataMinimizationTime, 9 MinimizatonAttempts, 46 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 235 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 2492 SDtfs, 1740 SDslu, 4841 SDs, 0 SdLazy, 2045 SolverSat, 550 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_Hakka0) ==> ( <>(success_transfer_Hakka0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
