This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 18:29:41,584 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 18:29:41,585 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 18:29:41,596 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 18:29:41,596 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 18:29:41,597 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 18:29:41,598 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 18:29:41,599 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 18:29:41,601 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 18:29:41,601 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 18:29:41,602 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 18:29:41,602 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 18:29:41,603 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 18:29:41,604 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 18:29:41,605 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 18:29:41,605 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 18:29:41,606 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 18:29:41,607 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 18:29:41,609 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 18:29:41,610 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 18:29:41,611 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 18:29:41,612 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 18:29:41,615 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 18:29:41,615 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 18:29:41,616 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 18:29:41,616 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 18:29:41,617 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 18:29:41,618 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 18:29:41,618 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 18:29:41,618 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 18:29:41,619 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 18:29:41,620 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 18:29:41,621 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 18:29:41,621 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 18:29:41,622 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 18:29:41,623 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 18:29:41,623 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 18:29:41,624 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 18:29:41,624 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 18:29:41,625 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 18:29:41,626 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 18:29:41,626 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 18:29:41,637 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 18:29:41,637 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 18:29:41,638 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 18:29:41,638 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 18:29:41,639 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 18:29:41,639 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 18:29:41,639 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 18:29:41,639 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 18:29:41,639 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 18:29:41,639 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 18:29:41,639 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 18:29:41,639 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 18:29:41,639 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 18:29:41,640 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 18:29:41,640 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 18:29:41,641 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 18:29:41,641 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 18:29:41,641 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 18:29:41,663 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 18:29:41,672 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 18:29:41,675 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 18:29:41,676 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 18:29:41,676 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 18:29:41,677 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl
[2020-11-24 18:29:41,677 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl'
[2020-11-24 18:29:41,761 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 18:29:41,762 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 18:29:41,763 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 18:29:41,763 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 18:29:41,763 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 18:29:41,779 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,781 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,814 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,814 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,836 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,847 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,853 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,863 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 18:29:41,863 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 18:29:41,864 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 18:29:41,866 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 18:29:41,869 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/1) ...
[2020-11-24 18:29:41,888 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-24 18:29:41,893 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-24 18:29:41,901 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-24 18:29:41,908 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s1257 && value_s1257<=_balances_ERC20[this][msg.sender] ) && value_s1257>=0 ) && value_s1257<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1257]>=0 ) && _balances_ERC20[this][to_s1257]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 18:29:41,911 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && _supply_ERC20[this]==( old(_supply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _name_DkargoToken[this]==( old(_name_DkargoToken[this]) ) ) && _symbol_DkargoToken[this]==( old(_symbol_DkargoToken[this]) ) ) && _dkargoPrefix_DkargoPrefix[this]==( old(_dkargoPrefix_DkargoPrefix[this]) ) ) && _infcs_ERC165[this]==( old(_infcs_ERC165[this]) ) ) && _slist_AddressChain[this]==( old(_slist_AddressChain[this]) ) ) && _owner_Ownership[this]==( old(_owner_Ownership[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_DkargoToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]]
[2020-11-24 18:29:41,915 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DkargoToken.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-24 18:29:41,915 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_DkargoToken0) ==> ( <>AP(success_transfer_DkargoToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 18:29:41,923 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:29:41 PropertyContainer
[2020-11-24 18:29:41,923 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 18:29:41,923 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 18:29:41,923 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 18:29:41,923 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 18:29:41,924 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/2) ...
[2020-11-24 18:29:41,925 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 18:29:41,925 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 18:29:41,939 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:29:41" (2/2) ...
[2020-11-24 18:29:41,940 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 18:29:41,940 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 18:29:41,940 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 18:29:41,940 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 18:29:41,941 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/2) ...
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-24 18:29:41,994 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-24 18:29:41,994 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-24 18:29:41,995 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 18:29:41,995 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 18:29:41,995 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 18:29:41,995 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 18:29:41,995 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 18:29:41,996 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 18:29:41,996 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 18:29:41,997 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 18:29:41,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 18:29:41,997 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 18:29:41,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 18:29:41,997 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 18:29:41,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 18:29:41,998 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 18:29:41,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 18:29:41,998 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 18:29:41,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 18:29:41,998 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 18:29:41,998 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 18:29:41,998 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-24 18:29:41,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-24 18:29:41,999 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-24 18:29:41,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-24 18:29:41,999 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-24 18:29:41,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-24 18:29:41,999 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 18:29:41,999 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 18:29:41,999 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 18:29:42,000 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-24 18:29:42,001 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-24 18:29:42,001 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-24 18:29:42,001 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-24 18:29:42,001 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-24 18:29:42,001 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-24 18:29:42,001 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 18:29:42,001 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 18:29:42,002 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 18:29:42,002 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 18:29:42,002 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-24 18:29:42,002 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-24 18:29:42,002 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-24 18:29:42,002 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 18:29:42,002 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-24 18:29:42,003 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-24 18:29:42,004 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 18:29:42,004 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 18:29:42,004 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 18:29:42,004 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 18:29:42,004 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 18:29:42,004 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 18:29:42,004 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 18:29:42,005 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 18:29:42,005 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 18:29:42,005 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 18:29:42,005 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 18:29:42,005 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 18:29:42,005 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 18:29:42,005 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 18:29:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-24 18:29:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-24 18:29:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-24 18:29:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-24 18:29:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-24 18:29:42,006 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-24 18:29:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 18:29:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 18:29:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 18:29:42,007 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 18:29:42,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 18:29:42,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 18:29:42,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-24 18:29:42,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-24 18:29:42,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 18:29:42,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 18:29:42,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 18:29:42,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-24 18:29:42,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-24 18:29:42,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 18:29:42,014 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 18:29:42,014 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 18:29:42,332 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 18:29:42,332 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 18:29:42,333 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 18:29:42,783 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 18:29:42,783 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-24 18:29:42,785 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:29:42 BoogieIcfgContainer
[2020-11-24 18:29:42,785 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:29:41" (2/2) ...
[2020-11-24 18:29:42,785 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 18:29:42,786 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7b10d27 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:29:42, skipping insertion in model container
[2020-11-24 18:29:42,786 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 18:29:42,786 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 18:29:42,786 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 18:29:42,788 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 18:29:42,788 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/3) ...
[2020-11-24 18:29:42,788 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@59516b6c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:29:42, skipping insertion in model container
[2020-11-24 18:29:42,788 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:29:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 18:29:42,829 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:29:42 NWAContainer
[2020-11-24 18:29:42,829 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 18:29:42,829 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 18:29:42,829 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 18:29:42,830 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 18:29:42,831 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:29:42" (3/4) ...
[2020-11-24 18:29:42,832 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@593c3596 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:29:42, skipping insertion in model container
[2020-11-24 18:29:42,832 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:29:42" (4/4) ...
[2020-11-24 18:29:42,835 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 18:29:42,839 INFO  L110   BuchiProductObserver]: Initial RCFG 1404 locations, 1941 edges
[2020-11-24 18:29:42,839 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 18:29:42,851 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 18:29:44,259 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 18:29:44,263 INFO  L110   BuchiProductObserver]: BuchiProgram size 3428 locations, 6279 edges
[2020-11-24 18:29:44,263 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:29:44 BoogieIcfgContainer
[2020-11-24 18:29:44,263 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 18:29:44,264 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 18:29:44,264 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 18:29:44,265 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 18:29:44,265 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:29:44" (1/1) ...
[2020-11-24 18:29:44,336 INFO  L313           BlockEncoder]: Initial Icfg 3428 locations, 6279 edges
[2020-11-24 18:29:44,336 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 18:29:44,337 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 18:29:44,337 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 18:29:44,337 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 18:29:44,348 INFO  L70    emoveInfeasibleEdges]: Removed 210 edges and 23 locations because of local infeasibility
[2020-11-24 18:29:44,354 INFO  L70        RemoveSinkStates]: Removed 134 edges and 89 locations by removing sink states
[2020-11-24 18:29:44,365 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 18:29:44,370 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 18:29:44,372 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 18:29:44,373 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 18:29:44,377 INFO  L313           BlockEncoder]: Encoded RCFG 3288 locations, 5894 edges
[2020-11-24 18:29:44,377 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 06:29:44 BasicIcfg
[2020-11-24 18:29:44,377 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 18:29:44,378 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 18:29:44,378 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 18:29:44,379 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 18:29:44,380 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:29:44,380 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 06:29:41" (1/6) ...
[2020-11-24 18:29:44,381 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7c547a80 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 06:29:44, skipping insertion in model container
[2020-11-24 18:29:44,382 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:29:44,382 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 06:29:41" (2/6) ...
[2020-11-24 18:29:44,382 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7c547a80 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 06:29:44, skipping insertion in model container
[2020-11-24 18:29:44,382 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:29:44,382 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 06:29:42" (3/6) ...
[2020-11-24 18:29:44,382 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7c547a80 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 06:29:44, skipping insertion in model container
[2020-11-24 18:29:44,382 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:29:44,382 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 06:29:42" (4/6) ...
[2020-11-24 18:29:44,382 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7c547a80 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 06:29:44, skipping insertion in model container
[2020-11-24 18:29:44,382 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:29:44,382 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 06:29:44" (5/6) ...
[2020-11-24 18:29:44,383 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7c547a80 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 06:29:44, skipping insertion in model container
[2020-11-24 18:29:44,383 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 18:29:44,383 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 06:29:44" (6/6) ...
[2020-11-24 18:29:44,383 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-self.bpl_BEv2
[2020-11-24 18:29:44,419 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 18:29:44,419 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 18:29:44,419 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 18:29:44,419 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 18:29:44,419 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 18:29:44,420 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 18:29:44,420 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 18:29:44,420 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 18:29:44,420 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 18:29:44,446 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3288 states.
[2020-11-24 18:29:44,496 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:44,496 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:44,496 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:44,505 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:44,505 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
[2020-11-24 18:29:44,505 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 18:29:44,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3288 states.
[2020-11-24 18:29:44,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:44,524 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:44,525 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:44,526 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:44,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND TRUE   choice == 7
[L3888]              gas := gas - 21000;
[L3889]  COND FALSE  !(gas >= 0)
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:44,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:44,542 INFO  L82        PathProgramCache]: Analyzing trace with hash 1727619961, now seen corresponding path program 1 times
[2020-11-24 18:29:44,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:44,564 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:44,629 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:44,631 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:44,631 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 18:29:44,635 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:44,644 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 18:29:44,644 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 18:29:44,792 INFO  L87              Difference]: Start difference. First operand 3288 states. Second operand 5 states.
[2020-11-24 18:29:45,115 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:45,115 INFO  L93              Difference]: Finished difference Result 1446 states and 1771 transitions.
[2020-11-24 18:29:45,115 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 18:29:45,117 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1446 states and 1771 transitions.
[2020-11-24 18:29:45,126 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,134 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1446 states to 478 states and 575 transitions.
[2020-11-24 18:29:45,135 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 18:29:45,136 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 126
[2020-11-24 18:29:45,136 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 478 states and 575 transitions.
[2020-11-24 18:29:45,141 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:45,141 INFO  L728         BuchiCegarLoop]: Abstraction has 478 states and 575 transitions.
[2020-11-24 18:29:45,160 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 478 states and 575 transitions.
[2020-11-24 18:29:45,185 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 478 to 478.
[2020-11-24 18:29:45,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 478 states.
[2020-11-24 18:29:45,187 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 478 states to 478 states and 575 transitions.
[2020-11-24 18:29:45,188 INFO  L751         BuchiCegarLoop]: Abstraction has 478 states and 575 transitions.
[2020-11-24 18:29:45,188 INFO  L631         BuchiCegarLoop]: Abstraction has 478 states and 575 transitions.
[2020-11-24 18:29:45,188 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 18:29:45,188 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 478 states and 575 transitions.
[2020-11-24 18:29:45,189 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,189 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:45,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:45,190 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:45,190 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND FALSE  !(__exception)
[L784]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2310]  COND TRUE   DType[this] == DkargoToken
[L2311]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1895]  COND TRUE   DType[this] == DkargoToken
[L1896]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2124]              __var_16 := null;
[L2125]  COND TRUE   !(sender_s956 != null)
[L2126]              revert := true;
[L1896]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1897]  COND TRUE   revert
[L2311]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2312]  COND TRUE   revert
[L784]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L785]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:45,192 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:45,193 INFO  L82        PathProgramCache]: Analyzing trace with hash -1218571721, now seen corresponding path program 1 times
[2020-11-24 18:29:45,194 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:45,204 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:45,234 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:45,234 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:45,234 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 18:29:45,236 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:45,236 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:29:45,236 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:29:45,236 INFO  L87              Difference]: Start difference. First operand 478 states and 575 transitions. cyclomatic complexity: 98 Second operand 7 states.
[2020-11-24 18:29:45,257 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:45,257 INFO  L93              Difference]: Finished difference Result 529 states and 645 transitions.
[2020-11-24 18:29:45,257 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 18:29:45,257 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 529 states and 645 transitions.
[2020-11-24 18:29:45,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,262 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 529 states to 477 states and 573 transitions.
[2020-11-24 18:29:45,262 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 126
[2020-11-24 18:29:45,263 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 126
[2020-11-24 18:29:45,263 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 477 states and 573 transitions.
[2020-11-24 18:29:45,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:45,263 INFO  L728         BuchiCegarLoop]: Abstraction has 477 states and 573 transitions.
[2020-11-24 18:29:45,264 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 477 states and 573 transitions.
[2020-11-24 18:29:45,269 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 477 to 477.
[2020-11-24 18:29:45,269 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 477 states.
[2020-11-24 18:29:45,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 477 states to 477 states and 573 transitions.
[2020-11-24 18:29:45,270 INFO  L751         BuchiCegarLoop]: Abstraction has 477 states and 573 transitions.
[2020-11-24 18:29:45,270 INFO  L631         BuchiCegarLoop]: Abstraction has 477 states and 573 transitions.
[2020-11-24 18:29:45,270 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 18:29:45,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 477 states and 573 transitions.
[2020-11-24 18:29:45,271 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,271 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:45,271 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:45,272 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:45,272 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND FALSE  !(__exception)
[L784]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2310]  COND TRUE   DType[this] == DkargoToken
[L2311]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1895]  COND TRUE   DType[this] == DkargoToken
[L1896]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2124]              __var_16 := null;
[L2125]  COND FALSE  !(!(sender_s956 != null))
[L2129]              __var_17 := null;
[L2130]  COND TRUE   !(recipient_s956 != null)
[L2131]              revert := true;
[L1896]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1897]  COND TRUE   revert
[L2311]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2312]  COND TRUE   revert
[L784]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L785]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:45,274 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:45,274 INFO  L82        PathProgramCache]: Analyzing trace with hash -1046285686, now seen corresponding path program 1 times
[2020-11-24 18:29:45,275 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:45,282 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:45,304 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:45,304 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:45,304 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-24 18:29:45,304 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:45,305 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-24 18:29:45,305 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-24 18:29:45,305 INFO  L87              Difference]: Start difference. First operand 477 states and 573 transitions. cyclomatic complexity: 97 Second operand 8 states.
[2020-11-24 18:29:45,327 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:45,327 INFO  L93              Difference]: Finished difference Result 528 states and 643 transitions.
[2020-11-24 18:29:45,327 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 18:29:45,327 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 528 states and 643 transitions.
[2020-11-24 18:29:45,329 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,331 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 528 states to 476 states and 571 transitions.
[2020-11-24 18:29:45,331 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 126
[2020-11-24 18:29:45,331 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 126
[2020-11-24 18:29:45,331 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 476 states and 571 transitions.
[2020-11-24 18:29:45,332 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:45,332 INFO  L728         BuchiCegarLoop]: Abstraction has 476 states and 571 transitions.
[2020-11-24 18:29:45,333 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 476 states and 571 transitions.
[2020-11-24 18:29:45,336 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 476 to 476.
[2020-11-24 18:29:45,336 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 476 states.
[2020-11-24 18:29:45,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 476 states to 476 states and 571 transitions.
[2020-11-24 18:29:45,337 INFO  L751         BuchiCegarLoop]: Abstraction has 476 states and 571 transitions.
[2020-11-24 18:29:45,337 INFO  L631         BuchiCegarLoop]: Abstraction has 476 states and 571 transitions.
[2020-11-24 18:29:45,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 18:29:45,337 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 476 states and 571 transitions.
[2020-11-24 18:29:45,338 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,338 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:45,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:45,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:45,339 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND FALSE  !(__exception)
[L784]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2310]  COND TRUE   DType[this] == DkargoToken
[L2311]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1895]  COND TRUE   DType[this] == DkargoToken
[L1896]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2124]              __var_16 := null;
[L2125]  COND FALSE  !(!(sender_s956 != null))
[L2129]              __var_17 := null;
[L2130]  COND FALSE  !(!(recipient_s956 != null))
[L2134]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1576]  COND TRUE   !(b_s157 <= a_s157)
[L1577]              revert := true;
[L2134]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2135]  COND TRUE   revert
[L1896]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1897]  COND TRUE   revert
[L2311]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2312]  COND TRUE   revert
[L784]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L785]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:45,341 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:45,341 INFO  L82        PathProgramCache]: Analyzing trace with hash 1133693164, now seen corresponding path program 1 times
[2020-11-24 18:29:45,342 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:45,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:45,370 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:45,370 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:45,370 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 18:29:45,371 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:45,371 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 18:29:45,371 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 18:29:45,371 INFO  L87              Difference]: Start difference. First operand 476 states and 571 transitions. cyclomatic complexity: 96 Second operand 3 states.
[2020-11-24 18:29:45,385 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:45,385 INFO  L93              Difference]: Finished difference Result 555 states and 657 transitions.
[2020-11-24 18:29:45,385 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 18:29:45,385 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 555 states and 657 transitions.
[2020-11-24 18:29:45,387 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:29:45,389 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 555 states to 513 states and 588 transitions.
[2020-11-24 18:29:45,389 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 141
[2020-11-24 18:29:45,389 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 173
[2020-11-24 18:29:45,389 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 513 states and 588 transitions.
[2020-11-24 18:29:45,390 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:45,390 INFO  L728         BuchiCegarLoop]: Abstraction has 513 states and 588 transitions.
[2020-11-24 18:29:45,390 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 513 states and 588 transitions.
[2020-11-24 18:29:45,394 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 513 to 502.
[2020-11-24 18:29:45,395 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 502 states.
[2020-11-24 18:29:45,395 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 502 states to 502 states and 577 transitions.
[2020-11-24 18:29:45,395 INFO  L751         BuchiCegarLoop]: Abstraction has 502 states and 577 transitions.
[2020-11-24 18:29:45,395 INFO  L631         BuchiCegarLoop]: Abstraction has 502 states and 577 transitions.
[2020-11-24 18:29:45,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 18:29:45,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 502 states and 577 transitions.
[2020-11-24 18:29:45,397 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,397 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:45,397 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:45,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:45,398 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND TRUE   !(sender_s956 != null)
[L2094]              revert := true;
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND TRUE   revert
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:45,399 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:45,399 INFO  L82        PathProgramCache]: Analyzing trace with hash 912323400, now seen corresponding path program 1 times
[2020-11-24 18:29:45,400 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:45,406 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:45,425 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:45,425 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:45,425 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 18:29:45,426 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:45,426 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:29:45,426 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:29:45,426 INFO  L87              Difference]: Start difference. First operand 502 states and 577 transitions. cyclomatic complexity: 76 Second operand 7 states.
[2020-11-24 18:29:45,438 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:45,438 INFO  L93              Difference]: Finished difference Result 520 states and 596 transitions.
[2020-11-24 18:29:45,438 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 18:29:45,438 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 520 states and 596 transitions.
[2020-11-24 18:29:45,440 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,442 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 520 states to 501 states and 575 transitions.
[2020-11-24 18:29:45,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 161
[2020-11-24 18:29:45,442 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 161
[2020-11-24 18:29:45,442 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 501 states and 575 transitions.
[2020-11-24 18:29:45,443 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:45,443 INFO  L728         BuchiCegarLoop]: Abstraction has 501 states and 575 transitions.
[2020-11-24 18:29:45,443 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 501 states and 575 transitions.
[2020-11-24 18:29:45,447 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 501 to 501.
[2020-11-24 18:29:45,447 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 501 states.
[2020-11-24 18:29:45,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 501 states to 501 states and 575 transitions.
[2020-11-24 18:29:45,448 INFO  L751         BuchiCegarLoop]: Abstraction has 501 states and 575 transitions.
[2020-11-24 18:29:45,448 INFO  L631         BuchiCegarLoop]: Abstraction has 501 states and 575 transitions.
[2020-11-24 18:29:45,448 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 18:29:45,448 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 501 states and 575 transitions.
[2020-11-24 18:29:45,449 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,449 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:45,449 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:45,450 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:45,450 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND TRUE   !(recipient_s956 != null)
[L2099]              revert := true;
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND TRUE   revert
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:45,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:45,452 INFO  L82        PathProgramCache]: Analyzing trace with hash 1235834249, now seen corresponding path program 1 times
[2020-11-24 18:29:45,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:45,458 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:45,482 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:45,483 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:45,483 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-24 18:29:45,483 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:45,483 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-24 18:29:45,483 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-24 18:29:45,483 INFO  L87              Difference]: Start difference. First operand 501 states and 575 transitions. cyclomatic complexity: 75 Second operand 8 states.
[2020-11-24 18:29:45,502 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:45,502 INFO  L93              Difference]: Finished difference Result 519 states and 594 transitions.
[2020-11-24 18:29:45,502 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 18:29:45,502 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 519 states and 594 transitions.
[2020-11-24 18:29:45,504 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,506 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 519 states to 500 states and 573 transitions.
[2020-11-24 18:29:45,507 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 160
[2020-11-24 18:29:45,507 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 160
[2020-11-24 18:29:45,507 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 500 states and 573 transitions.
[2020-11-24 18:29:45,508 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:45,508 INFO  L728         BuchiCegarLoop]: Abstraction has 500 states and 573 transitions.
[2020-11-24 18:29:45,508 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 500 states and 573 transitions.
[2020-11-24 18:29:45,512 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 500 to 500.
[2020-11-24 18:29:45,513 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 500 states.
[2020-11-24 18:29:45,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 500 states to 500 states and 573 transitions.
[2020-11-24 18:29:45,514 INFO  L751         BuchiCegarLoop]: Abstraction has 500 states and 573 transitions.
[2020-11-24 18:29:45,514 INFO  L631         BuchiCegarLoop]: Abstraction has 500 states and 573 transitions.
[2020-11-24 18:29:45,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 18:29:45,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 500 states and 573 transitions.
[2020-11-24 18:29:45,515 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:45,515 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:45,515 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:45,516 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:45,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND TRUE   !(b_s157 <= a_s157)
[L1565]              revert := true;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND TRUE   revert
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND TRUE   revert
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:45,518 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:45,518 INFO  L82        PathProgramCache]: Analyzing trace with hash 2015091065, now seen corresponding path program 1 times
[2020-11-24 18:29:45,519 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:45,528 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:45,597 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:45,597 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:45,598 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 18:29:45,598 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:45,598 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 18:29:45,598 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-24 18:29:45,598 INFO  L87              Difference]: Start difference. First operand 500 states and 573 transitions. cyclomatic complexity: 74 Second operand 9 states.
[2020-11-24 18:29:46,057 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:46,058 INFO  L93              Difference]: Finished difference Result 539 states and 615 transitions.
[2020-11-24 18:29:46,058 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 18:29:46,058 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 539 states and 615 transitions.
[2020-11-24 18:29:46,061 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:29:46,063 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 539 states to 523 states and 597 transitions.
[2020-11-24 18:29:46,063 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 183
[2020-11-24 18:29:46,064 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 183
[2020-11-24 18:29:46,064 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 523 states and 597 transitions.
[2020-11-24 18:29:46,065 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:46,065 INFO  L728         BuchiCegarLoop]: Abstraction has 523 states and 597 transitions.
[2020-11-24 18:29:46,065 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 523 states and 597 transitions.
[2020-11-24 18:29:46,071 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 523 to 498.
[2020-11-24 18:29:46,071 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 498 states.
[2020-11-24 18:29:46,072 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 498 states to 498 states and 570 transitions.
[2020-11-24 18:29:46,072 INFO  L751         BuchiCegarLoop]: Abstraction has 498 states and 570 transitions.
[2020-11-24 18:29:46,072 INFO  L631         BuchiCegarLoop]: Abstraction has 498 states and 570 transitions.
[2020-11-24 18:29:46,072 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 18:29:46,072 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 498 states and 570 transitions.
[2020-11-24 18:29:46,073 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:46,074 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:46,074 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:46,074 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:46,075 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND TRUE   revert
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND TRUE   revert
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:46,077 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:46,077 INFO  L82        PathProgramCache]: Analyzing trace with hash -1282517591, now seen corresponding path program 1 times
[2020-11-24 18:29:46,078 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:46,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:46,115 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:46,115 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:46,115 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 18:29:46,116 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:46,116 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 18:29:46,116 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-24 18:29:46,116 INFO  L87              Difference]: Start difference. First operand 498 states and 570 transitions. cyclomatic complexity: 73 Second operand 5 states.
[2020-11-24 18:29:46,142 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:46,143 INFO  L93              Difference]: Finished difference Result 509 states and 563 transitions.
[2020-11-24 18:29:46,143 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 18:29:46,143 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 509 states and 563 transitions.
[2020-11-24 18:29:46,144 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:29:46,146 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 509 states to 509 states and 563 transitions.
[2020-11-24 18:29:46,146 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 169
[2020-11-24 18:29:46,146 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 169
[2020-11-24 18:29:46,147 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 509 states and 563 transitions.
[2020-11-24 18:29:46,147 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:46,147 INFO  L728         BuchiCegarLoop]: Abstraction has 509 states and 563 transitions.
[2020-11-24 18:29:46,148 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 509 states and 563 transitions.
[2020-11-24 18:29:46,151 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 509 to 498.
[2020-11-24 18:29:46,151 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 498 states.
[2020-11-24 18:29:46,152 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 498 states to 498 states and 552 transitions.
[2020-11-24 18:29:46,152 INFO  L751         BuchiCegarLoop]: Abstraction has 498 states and 552 transitions.
[2020-11-24 18:29:46,152 INFO  L631         BuchiCegarLoop]: Abstraction has 498 states and 552 transitions.
[2020-11-24 18:29:46,152 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 18:29:46,152 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 498 states and 552 transitions.
[2020-11-24 18:29:46,153 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:46,153 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:46,153 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:46,154 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:46,154 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND TRUE   !(c_s130 >= a_s130)
[L1542]              revert := true;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND TRUE   revert
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND TRUE   revert
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:46,156 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:46,156 INFO  L82        PathProgramCache]: Analyzing trace with hash -1068527683, now seen corresponding path program 1 times
[2020-11-24 18:29:46,157 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:46,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:46,284 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:46,284 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:46,284 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 18:29:46,284 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:46,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 18:29:46,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=180, Unknown=0, NotChecked=0, Total=210
[2020-11-24 18:29:46,285 INFO  L87              Difference]: Start difference. First operand 498 states and 552 transitions. cyclomatic complexity: 55 Second operand 15 states.
[2020-11-24 18:29:46,857 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:46,857 INFO  L93              Difference]: Finished difference Result 507 states and 560 transitions.
[2020-11-24 18:29:46,857 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 18:29:46,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 507 states and 560 transitions.
[2020-11-24 18:29:46,859 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:29:46,861 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 507 states to 491 states and 542 transitions.
[2020-11-24 18:29:46,861 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 151
[2020-11-24 18:29:46,861 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 151
[2020-11-24 18:29:46,861 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 491 states and 542 transitions.
[2020-11-24 18:29:46,862 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:46,862 INFO  L728         BuchiCegarLoop]: Abstraction has 491 states and 542 transitions.
[2020-11-24 18:29:46,862 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 491 states and 542 transitions.
[2020-11-24 18:29:46,865 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 491 to 484.
[2020-11-24 18:29:46,865 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 484 states.
[2020-11-24 18:29:46,866 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 484 states to 484 states and 535 transitions.
[2020-11-24 18:29:46,866 INFO  L751         BuchiCegarLoop]: Abstraction has 484 states and 535 transitions.
[2020-11-24 18:29:46,866 INFO  L631         BuchiCegarLoop]: Abstraction has 484 states and 535 transitions.
[2020-11-24 18:29:46,866 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 18:29:46,866 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 484 states and 535 transitions.
[2020-11-24 18:29:46,867 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:46,867 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:46,867 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:46,868 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:46,868 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND TRUE   !(node_s586 != null)
[L1713]              revert := true;
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:46,870 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:46,870 INFO  L82        PathProgramCache]: Analyzing trace with hash -1481957812, now seen corresponding path program 1 times
[2020-11-24 18:29:46,871 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:46,878 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:46,922 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 18:29:46,922 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:46,922 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 18:29:46,923 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:46,923 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 18:29:46,923 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 18:29:46,923 INFO  L87              Difference]: Start difference. First operand 484 states and 535 transitions. cyclomatic complexity: 52 Second operand 6 states.
[2020-11-24 18:29:46,932 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:46,932 INFO  L93              Difference]: Finished difference Result 494 states and 544 transitions.
[2020-11-24 18:29:46,932 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 18:29:46,932 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 494 states and 544 transitions.
[2020-11-24 18:29:46,933 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:46,935 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 494 states to 483 states and 533 transitions.
[2020-11-24 18:29:46,935 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 143
[2020-11-24 18:29:46,935 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 143
[2020-11-24 18:29:46,935 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 483 states and 533 transitions.
[2020-11-24 18:29:46,936 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:46,936 INFO  L728         BuchiCegarLoop]: Abstraction has 483 states and 533 transitions.
[2020-11-24 18:29:46,936 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 483 states and 533 transitions.
[2020-11-24 18:29:46,939 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 483 to 483.
[2020-11-24 18:29:46,939 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 483 states.
[2020-11-24 18:29:46,940 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 483 states to 483 states and 533 transitions.
[2020-11-24 18:29:46,940 INFO  L751         BuchiCegarLoop]: Abstraction has 483 states and 533 transitions.
[2020-11-24 18:29:46,940 INFO  L631         BuchiCegarLoop]: Abstraction has 483 states and 533 transitions.
[2020-11-24 18:29:46,940 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 18:29:46,940 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 483 states and 533 transitions.
[2020-11-24 18:29:46,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:46,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:46,941 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:46,941 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:46,941 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L1721]  COND TRUE   __tmp__DType[this] == AddressChain
[L1722]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1722]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1723]  COND FALSE  !(revert)
[L1729]  COND TRUE   !__var_7
[L1730]              revert := true;
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:46,944 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:46,944 INFO  L82        PathProgramCache]: Analyzing trace with hash 268609799, now seen corresponding path program 1 times
[2020-11-24 18:29:46,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:46,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:46,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-24 18:29:46,970 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:46,970 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 18:29:46,970 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:46,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 18:29:46,971 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 18:29:46,971 INFO  L87              Difference]: Start difference. First operand 483 states and 533 transitions. cyclomatic complexity: 51 Second operand 4 states.
[2020-11-24 18:29:46,974 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:46,974 INFO  L93              Difference]: Finished difference Result 492 states and 547 transitions.
[2020-11-24 18:29:46,975 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 18:29:46,975 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 492 states and 547 transitions.
[2020-11-24 18:29:46,976 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:46,977 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 492 states to 492 states and 547 transitions.
[2020-11-24 18:29:46,978 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 145
[2020-11-24 18:29:46,978 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 145
[2020-11-24 18:29:46,978 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 492 states and 547 transitions.
[2020-11-24 18:29:46,978 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:46,978 INFO  L728         BuchiCegarLoop]: Abstraction has 492 states and 547 transitions.
[2020-11-24 18:29:46,979 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 492 states and 547 transitions.
[2020-11-24 18:29:46,981 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 492 to 490.
[2020-11-24 18:29:46,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 490 states.
[2020-11-24 18:29:46,982 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 490 states to 490 states and 545 transitions.
[2020-11-24 18:29:46,982 INFO  L751         BuchiCegarLoop]: Abstraction has 490 states and 545 transitions.
[2020-11-24 18:29:46,982 INFO  L631         BuchiCegarLoop]: Abstraction has 490 states and 545 transitions.
[2020-11-24 18:29:46,982 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 18:29:46,982 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 490 states and 545 transitions.
[2020-11-24 18:29:46,983 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:46,983 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:46,983 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:46,984 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:46,984 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L1721]  COND TRUE   __tmp__DType[this] == AddressChain
[L1722]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1722]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1723]  COND FALSE  !(revert)
[L1729]  COND TRUE   !__var_7
[L1730]              revert := true;
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:46,986 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:46,986 INFO  L82        PathProgramCache]: Analyzing trace with hash -1419898799, now seen corresponding path program 1 times
[2020-11-24 18:29:46,987 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:46,994 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:47,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-24 18:29:47,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:47,020 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 18:29:47,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:47,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 18:29:47,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 18:29:47,020 INFO  L87              Difference]: Start difference. First operand 490 states and 545 transitions. cyclomatic complexity: 56 Second operand 4 states.
[2020-11-24 18:29:47,041 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:47,041 INFO  L93              Difference]: Finished difference Result 519 states and 579 transitions.
[2020-11-24 18:29:47,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 18:29:47,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 519 states and 579 transitions.
[2020-11-24 18:29:47,042 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:47,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 519 states to 483 states and 535 transitions.
[2020-11-24 18:29:47,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 143
[2020-11-24 18:29:47,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 143
[2020-11-24 18:29:47,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 483 states and 535 transitions.
[2020-11-24 18:29:47,045 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:47,045 INFO  L728         BuchiCegarLoop]: Abstraction has 483 states and 535 transitions.
[2020-11-24 18:29:47,045 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 483 states and 535 transitions.
[2020-11-24 18:29:47,049 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 483 to 483.
[2020-11-24 18:29:47,049 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 483 states.
[2020-11-24 18:29:47,049 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 483 states to 483 states and 535 transitions.
[2020-11-24 18:29:47,049 INFO  L751         BuchiCegarLoop]: Abstraction has 483 states and 535 transitions.
[2020-11-24 18:29:47,049 INFO  L631         BuchiCegarLoop]: Abstraction has 483 states and 535 transitions.
[2020-11-24 18:29:47,049 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 18:29:47,049 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 483 states and 535 transitions.
[2020-11-24 18:29:47,050 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:47,050 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:47,050 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:47,051 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:47,051 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND TRUE   !__var_7
[L1730]              revert := true;
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:47,054 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:47,054 INFO  L82        PathProgramCache]: Analyzing trace with hash -1216224308, now seen corresponding path program 1 times
[2020-11-24 18:29:47,056 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:47,067 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:47,109 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 18:29:47,109 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:47,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 18:29:47,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:47,110 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:29:47,110 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:29:47,110 INFO  L87              Difference]: Start difference. First operand 483 states and 535 transitions. cyclomatic complexity: 53 Second operand 7 states.
[2020-11-24 18:29:47,283 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:47,283 INFO  L93              Difference]: Finished difference Result 581 states and 662 transitions.
[2020-11-24 18:29:47,283 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 18:29:47,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 581 states and 662 transitions.
[2020-11-24 18:29:47,285 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 2
[2020-11-24 18:29:47,286 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 581 states to 581 states and 662 transitions.
[2020-11-24 18:29:47,286 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 172
[2020-11-24 18:29:47,287 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 172
[2020-11-24 18:29:47,287 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 581 states and 662 transitions.
[2020-11-24 18:29:47,287 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:47,287 INFO  L728         BuchiCegarLoop]: Abstraction has 581 states and 662 transitions.
[2020-11-24 18:29:47,288 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 581 states and 662 transitions.
[2020-11-24 18:29:47,293 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 581 to 518.
[2020-11-24 18:29:47,293 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 518 states.
[2020-11-24 18:29:47,294 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 518 states to 518 states and 580 transitions.
[2020-11-24 18:29:47,294 INFO  L751         BuchiCegarLoop]: Abstraction has 518 states and 580 transitions.
[2020-11-24 18:29:47,294 INFO  L631         BuchiCegarLoop]: Abstraction has 518 states and 580 transitions.
[2020-11-24 18:29:47,294 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 18:29:47,294 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 518 states and 580 transitions.
[2020-11-24 18:29:47,295 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:47,295 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:47,295 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:47,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:47,295 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND FALSE  !(__exception)
[L784]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2310]  COND TRUE   DType[this] == DkargoToken
[L2311]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1895]  COND TRUE   DType[this] == DkargoToken
[L1896]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2124]              __var_16 := null;
[L2125]  COND FALSE  !(!(sender_s956 != null))
[L2129]              __var_17 := null;
[L2130]  COND FALSE  !(!(recipient_s956 != null))
[L2134]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1576]  COND FALSE  !(!(b_s157 <= a_s157))
[L1580]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1581]              __ret_0_ := c_s157;
[L2134]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2135]  COND FALSE  !(revert)
[L2138]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L2139]              _balances_ERC20[this][sender_s956] := __var_18;
[L2140]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L2141]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L1552]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1553]  COND FALSE  !(!(c_s130 >= a_s130))
[L1557]              __ret_0_ := c_s130;
[L2141]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L2142]  COND FALSE  !(revert)
[L2145]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L2146]              _balances_ERC20[this][recipient_s956] := __var_19;
[L2147]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L2148]              assert { :EventEmitted "Transfer_ERC20" } true;
[L1896]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1897]  COND FALSE  !(revert)
[L1913]              __ret_0_ := true;
[L2311]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2312]  COND FALSE  !(revert)
[L2318]              ret_s1257 := ret_s1257;
[L2319]  COND TRUE   DType[this] == DkargoToken
[L2320]  CALL        call __var_24 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1604]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L1605]              __ret_0_ := true;
[L2320]  RET         call __var_24 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2321]  COND FALSE  !(revert)
[L2327]  COND TRUE   DType[this] == DkargoToken
[L2328]  CALL        call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2031]              __ret_0_ := _balances_ERC20[this][account_s841];
[L2328]  RET         call __var_25 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2329]  COND FALSE  !(revert)
[L2335]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2345]  COND TRUE   DType[this] == DkargoToken
[L2346]  CALL        call __var_26 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1604]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L1605]              __ret_0_ := true;
[L2346]  RET         call __var_26 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2347]  COND FALSE  !(revert)
[L2353]  COND TRUE   DType[this] == DkargoToken
[L2354]  CALL        call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2031]              __ret_0_ := _balances_ERC20[this][account_s841];
[L2354]  RET         call __var_27 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2355]  COND FALSE  !(revert)
[L2361]  COND FALSE  !(!__var_26 && __var_27 > 0)
[L2371]              __ret_0_ := ret_s1257;
[L784]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L785]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == true && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L2]                 revert := revert_hold;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:47,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:47,297 INFO  L82        PathProgramCache]: Analyzing trace with hash 1554107905, now seen corresponding path program 1 times
[2020-11-24 18:29:47,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:47,325 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:47,764 INFO  L134       CoverageAnalysis]: Checked inductivity of 7 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-24 18:29:47,764 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:47,764 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-24 18:29:47,765 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:47,765 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-24 18:29:47,765 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=372, Unknown=0, NotChecked=0, Total=420
[2020-11-24 18:29:47,765 INFO  L87              Difference]: Start difference. First operand 518 states and 580 transitions. cyclomatic complexity: 63 Second operand 21 states.
[2020-11-24 18:29:48,654 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:48,655 INFO  L93              Difference]: Finished difference Result 517 states and 578 transitions.
[2020-11-24 18:29:48,655 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-24 18:29:48,655 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 517 states and 578 transitions.
[2020-11-24 18:29:48,656 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,657 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 517 states to 346 states and 385 transitions.
[2020-11-24 18:29:48,657 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 130
[2020-11-24 18:29:48,657 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 130
[2020-11-24 18:29:48,657 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 346 states and 385 transitions.
[2020-11-24 18:29:48,658 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:48,658 INFO  L728         BuchiCegarLoop]: Abstraction has 346 states and 385 transitions.
[2020-11-24 18:29:48,659 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 346 states and 385 transitions.
[2020-11-24 18:29:48,663 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 346 to 346.
[2020-11-24 18:29:48,663 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 346 states.
[2020-11-24 18:29:48,663 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 346 states to 346 states and 385 transitions.
[2020-11-24 18:29:48,663 INFO  L751         BuchiCegarLoop]: Abstraction has 346 states and 385 transitions.
[2020-11-24 18:29:48,664 INFO  L631         BuchiCegarLoop]: Abstraction has 346 states and 385 transitions.
[2020-11-24 18:29:48,664 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 18:29:48,664 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 346 states and 385 transitions.
[2020-11-24 18:29:48,664 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,665 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:48,665 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:48,666 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:48,666 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND FALSE  !(!__var_26 && __var_27 > 0)
[L2298]              __ret_0_ := ret_s1257;
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:48,669 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:48,670 INFO  L82        PathProgramCache]: Analyzing trace with hash 58023647, now seen corresponding path program 1 times
[2020-11-24 18:29:48,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:48,679 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:48,700 INFO  L134       CoverageAnalysis]: Checked inductivity of 7 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 7 trivial. 0 not checked.
[2020-11-24 18:29:48,700 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:48,700 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 18:29:48,700 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:48,700 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 18:29:48,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 18:29:48,700 INFO  L87              Difference]: Start difference. First operand 346 states and 385 transitions. cyclomatic complexity: 40 Second operand 5 states.
[2020-11-24 18:29:48,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:48,725 INFO  L93              Difference]: Finished difference Result 350 states and 388 transitions.
[2020-11-24 18:29:48,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 18:29:48,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 350 states and 388 transitions.
[2020-11-24 18:29:48,726 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,726 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 350 states to 338 states and 375 transitions.
[2020-11-24 18:29:48,727 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 122
[2020-11-24 18:29:48,727 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 122
[2020-11-24 18:29:48,727 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 338 states and 375 transitions.
[2020-11-24 18:29:48,727 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:48,727 INFO  L728         BuchiCegarLoop]: Abstraction has 338 states and 375 transitions.
[2020-11-24 18:29:48,727 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 338 states and 375 transitions.
[2020-11-24 18:29:48,729 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 338 to 338.
[2020-11-24 18:29:48,730 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 338 states.
[2020-11-24 18:29:48,730 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 338 states to 338 states and 375 transitions.
[2020-11-24 18:29:48,730 INFO  L751         BuchiCegarLoop]: Abstraction has 338 states and 375 transitions.
[2020-11-24 18:29:48,730 INFO  L631         BuchiCegarLoop]: Abstraction has 338 states and 375 transitions.
[2020-11-24 18:29:48,730 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 18:29:48,730 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 338 states and 375 transitions.
[2020-11-24 18:29:48,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,731 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:48,731 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:48,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:48,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND TRUE   !(node_s455 != null)
[L1622]              revert := true;
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:48,733 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:48,733 INFO  L82        PathProgramCache]: Analyzing trace with hash 1003854584, now seen corresponding path program 1 times
[2020-11-24 18:29:48,734 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:48,741 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:48,764 INFO  L134       CoverageAnalysis]: Checked inductivity of 7 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 7 trivial. 0 not checked.
[2020-11-24 18:29:48,765 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:48,765 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 18:29:48,765 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:48,765 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:29:48,765 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:29:48,766 INFO  L87              Difference]: Start difference. First operand 338 states and 375 transitions. cyclomatic complexity: 38 Second operand 7 states.
[2020-11-24 18:29:48,775 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:48,775 INFO  L93              Difference]: Finished difference Result 348 states and 384 transitions.
[2020-11-24 18:29:48,775 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 18:29:48,775 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 348 states and 384 transitions.
[2020-11-24 18:29:48,791 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 348 states to 337 states and 373 transitions.
[2020-11-24 18:29:48,792 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 121
[2020-11-24 18:29:48,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 121
[2020-11-24 18:29:48,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 337 states and 373 transitions.
[2020-11-24 18:29:48,793 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:48,793 INFO  L728         BuchiCegarLoop]: Abstraction has 337 states and 373 transitions.
[2020-11-24 18:29:48,794 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 337 states and 373 transitions.
[2020-11-24 18:29:48,797 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 337 to 337.
[2020-11-24 18:29:48,797 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 337 states.
[2020-11-24 18:29:48,797 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 337 states to 337 states and 373 transitions.
[2020-11-24 18:29:48,798 INFO  L751         BuchiCegarLoop]: Abstraction has 337 states and 373 transitions.
[2020-11-24 18:29:48,798 INFO  L631         BuchiCegarLoop]: Abstraction has 337 states and 373 transitions.
[2020-11-24 18:29:48,798 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 18:29:48,798 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 337 states and 373 transitions.
[2020-11-24 18:29:48,799 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,799 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:48,799 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:48,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:48,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND FALSE  !(!__var_7)
[L1733]              tempPrev_s586 := __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1734]              tempNext_s586 := __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1735]  COND TRUE   __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586
[L1736]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := tempNext_s586;
[L1738]  COND FALSE  !(__tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586)
[L1741]              __var_8 := null;
[L1742]  COND FALSE  !(tempPrev_s586 != null)
[L1747]              __var_10 := null;
[L1748]  COND FALSE  !(tempNext_s586 != null)
[L1753]  CALL        call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1564]  COND TRUE   !(b_s157 <= a_s157)
[L1565]              revert := true;
[L1753]  RET         call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1754]  COND TRUE   revert
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:48,806 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:48,807 INFO  L82        PathProgramCache]: Analyzing trace with hash 1688435081, now seen corresponding path program 1 times
[2020-11-24 18:29:48,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:48,817 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:48,857 INFO  L134       CoverageAnalysis]: Checked inductivity of 7 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 18:29:48,857 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:48,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-11-24 18:29:48,858 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:48,858 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 18:29:48,858 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 18:29:48,858 INFO  L87              Difference]: Start difference. First operand 337 states and 373 transitions. cyclomatic complexity: 37 Second operand 6 states.
[2020-11-24 18:29:48,933 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:48,933 INFO  L93              Difference]: Finished difference Result 415 states and 469 transitions.
[2020-11-24 18:29:48,933 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 18:29:48,933 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 415 states and 469 transitions.
[2020-11-24 18:29:48,934 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,936 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 415 states to 415 states and 469 transitions.
[2020-11-24 18:29:48,936 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 143
[2020-11-24 18:29:48,936 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 143
[2020-11-24 18:29:48,936 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 415 states and 469 transitions.
[2020-11-24 18:29:48,937 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:48,937 INFO  L728         BuchiCegarLoop]: Abstraction has 415 states and 469 transitions.
[2020-11-24 18:29:48,937 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 415 states and 469 transitions.
[2020-11-24 18:29:48,941 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 415 to 337.
[2020-11-24 18:29:48,941 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 337 states.
[2020-11-24 18:29:48,941 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 337 states to 337 states and 373 transitions.
[2020-11-24 18:29:48,942 INFO  L751         BuchiCegarLoop]: Abstraction has 337 states and 373 transitions.
[2020-11-24 18:29:48,942 INFO  L631         BuchiCegarLoop]: Abstraction has 337 states and 373 transitions.
[2020-11-24 18:29:48,942 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 18:29:48,942 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 337 states and 373 transitions.
[2020-11-24 18:29:48,942 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:48,942 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:48,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:48,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:48,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND FALSE  !(!__var_7)
[L1733]              tempPrev_s586 := __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1734]              tempNext_s586 := __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1735]  COND TRUE   __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586
[L1736]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := tempNext_s586;
[L1738]  COND TRUE   __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586
[L1739]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := tempPrev_s586;
[L1741]              __var_8 := null;
[L1742]  COND FALSE  !(tempPrev_s586 != null)
[L1747]              __var_10 := null;
[L1748]  COND FALSE  !(tempNext_s586 != null)
[L1753]  CALL        call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1564]  COND TRUE   !(b_s157 <= a_s157)
[L1565]              revert := true;
[L1753]  RET         call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1754]  COND TRUE   revert
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:48,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:48,946 INFO  L82        PathProgramCache]: Analyzing trace with hash 993535125, now seen corresponding path program 1 times
[2020-11-24 18:29:48,947 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:48,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,002 INFO  L134       CoverageAnalysis]: Checked inductivity of 7 backedges. 2 proven. 3 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-24 18:29:49,002 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:49,003 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 18:29:49,003 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,003 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:29:49,003 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:29:49,003 INFO  L87              Difference]: Start difference. First operand 337 states and 373 transitions. cyclomatic complexity: 37 Second operand 7 states.
[2020-11-24 18:29:49,071 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,071 INFO  L93              Difference]: Finished difference Result 389 states and 434 transitions.
[2020-11-24 18:29:49,071 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 18:29:49,071 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 389 states and 434 transitions.
[2020-11-24 18:29:49,072 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,073 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 389 states to 389 states and 434 transitions.
[2020-11-24 18:29:49,073 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 135
[2020-11-24 18:29:49,073 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 135
[2020-11-24 18:29:49,073 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 389 states and 434 transitions.
[2020-11-24 18:29:49,074 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,074 INFO  L728         BuchiCegarLoop]: Abstraction has 389 states and 434 transitions.
[2020-11-24 18:29:49,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 389 states and 434 transitions.
[2020-11-24 18:29:49,076 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 389 to 342.
[2020-11-24 18:29:49,076 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 342 states.
[2020-11-24 18:29:49,076 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 342 states to 342 states and 379 transitions.
[2020-11-24 18:29:49,077 INFO  L751         BuchiCegarLoop]: Abstraction has 342 states and 379 transitions.
[2020-11-24 18:29:49,077 INFO  L631         BuchiCegarLoop]: Abstraction has 342 states and 379 transitions.
[2020-11-24 18:29:49,077 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-24 18:29:49,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 342 states and 379 transitions.
[2020-11-24 18:29:49,077 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,077 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,077 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND FALSE  !(!(node_s455 != null))
[L1625]  COND FALSE  !(__tmp__DType[this] == DkargoToken)
[L1630]  COND TRUE   __tmp__DType[this] == AddressChain
[L1631]  CALL        call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1631]  RET         call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1632]  COND FALSE  !(revert)
[L1638]  COND TRUE   !!__var_4
[L1639]              revert := true;
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,080 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,080 INFO  L82        PathProgramCache]: Analyzing trace with hash 1208462729, now seen corresponding path program 1 times
[2020-11-24 18:29:49,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,106 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-24 18:29:49,107 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:49,107 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-24 18:29:49,107 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,107 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 18:29:49,107 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 18:29:49,107 INFO  L87              Difference]: Start difference. First operand 342 states and 379 transitions. cyclomatic complexity: 38 Second operand 4 states.
[2020-11-24 18:29:49,109 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,109 INFO  L93              Difference]: Finished difference Result 349 states and 386 transitions.
[2020-11-24 18:29:49,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 18:29:49,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 349 states and 386 transitions.
[2020-11-24 18:29:49,110 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,111 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 349 states to 342 states and 377 transitions.
[2020-11-24 18:29:49,111 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 117
[2020-11-24 18:29:49,111 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 117
[2020-11-24 18:29:49,111 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 342 states and 377 transitions.
[2020-11-24 18:29:49,112 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,112 INFO  L728         BuchiCegarLoop]: Abstraction has 342 states and 377 transitions.
[2020-11-24 18:29:49,112 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 342 states and 377 transitions.
[2020-11-24 18:29:49,113 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 342 to 342.
[2020-11-24 18:29:49,113 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 342 states.
[2020-11-24 18:29:49,114 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 342 states to 342 states and 377 transitions.
[2020-11-24 18:29:49,114 INFO  L751         BuchiCegarLoop]: Abstraction has 342 states and 377 transitions.
[2020-11-24 18:29:49,114 INFO  L631         BuchiCegarLoop]: Abstraction has 342 states and 377 transitions.
[2020-11-24 18:29:49,114 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-24 18:29:49,114 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 342 states and 377 transitions.
[2020-11-24 18:29:49,114 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,115 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,115 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,115 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,115 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND FALSE  !(!(node_s455 != null))
[L1625]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1626]  CALL        call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1626]  RET         call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1627]  COND FALSE  !(revert)
[L1638]  COND TRUE   !!__var_4
[L1639]              revert := true;
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,117 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,117 INFO  L82        PathProgramCache]: Analyzing trace with hash 349026651, now seen corresponding path program 1 times
[2020-11-24 18:29:49,118 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,161 INFO  L134       CoverageAnalysis]: Checked inductivity of 13 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-11-24 18:29:49,161 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:49,161 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 18:29:49,161 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,162 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 18:29:49,162 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 18:29:49,162 INFO  L87              Difference]: Start difference. First operand 342 states and 377 transitions. cyclomatic complexity: 36 Second operand 7 states.
[2020-11-24 18:29:49,190 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,190 INFO  L93              Difference]: Finished difference Result 355 states and 391 transitions.
[2020-11-24 18:29:49,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 18:29:49,190 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 355 states and 391 transitions.
[2020-11-24 18:29:49,191 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,192 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 355 states to 333 states and 366 transitions.
[2020-11-24 18:29:49,192 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 117
[2020-11-24 18:29:49,192 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 117
[2020-11-24 18:29:49,192 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 333 states and 366 transitions.
[2020-11-24 18:29:49,192 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,192 INFO  L728         BuchiCegarLoop]: Abstraction has 333 states and 366 transitions.
[2020-11-24 18:29:49,193 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 333 states and 366 transitions.
[2020-11-24 18:29:49,194 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 333 to 333.
[2020-11-24 18:29:49,194 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 333 states.
[2020-11-24 18:29:49,195 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 333 states to 333 states and 366 transitions.
[2020-11-24 18:29:49,195 INFO  L751         BuchiCegarLoop]: Abstraction has 333 states and 366 transitions.
[2020-11-24 18:29:49,195 INFO  L631         BuchiCegarLoop]: Abstraction has 333 states and 366 transitions.
[2020-11-24 18:29:49,195 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-24 18:29:49,195 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 333 states and 366 transitions.
[2020-11-24 18:29:49,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,195 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,195 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,196 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,196 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND TRUE   !__var_7
[L1730]              revert := true;
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,198 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,198 INFO  L82        PathProgramCache]: Analyzing trace with hash 268011138, now seen corresponding path program 1 times
[2020-11-24 18:29:49,198 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,205 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,253 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 18:29:49,254 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:49,254 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-24 18:29:49,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,254 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 18:29:49,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-11-24 18:29:49,254 INFO  L87              Difference]: Start difference. First operand 333 states and 366 transitions. cyclomatic complexity: 34 Second operand 9 states.
[2020-11-24 18:29:49,358 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,358 INFO  L93              Difference]: Finished difference Result 413 states and 465 transitions.
[2020-11-24 18:29:49,358 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 18:29:49,358 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 413 states and 465 transitions.
[2020-11-24 18:29:49,359 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,360 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 413 states to 410 states and 462 transitions.
[2020-11-24 18:29:49,360 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 138
[2020-11-24 18:29:49,360 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 138
[2020-11-24 18:29:49,360 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 410 states and 462 transitions.
[2020-11-24 18:29:49,360 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,360 INFO  L728         BuchiCegarLoop]: Abstraction has 410 states and 462 transitions.
[2020-11-24 18:29:49,361 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 410 states and 462 transitions.
[2020-11-24 18:29:49,363 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 410 to 332.
[2020-11-24 18:29:49,363 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 332 states.
[2020-11-24 18:29:49,363 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 332 states to 332 states and 364 transitions.
[2020-11-24 18:29:49,363 INFO  L751         BuchiCegarLoop]: Abstraction has 332 states and 364 transitions.
[2020-11-24 18:29:49,363 INFO  L631         BuchiCegarLoop]: Abstraction has 332 states and 364 transitions.
[2020-11-24 18:29:49,363 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-24 18:29:49,363 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 332 states and 364 transitions.
[2020-11-24 18:29:49,364 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,364 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,364 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,364 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,364 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND FALSE  !(!(node_s455 != null))
[L1625]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1626]  CALL        call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1626]  RET         call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1627]  COND FALSE  !(revert)
[L1638]  COND TRUE   !!__var_4
[L1639]              revert := true;
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,366 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,366 INFO  L82        PathProgramCache]: Analyzing trace with hash -427664751, now seen corresponding path program 2 times
[2020-11-24 18:29:49,367 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,434 INFO  L134       CoverageAnalysis]: Checked inductivity of 15 backedges. 2 proven. 7 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-11-24 18:29:49,434 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:49,434 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-24 18:29:49,435 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,435 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 18:29:49,435 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-24 18:29:49,435 INFO  L87              Difference]: Start difference. First operand 332 states and 364 transitions. cyclomatic complexity: 33 Second operand 9 states.
[2020-11-24 18:29:49,561 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,562 INFO  L93              Difference]: Finished difference Result 390 states and 433 transitions.
[2020-11-24 18:29:49,562 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-24 18:29:49,562 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 390 states and 433 transitions.
[2020-11-24 18:29:49,563 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,564 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 390 states to 386 states and 429 transitions.
[2020-11-24 18:29:49,564 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 133
[2020-11-24 18:29:49,564 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 133
[2020-11-24 18:29:49,564 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 386 states and 429 transitions.
[2020-11-24 18:29:49,565 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,565 INFO  L728         BuchiCegarLoop]: Abstraction has 386 states and 429 transitions.
[2020-11-24 18:29:49,565 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 386 states and 429 transitions.
[2020-11-24 18:29:49,567 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 386 to 358.
[2020-11-24 18:29:49,568 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 358 states.
[2020-11-24 18:29:49,568 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 358 states to 358 states and 395 transitions.
[2020-11-24 18:29:49,568 INFO  L751         BuchiCegarLoop]: Abstraction has 358 states and 395 transitions.
[2020-11-24 18:29:49,568 INFO  L631         BuchiCegarLoop]: Abstraction has 358 states and 395 transitions.
[2020-11-24 18:29:49,568 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-24 18:29:49,568 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 358 states and 395 transitions.
[2020-11-24 18:29:49,569 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,569 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,569 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,570 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,570 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND FALSE  !(!(node_s455 != null))
[L1625]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1626]  CALL        call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1626]  RET         call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1627]  COND FALSE  !(revert)
[L1638]  COND TRUE   !!__var_4
[L1639]              revert := true;
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,572 INFO  L82        PathProgramCache]: Analyzing trace with hash -11282213, now seen corresponding path program 1 times
[2020-11-24 18:29:49,573 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,585 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,654 INFO  L134       CoverageAnalysis]: Checked inductivity of 21 backedges. 4 proven. 2 refuted. 0 times theorem prover too weak. 15 trivial. 0 not checked.
[2020-11-24 18:29:49,654 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:49,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-24 18:29:49,655 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,655 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 18:29:49,655 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-11-24 18:29:49,655 INFO  L87              Difference]: Start difference. First operand 358 states and 395 transitions. cyclomatic complexity: 38 Second operand 9 states.
[2020-11-24 18:29:49,737 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,737 INFO  L93              Difference]: Finished difference Result 414 states and 465 transitions.
[2020-11-24 18:29:49,737 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-24 18:29:49,737 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 414 states and 465 transitions.
[2020-11-24 18:29:49,738 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,739 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 414 states to 411 states and 462 transitions.
[2020-11-24 18:29:49,739 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 142
[2020-11-24 18:29:49,739 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 142
[2020-11-24 18:29:49,739 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 411 states and 462 transitions.
[2020-11-24 18:29:49,739 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,739 INFO  L728         BuchiCegarLoop]: Abstraction has 411 states and 462 transitions.
[2020-11-24 18:29:49,740 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 411 states and 462 transitions.
[2020-11-24 18:29:49,742 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 411 to 357.
[2020-11-24 18:29:49,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 357 states.
[2020-11-24 18:29:49,742 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 357 states to 357 states and 393 transitions.
[2020-11-24 18:29:49,742 INFO  L751         BuchiCegarLoop]: Abstraction has 357 states and 393 transitions.
[2020-11-24 18:29:49,742 INFO  L631         BuchiCegarLoop]: Abstraction has 357 states and 393 transitions.
[2020-11-24 18:29:49,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-24 18:29:49,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 357 states and 393 transitions.
[2020-11-24 18:29:49,743 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,743 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,743 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,743 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,744 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND FALSE  !(!__var_7)
[L1733]              tempPrev_s586 := __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1734]              tempNext_s586 := __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1735]  COND FALSE  !(__tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586)
[L1738]  COND FALSE  !(__tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586)
[L1741]              __var_8 := null;
[L1742]  COND FALSE  !(tempPrev_s586 != null)
[L1747]              __var_10 := null;
[L1748]  COND FALSE  !(tempNext_s586 != null)
[L1753]  CALL        call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1564]  COND TRUE   !(b_s157 <= a_s157)
[L1565]              revert := true;
[L1753]  RET         call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1754]  COND TRUE   revert
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,745 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,745 INFO  L82        PathProgramCache]: Analyzing trace with hash 1971397845, now seen corresponding path program 1 times
[2020-11-24 18:29:49,746 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,752 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,773 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 18:29:49,773 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:49,773 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 18:29:49,773 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,773 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 18:29:49,773 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 18:29:49,774 INFO  L87              Difference]: Start difference. First operand 357 states and 393 transitions. cyclomatic complexity: 37 Second operand 4 states.
[2020-11-24 18:29:49,782 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,782 INFO  L93              Difference]: Finished difference Result 358 states and 393 transitions.
[2020-11-24 18:29:49,782 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 18:29:49,782 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 358 states and 393 transitions.
[2020-11-24 18:29:49,783 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,784 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 358 states to 358 states and 393 transitions.
[2020-11-24 18:29:49,784 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 120
[2020-11-24 18:29:49,784 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 120
[2020-11-24 18:29:49,784 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 358 states and 393 transitions.
[2020-11-24 18:29:49,784 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,784 INFO  L728         BuchiCegarLoop]: Abstraction has 358 states and 393 transitions.
[2020-11-24 18:29:49,785 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 358 states and 393 transitions.
[2020-11-24 18:29:49,786 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 358 to 358.
[2020-11-24 18:29:49,786 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 358 states.
[2020-11-24 18:29:49,787 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 358 states to 358 states and 393 transitions.
[2020-11-24 18:29:49,787 INFO  L751         BuchiCegarLoop]: Abstraction has 358 states and 393 transitions.
[2020-11-24 18:29:49,787 INFO  L631         BuchiCegarLoop]: Abstraction has 358 states and 393 transitions.
[2020-11-24 18:29:49,787 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-24 18:29:49,787 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 358 states and 393 transitions.
[2020-11-24 18:29:49,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND FALSE  !(!__var_7)
[L1733]              tempPrev_s586 := __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1734]              tempNext_s586 := __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1735]  COND FALSE  !(__tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586)
[L1738]  COND TRUE   __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586
[L1739]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := tempPrev_s586;
[L1741]              __var_8 := null;
[L1742]  COND FALSE  !(tempPrev_s586 != null)
[L1747]              __var_10 := null;
[L1748]  COND FALSE  !(tempNext_s586 != null)
[L1753]  CALL        call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1564]  COND TRUE   !(b_s157 <= a_s157)
[L1565]              revert := true;
[L1753]  RET         call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1754]  COND TRUE   revert
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,790 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,790 INFO  L82        PathProgramCache]: Analyzing trace with hash 1175446217, now seen corresponding path program 1 times
[2020-11-24 18:29:49,790 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,818 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 18:29:49,818 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:49,818 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 18:29:49,818 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,818 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 18:29:49,818 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 18:29:49,818 INFO  L87              Difference]: Start difference. First operand 358 states and 393 transitions. cyclomatic complexity: 36 Second operand 4 states.
[2020-11-24 18:29:49,827 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:49,827 INFO  L93              Difference]: Finished difference Result 357 states and 391 transitions.
[2020-11-24 18:29:49,827 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 18:29:49,827 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 357 states and 391 transitions.
[2020-11-24 18:29:49,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,828 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 357 states to 357 states and 391 transitions.
[2020-11-24 18:29:49,828 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 120
[2020-11-24 18:29:49,828 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 120
[2020-11-24 18:29:49,828 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 357 states and 391 transitions.
[2020-11-24 18:29:49,829 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:49,829 INFO  L728         BuchiCegarLoop]: Abstraction has 357 states and 391 transitions.
[2020-11-24 18:29:49,829 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 357 states and 391 transitions.
[2020-11-24 18:29:49,831 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 357 to 357.
[2020-11-24 18:29:49,831 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 357 states.
[2020-11-24 18:29:49,831 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 357 states to 357 states and 391 transitions.
[2020-11-24 18:29:49,831 INFO  L751         BuchiCegarLoop]: Abstraction has 357 states and 391 transitions.
[2020-11-24 18:29:49,831 INFO  L631         BuchiCegarLoop]: Abstraction has 357 states and 391 transitions.
[2020-11-24 18:29:49,831 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-24 18:29:49,831 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 357 states and 391 transitions.
[2020-11-24 18:29:49,832 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:49,832 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:49,832 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:49,832 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:49,832 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L1590]              __ret_0_ := true;
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND FALSE  !(!__var_7)
[L1733]              tempPrev_s586 := __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1734]              tempNext_s586 := __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1735]  COND TRUE   __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586
[L1736]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := tempNext_s586;
[L1738]  COND TRUE   __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586
[L1739]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := tempPrev_s586;
[L1741]              __var_8 := null;
[L1742]  COND FALSE  !(tempPrev_s586 != null)
[L1747]              __var_10 := null;
[L1748]  COND FALSE  !(tempNext_s586 != null)
[L1753]  CALL        call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1564]  COND TRUE   !(b_s157 <= a_s157)
[L1565]              revert := true;
[L1753]  RET         call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1754]  COND TRUE   revert
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:49,834 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:49,834 INFO  L82        PathProgramCache]: Analyzing trace with hash -1308885217, now seen corresponding path program 1 times
[2020-11-24 18:29:49,835 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:49,842 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:49,891 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 18:29:49,891 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:49,891 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-24 18:29:49,891 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:49,892 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 18:29:49,892 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=103, Unknown=0, NotChecked=0, Total=132
[2020-11-24 18:29:49,892 INFO  L87              Difference]: Start difference. First operand 357 states and 391 transitions. cyclomatic complexity: 35 Second operand 12 states.
[2020-11-24 18:29:50,012 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:50,013 INFO  L93              Difference]: Finished difference Result 387 states and 424 transitions.
[2020-11-24 18:29:50,013 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-24 18:29:50,013 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 387 states and 424 transitions.
[2020-11-24 18:29:50,013 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:50,014 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 387 states to 383 states and 420 transitions.
[2020-11-24 18:29:50,014 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 130
[2020-11-24 18:29:50,014 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 130
[2020-11-24 18:29:50,014 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 383 states and 420 transitions.
[2020-11-24 18:29:50,015 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:50,015 INFO  L728         BuchiCegarLoop]: Abstraction has 383 states and 420 transitions.
[2020-11-24 18:29:50,015 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 383 states and 420 transitions.
[2020-11-24 18:29:50,017 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 383 to 357.
[2020-11-24 18:29:50,017 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 357 states.
[2020-11-24 18:29:50,017 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 357 states to 357 states and 389 transitions.
[2020-11-24 18:29:50,017 INFO  L751         BuchiCegarLoop]: Abstraction has 357 states and 389 transitions.
[2020-11-24 18:29:50,017 INFO  L631         BuchiCegarLoop]: Abstraction has 357 states and 389 transitions.
[2020-11-24 18:29:50,017 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-24 18:29:50,017 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 357 states and 389 transitions.
[2020-11-24 18:29:50,018 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:50,018 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:50,018 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:50,018 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:50,018 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND TRUE   __var_24 && __var_25 == 0
[L2263]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2264]  CALL        call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1711]              __var_6 := null;
[L1712]  COND FALSE  !(!(node_s586 != null))
[L1716]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1717]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1717]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s586);
[L1718]  COND FALSE  !(revert)
[L1729]  COND FALSE  !(!__var_7)
[L1733]              tempPrev_s586 := __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1734]              tempNext_s586 := __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s586]];
[L1735]  COND FALSE  !(__tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586)
[L1738]  COND FALSE  !(__tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s586)
[L1741]              __var_8 := null;
[L1742]  COND FALSE  !(tempPrev_s586 != null)
[L1747]              __var_10 := null;
[L1748]  COND FALSE  !(tempNext_s586 != null)
[L1753]  CALL        call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1564]  COND TRUE   !(b_s157 <= a_s157)
[L1565]              revert := true;
[L1753]  RET         call __var_12 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1, 1203488417);
[L1754]  COND TRUE   revert
[L2264]  RET         call _unlinkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2265]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:50,020 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:50,020 INFO  L82        PathProgramCache]: Analyzing trace with hash 500872587, now seen corresponding path program 1 times
[2020-11-24 18:29:50,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:50,027 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:50,068 INFO  L134       CoverageAnalysis]: Checked inductivity of 9 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 7 trivial. 0 not checked.
[2020-11-24 18:29:50,068 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 18:29:50,069 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-24 18:29:50,069 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:50,069 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-24 18:29:50,069 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-24 18:29:50,069 INFO  L87              Difference]: Start difference. First operand 357 states and 389 transitions. cyclomatic complexity: 33 Second operand 10 states.
[2020-11-24 18:29:50,192 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:50,192 INFO  L93              Difference]: Finished difference Result 427 states and 473 transitions.
[2020-11-24 18:29:50,192 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-24 18:29:50,193 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 427 states and 473 transitions.
[2020-11-24 18:29:50,193 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:50,194 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 427 states to 417 states and 462 transitions.
[2020-11-24 18:29:50,194 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 138
[2020-11-24 18:29:50,194 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 138
[2020-11-24 18:29:50,194 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 417 states and 462 transitions.
[2020-11-24 18:29:50,195 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:50,195 INFO  L728         BuchiCegarLoop]: Abstraction has 417 states and 462 transitions.
[2020-11-24 18:29:50,195 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 417 states and 462 transitions.
[2020-11-24 18:29:50,197 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 417 to 359.
[2020-11-24 18:29:50,197 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 359 states.
[2020-11-24 18:29:50,197 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 359 states to 359 states and 391 transitions.
[2020-11-24 18:29:50,197 INFO  L751         BuchiCegarLoop]: Abstraction has 359 states and 391 transitions.
[2020-11-24 18:29:50,197 INFO  L631         BuchiCegarLoop]: Abstraction has 359 states and 391 transitions.
[2020-11-24 18:29:50,197 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-24 18:29:50,197 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 359 states and 391 transitions.
[2020-11-24 18:29:50,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:50,198 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:50,198 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:50,199 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:50,199 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND FALSE  !(!(node_s455 != null))
[L1625]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1626]  CALL        call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1626]  RET         call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1627]  COND FALSE  !(revert)
[L1638]  COND FALSE  !(!!__var_4)
[L1642]  COND TRUE   __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 0
[L1643]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L1644]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L1650]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND TRUE   !(c_s130 >= a_s130)
[L1542]              revert := true;
[L1650]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L1651]  COND TRUE   revert
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:50,200 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:50,200 INFO  L82        PathProgramCache]: Analyzing trace with hash -2135076241, now seen corresponding path program 1 times
[2020-11-24 18:29:50,201 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:50,208 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 18:29:50,232 INFO  L134       CoverageAnalysis]: Checked inductivity of 25 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-11-24 18:29:50,232 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 18:29:50,232 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 18:29:50,232 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 18:29:50,232 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 18:29:50,232 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=8, Invalid=12, Unknown=0, NotChecked=0, Total=20
[2020-11-24 18:29:50,232 INFO  L87              Difference]: Start difference. First operand 359 states and 391 transitions. cyclomatic complexity: 33 Second operand 5 states.
[2020-11-24 18:29:50,240 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 18:29:50,240 INFO  L93              Difference]: Finished difference Result 360 states and 392 transitions.
[2020-11-24 18:29:50,240 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 18:29:50,240 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 360 states and 392 transitions.
[2020-11-24 18:29:50,240 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:50,241 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 360 states to 357 states and 388 transitions.
[2020-11-24 18:29:50,241 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 120
[2020-11-24 18:29:50,241 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 120
[2020-11-24 18:29:50,241 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 357 states and 388 transitions.
[2020-11-24 18:29:50,242 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 18:29:50,242 INFO  L728         BuchiCegarLoop]: Abstraction has 357 states and 388 transitions.
[2020-11-24 18:29:50,242 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 357 states and 388 transitions.
[2020-11-24 18:29:50,244 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 357 to 357.
[2020-11-24 18:29:50,244 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 357 states.
[2020-11-24 18:29:50,244 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 357 states to 357 states and 388 transitions.
[2020-11-24 18:29:50,244 INFO  L751         BuchiCegarLoop]: Abstraction has 357 states and 388 transitions.
[2020-11-24 18:29:50,244 INFO  L631         BuchiCegarLoop]: Abstraction has 357 states and 388 transitions.
[2020-11-24 18:29:50,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-24 18:29:50,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 357 states and 388 transitions.
[2020-11-24 18:29:50,245 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 1
[2020-11-24 18:29:50,245 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 18:29:50,245 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 18:29:50,245 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 18:29:50,245 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1]
Stem:
[L2]                 success_transfer_DkargoToken0 := false;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]     CALL        call main();
[L3943]              assume null == 0;
[L3944]  CALL        call this := FreshRefGenerator__success();
[L1503]              havoc newRef;
[L1504]              assume Alloc[newRef] == false;
[L1505]              Alloc[newRef] := true;
[L1506]              assume newRef != null;
[L3944]  RET         call this := FreshRefGenerator__success();
[L3945]              assume now >= 0;
[L3946]              assume DType[this] == DkargoToken;
[L3947]              assume !revert && gas >= 0;
[L3948]  CALL        call CorralChoice_DkargoToken(this);
[L3833]              havoc msgsender_MSG;
[L3834]              havoc msgvalue_MSG;
[L3835]              havoc choice;
[L3836]              havoc __ret_0_getDkargoPrefix;
[L3837]              havoc expected_s84;
[L3838]              havoc __ret_0_owner;
[L3839]              havoc __ret_0_isOwner;
[L3840]              havoc __ret_0_count;
[L3841]              havoc __ret_0_head;
[L3842]              havoc __ret_0_tail;
[L3843]              havoc node_s309;
[L3844]              havoc __ret_0_nextOf;
[L3845]              havoc node_s323;
[L3846]              havoc __ret_0_prevOf;
[L3847]              havoc node_s376;
[L3848]              havoc __ret_0_isLinked;
[L3849]              havoc infcid_s625;
[L3850]              havoc __ret_0_supportsInterface;
[L3851]              havoc to_s1257;
[L3852]              havoc value_s1257;
[L3853]              havoc __ret_0_transfer;
[L3854]              havoc spender_s1084;
[L3855]              havoc amount_s1084;
[L3856]              havoc __ret_0_approve;
[L3857]              havoc from_s1311;
[L3858]              havoc to_s1311;
[L3859]              havoc value_s1311;
[L3860]              havoc __ret_0_transferFrom;
[L3861]              havoc __ret_0_totalSupply;
[L3862]              havoc account_s841;
[L3863]              havoc __ret_0_balanceOf;
[L3864]              havoc approver_s857;
[L3865]              havoc spender_s857;
[L3866]              havoc __ret_0_allowance;
[L3867]              havoc spender_s1111;
[L3868]              havoc addedValue_s1111;
[L3869]              havoc __ret_0_increaseAllowance;
[L3870]              havoc spender_s1139;
[L3871]              havoc subtractedValue_s1139;
[L3872]              havoc __ret_0_decreaseAllowance;
[L3873]              havoc name_s1191;
[L3874]              havoc symbol_s1191;
[L3875]              havoc supply_s1191;
[L3876]              havoc amount_s1203;
[L3877]              havoc __ret_0_name;
[L3878]              havoc __ret_0_symbol;
[L3879]              havoc __ret_0_decimals;
[L3880]              havoc tmpNow;
[L3881]              havoc gas;
[L3882]              assume gas > 4000000 && gas <= 8000000;
[L3883]              tmpNow := now;
[L3884]              havoc now;
[L3885]              assume now > tmpNow;
[L3886]              assume msgsender_MSG != null;
[L3887]  COND FALSE  !(choice == 7)
[L3893]  COND TRUE   choice == 6
[L3894]              gas := gas - 21000;
[L3895]  COND TRUE   gas >= 0
[L3896]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3897]              assume msgvalue_MSG == 0;
[L3898]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND FALSE  !(!(node_s455 != null))
[L1625]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1626]  CALL        call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1626]  RET         call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1627]  COND FALSE  !(revert)
[L1638]  COND FALSE  !(!!__var_4)
[L1642]  COND FALSE  !(__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 0)
[L1646]              __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s455]] := __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]];
[L1647]              __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][__tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]]]] := node_s455;
[L1648]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L1650]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND TRUE   !(c_s130 >= a_s130)
[L1542]              revert := true;
[L1650]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L1651]  COND TRUE   revert
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3948]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L3948]        assume true;

[2020-11-24 18:29:50,247 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:50,247 INFO  L82        PathProgramCache]: Analyzing trace with hash -988682763, now seen corresponding path program 1 times
[2020-11-24 18:29:50,248 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:50,257 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 18:29:50,267 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 18:29:50,336 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:50,336 INFO  L82        PathProgramCache]: Analyzing trace with hash 13297, now seen corresponding path program 1 times
[2020-11-24 18:29:50,337 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:50,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 18:29:50,338 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 18:29:50,339 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 18:29:50,339 INFO  L82        PathProgramCache]: Analyzing trace with hash -584381315, now seen corresponding path program 1 times
[2020-11-24 18:29:50,340 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 18:29:50,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 18:29:50,369 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 18:29:50,687 WARN  L188               SmtUtils]: Spent 190.00 ms on a formula simplification. DAG size of input: 112 DAG size of output: 111
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-24 18:29:51,338 WARN  L188               SmtUtils]: Spent 287.00 ms on a formula simplification. DAG size of input: 261 DAG size of output: 217
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
[2020-11-24 18:29:51,503 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 108
[2020-11-24 18:29:51,664 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 159
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
[2020-11-24 18:29:52,385 WARN  L188               SmtUtils]: Spent 706.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 142
[2020-11-24 18:29:52,870 WARN  L188               SmtUtils]: Spent 483.00 ms on a formula simplification. DAG size of input: 252 DAG size of output: 228
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
[2020-11-24 18:29:53,164 WARN  L188               SmtUtils]: Spent 278.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 157
[2020-11-24 18:29:53,443 WARN  L188               SmtUtils]: Spent 277.00 ms on a formula simplification that was a NOOP. DAG size: 367
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 8543 to 17077
[2020-11-24 18:29:54,068 WARN  L188               SmtUtils]: Spent 609.00 ms on a formula simplification that was a NOOP. DAG size: 301
[2020-11-24 18:29:55,443 WARN  L188               SmtUtils]: Spent 1.37 s on a formula simplification. DAG size of input: 327 DAG size of output: 319
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 13313 to 26597
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4027 to 8053
[2020-11-24 18:29:55,938 WARN  L188               SmtUtils]: Spent 465.00 ms on a formula simplification. DAG size of input: 190 DAG size of output: 186
[2020-11-24 18:29:56,466 WARN  L188               SmtUtils]: Spent 526.00 ms on a formula simplification that was a NOOP. DAG size: 397
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
[2020-11-24 18:29:56,883 WARN  L188               SmtUtils]: Spent 409.00 ms on a formula simplification that was a NOOP. DAG size: 312
[2020-11-24 18:29:57,334 WARN  L188               SmtUtils]: Spent 449.00 ms on a formula simplification. DAG size of input: 331 DAG size of output: 326
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-24 18:29:57,639 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification that was a NOOP. DAG size: 307
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-24 18:29:57,999 WARN  L188               SmtUtils]: Spent 273.00 ms on a formula simplification. DAG size of input: 309 DAG size of output: 308
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-24 18:29:58,157 WARN  L188               SmtUtils]: Spent 155.00 ms on a formula simplification that was a NOOP. DAG size: 304
[2020-11-24 18:29:58,171 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 18:29:58,177 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 06:29:58 BasicIcfg
[2020-11-24 18:29:58,177 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 18:29:58,177 INFO  L168              Benchmark]: Toolchain (without parser) took 16415.73 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.3 GB). Free memory was 940.6 MB in the beginning and 2.2 GB in the end (delta: -1.2 GB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,178 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,178 INFO  L168              Benchmark]: Boogie Preprocessor took 100.54 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,179 INFO  L168              Benchmark]: UtopiaSpecLang took 59.68 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,179 INFO  L168              Benchmark]: Boogie Printer took 16.52 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,180 INFO  L168              Benchmark]: RCFGBuilder took 845.81 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 790.2 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,180 INFO  L168              Benchmark]: UtopiaLTL2Aut took 43.18 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 781.2 MB in the end (delta: 9.1 MB). Peak memory consumption was 9.1 MB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,180 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1434.13 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 208.7 MB). Free memory was 781.2 MB in the beginning and 944.4 MB in the end (delta: -163.2 MB). Peak memory consumption was 160.5 MB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,181 INFO  L168              Benchmark]: BlockEncodingV2 took 113.66 ms. Allocated memory is still 1.2 GB. Free memory was 944.4 MB in the beginning and 879.6 MB in the end (delta: 64.8 MB). Peak memory consumption was 64.8 MB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,181 INFO  L168              Benchmark]: BuchiAutomizer took 13799.34 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 879.6 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-24 18:29:58,184 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3428 locations, 6279 edges
  - StatisticsResult: Encoded RCFG
    3288 locations, 5894 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 100.54 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.68 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.52 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 845.81 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 790.2 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 43.18 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 781.2 MB in the end (delta: 9.1 MB). Peak memory consumption was 9.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1434.13 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 208.7 MB). Free memory was 781.2 MB in the beginning and 944.4 MB in the end (delta: -163.2 MB). Peak memory consumption was 160.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 113.66 ms. Allocated memory is still 1.2 GB. Free memory was 944.4 MB in the beginning and 879.6 MB in the end (delta: 64.8 MB). Peak memory consumption was 64.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 13799.34 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 879.6 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1404 locations, 1941 edges
  - StatisticsResult: BuchiProgram size
    3428 locations, 6279 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 28 terminating modules (28 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.28 modules have a trivial ranking function, the largest among these consists of 21 locations. The remainder module has 357 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 13.7s and 29 iterations.  TraceHistogramMax:3. Analysis of lassos took 9.7s. Construction of modules took 2.2s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 28. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 28 MinimizatonAttempts, 488 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 518 states and ocurred in iteration 13.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 12731 SDtfs, 7573 SDslu, 35779 SDs, 0 SdLazy, 19555 SolverSat, 1816 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU28 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
DkargoToken(115792089237316195423570985008687907853269984665640564039457584007913129639947).transfer~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639953, to : 115792089237316195423570985008687907853269984665640564039457584007913129639953, value : 3});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1257 && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_DkargoToken0 := true;
[L2]                 call_transfer_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L749]               havoc __exception;
[L750]               revert := false;
[L751]   COND TRUE   __exception
[L752]               __tmp__Balance := Balance;
[L753]               __tmp__DType := DType;
[L754]               __tmp__Alloc := Alloc;
[L755]               __tmp__balance_ADDR := balance_ADDR;
[L756]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L757]               __tmp__sum := sum;
[L758]               __tmp__M_int_bool := M_int_bool;
[L759]               __tmp__sum__infcs0 := sum__infcs0;
[L760]               __tmp__M_Ref_int := M_Ref_int;
[L761]               __tmp__sum__balances1 := sum__balances1;
[L762]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L763]               __tmp__sum__allowances2 := sum__allowances2;
[L764]               __tmp__Length := Length;
[L765]               __tmp__now := now;
[L766]               __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L767]               __tmp___owner_Ownership := _owner_Ownership;
[L768]               __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L769]               __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L770]               __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L771]               __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L772]               __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L773]               __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L774]               __tmp___slist_AddressChain := _slist_AddressChain;
[L775]               __tmp___infcs_ERC165 := _infcs_ERC165;
[L776]               __tmp___supply_ERC20 := _supply_ERC20;
[L777]               __tmp___balances_ERC20 := _balances_ERC20;
[L778]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L779]               __tmp___name_DkargoToken := _name_DkargoToken;
[L780]               __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L781]   CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2237]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2238]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L1871]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1872]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L2092]              __var_16 := null;
[L2093]  COND FALSE  !(!(sender_s956 != null))
[L2097]              __var_17 := null;
[L2098]  COND FALSE  !(!(recipient_s956 != null))
[L2102]  CALL        call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L1564]  COND FALSE  !(!(b_s157 <= a_s157))
[L1568]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1569]              __ret_0_ := c_s157;
[L2102]  RET         call __var_18 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s956], amount_s956, 434928619);
[L2103]  COND FALSE  !(revert)
[L2106]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][sender_s956];
[L2107]              __tmp___balances_ERC20[this][sender_s956] := __var_18;
[L2108]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][sender_s956];
[L2109]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND FALSE  !(!(c_s130 >= a_s130))
[L1545]              __ret_0_ := c_s130;
[L2109]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s956], amount_s956);
[L2110]  COND FALSE  !(revert)
[L2113]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][recipient_s956];
[L2114]              __tmp___balances_ERC20[this][recipient_s956] := __var_19;
[L2115]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][recipient_s956];
[L1872]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L1873]  COND FALSE  !(revert)
[L1889]              __ret_0_ := true;
[L2238]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2239]  COND FALSE  !(revert)
[L2245]              ret_s1257 := ret_s1257;
[L2246]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2247]  CALL        call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2247]  RET         call __var_24 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2248]  COND FALSE  !(revert)
[L2254]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2255]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2255]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L2256]  COND FALSE  !(revert)
[L2262]  COND FALSE  !(__var_24 && __var_25 == 0)
[L2272]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2273]  CALL        call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L2273]  RET         call __var_26 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2274]  COND FALSE  !(revert)
[L2280]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2281]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2025]              __ret_0_ := __tmp___balances_ERC20[this][account_s841];
[L2281]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2282]  COND FALSE  !(revert)
[L2288]  COND TRUE   !__var_26 && __var_27 > 0
[L2289]  COND TRUE   __tmp__DType[this] == DkargoToken
[L2290]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L1620]              __var_3 := null;
[L1621]  COND FALSE  !(!(node_s455 != null))
[L1625]  COND TRUE   __tmp__DType[this] == DkargoToken
[L1626]  CALL        call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1589]  COND FALSE  !((__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376)
[L1593]              __var_1 := null;
[L1594]              __var_2 := null;
[L1595]              __ret_0_ := (if __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null && __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s376]] == null then false else true);
[L1626]  RET         call __var_4 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L1627]  COND FALSE  !(revert)
[L1638]  COND FALSE  !(!!__var_4)
[L1642]  COND FALSE  !(__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 0)
[L1646]              __tmp__prev_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][node_s455]] := __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]];
[L1647]              __tmp__next_AddressChain.NodeInfo[__tmp__M_Ref_Ref[__tmp__map_AddressChain.NodeList[__tmp___slist_AddressChain[this]]][__tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]]]] := node_s455;
[L1648]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L1650]  CALL        call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L1540]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1541]  COND TRUE   !(c_s130 >= a_s130)
[L1542]              revert := true;
[L1650]  RET         call __var_5 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L1651]  COND TRUE   revert
[L2290]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257);
[L2291]  COND TRUE   revert
[L781]   RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L782]               assume revert || gas < 0;
[L3898]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
