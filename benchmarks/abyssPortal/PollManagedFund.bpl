type Ref = int;
type ContractName = int;
var null: Ref;
var BasePoll: ContractName;
var BasePoll.Vote: ContractName;
var DateTime: ContractName;
var DateTime._DateTime: ContractName;
var ERC20Token: ContractName;
var Fund: ContractName;
var ICrowdsaleFund: ContractName;
var IERC20Token: ContractName;
var IPollManagedFund: ContractName;
var ISimpleCrowdsale: ContractName;
var ITokenEventListener: ContractName;
var ManagedToken: ContractName;
var MultiOwnable: ContractName;
var PollManagedFund: ContractName;
var RefundPoll: ContractName;
var SafeMath: ContractName;
var TapPoll: ContractName;
function ConstantToRef(x: int) returns (ret: Ref);
function {:bvbuiltin "mod"} modBpl(x: int, y: int) returns (ret: int);
function keccak256(x: int) returns (ret: int);
function abiEncodePacked1(x: int) returns (ret: int);
function _SumMapping_VeriSol(x: [Ref]int) returns (ret: int);
function abiEncodePacked2(x: int, y: int) returns (ret: int);
function abiEncodePacked1R(x: Ref) returns (ret: int);
function abiEncodePacked2R(x: Ref, y: int) returns (ret: int);
function {:smtdefined "((as const (Array Int Int)) 0)"} zeroRefIntArr() returns (ret: [Ref]int);
function {:smtdefined "((as const (Array Int Int)) 0)"} zeroIntIntArr() returns (ret: [int]int);
function {:smtdefined "((as const (Array Int Bool)) false)"} zeroRefBoolArr() returns (ret: [Ref]bool);
function {:smtdefined "((as const (Array Int Bool)) false)"} zeroIntBoolArr() returns (ret: [int]bool);
function {:smtdefined "((as const (Array Int Int)) 0)"} zeroRefRefArr() returns (ret: [Ref]Ref);
function {:smtdefined "((as const (Array Int Int)) 0)"} zeroIntRefArr() returns (ret: [int]Ref);
var Balance: [Ref]int;
var DType: [Ref]ContractName;
var Alloc: [Ref]bool;
var balance_ADDR: [Ref]int;
var M_Ref_Ref: [Ref][Ref]Ref;
var M_Ref_int: [Ref][Ref]int;
var M_Ref_bool: [Ref][Ref]bool;
var M_int_int: [Ref][int]int;
var M_int_Ref: [Ref][int]Ref;
var Length: [Ref]int;
var revert: bool;
var gas: int;
var now: int;
procedure {:inline 1} FreshRefGenerator__success() returns (newRef: Ref);
modifies Alloc;
procedure {:inline 1} BasePoll.Vote_ctor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, time: int, weight: int, agree: bool);
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
procedure {:inline 1} DateTime._DateTime_ctor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year: int, month: int, day: int, hour: int, minute: int, second: int, weekday: int);
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
var time_BasePoll.Vote: [Ref]int;
var weight_BasePoll.Vote: [Ref]int;
var agree_BasePoll.Vote: [Ref]bool;
var MAX_TOKENS_WEIGHT_DENOM_BasePoll: [Ref]int;
var token_BasePoll: [Ref]Ref;
var fundAddress_BasePoll: [Ref]Ref;
var startTime_BasePoll: [Ref]int;
var endTime_BasePoll: [Ref]int;
var checkTransfersAfterEnd_BasePoll: [Ref]bool;
var yesCounter_BasePoll: [Ref]int;
var noCounter_BasePoll: [Ref]int;
var totalVoted_BasePoll: [Ref]int;
var finalized_BasePoll: [Ref]bool;
var votesByAddress_BasePoll: [Ref]Ref;
procedure {:inline 1} BasePoll_BasePoll_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool);
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies revert;
modifies token_BasePoll;
modifies Alloc;
procedure {:constructor} {:public} {:inline 1} BasePoll_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
implementation BasePoll_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call BasePoll_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s3219, _fundAddress_s3219, _startTime_s3219, _endTime_s3219, _checkTransfersAfterEnd_s3219);
assume ((revert) || ((gas) < (0)));
} else {
call BasePoll_BasePoll__success(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s3219, _fundAddress_s3219, _startTime_s3219, _endTime_s3219, _checkTransfersAfterEnd_s3219);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} vote_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s3313: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
implementation vote_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s3313: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call vote_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
assume ((revert) || ((gas) < (0)));
} else {
call vote_BasePoll__success(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} revokeVote_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
implementation revokeVote_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call revokeVote_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call revokeVote_BasePoll__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} onTokenTransfer_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tokenHolder_s3502: Ref, amount_s3502: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
implementation onTokenTransfer_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tokenHolder_s3502: Ref, amount_s3502: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call onTokenTransfer_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
assume ((revert) || ((gas) < (0)));
} else {
call onTokenTransfer_BasePoll__success(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} tryToFinalize_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies finalized_BasePoll;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
implementation tryToFinalize_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := tryToFinalize_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := tryToFinalize_BasePoll__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} isNowApproved_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation isNowApproved_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := isNowApproved_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := isNowApproved_BasePoll__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} isSubjectApproved_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:inline 1} onPollFinish_BasePoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s3552: bool);
procedure {:inline 1} DateTime_DateTime_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
procedure {:inline 1} DateTime_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
implementation DateTime_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call DateTime_DateTime__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call DateTime_DateTime__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

var year_DateTime._DateTime: [Ref]int;
var month_DateTime._DateTime: [Ref]int;
var day_DateTime._DateTime: [Ref]int;
var hour_DateTime._DateTime: [Ref]int;
var minute_DateTime._DateTime: [Ref]int;
var second_DateTime._DateTime: [Ref]int;
var weekday_DateTime._DateTime: [Ref]int;
var DAY_IN_SECONDS_DateTime: [Ref]int;
var YEAR_IN_SECONDS_DateTime: [Ref]int;
var LEAP_YEAR_IN_SECONDS_DateTime: [Ref]int;
var HOUR_IN_SECONDS_DateTime: [Ref]int;
var MINUTE_IN_SECONDS_DateTime: [Ref]int;
var ORIGIN_YEAR_DateTime: [Ref]int;
procedure {:public} {:inline 1} isLeapYear_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s676: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation isLeapYear_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s676: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s676);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s676);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} leapYearsBefore_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year2_s704: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation leapYearsBefore_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year2_s704: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year2_s704);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year2_s704);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getDaysInMonth_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, month_s774: int, year_s774: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getDaysInMonth_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, month_s774: int, year_s774: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getDaysInMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, month_s774, year_s774);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getDaysInMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, month_s774, year_s774);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} parseTimestamp_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s943: int) returns (dt_s943: Ref);
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
procedure {:public} {:inline 1} getYear_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1031: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getYear_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1031: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1031);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1031);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getMonth_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1044: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
implementation getMonth_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1044: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getDay_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1057: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
implementation getDay_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1057: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getDay_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getDay_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getHour_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1076: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getHour_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1076: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getHour_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1076);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getHour_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1076);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getMinute_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1093: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getMinute_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1093: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getMinute_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1093);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getMinute_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1093);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getSecond_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1107: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getSecond_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1107: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getSecond_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1107);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getSecond_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1107);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getWeekday_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1126: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getWeekday_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1126: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getWeekday_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1126);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getWeekday_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1126);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} toTimestamp3_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1153: int, month_s1153: int, day_s1153: int) returns (timestamp_s1153: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
implementation toTimestamp3_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1153: int, month_s1153: int, day_s1153: int) returns (timestamp_s1153: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call timestamp_s1153 := toTimestamp3_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153);
assume ((revert) || ((gas) < (0)));
} else {
call timestamp_s1153 := toTimestamp3_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} toTimestamp4_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1180: int, month_s1180: int, day_s1180: int, hour_s1180: int) returns (timestamp_s1180: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
implementation toTimestamp4_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1180: int, month_s1180: int, day_s1180: int, hour_s1180: int) returns (timestamp_s1180: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call timestamp_s1180 := toTimestamp4_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180);
assume ((revert) || ((gas) < (0)));
} else {
call timestamp_s1180 := toTimestamp4_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} toTimestamp5_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1207: int, month_s1207: int, day_s1207: int, hour_s1207: int, minute_s1207: int) returns (timestamp_s1207: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
implementation toTimestamp5_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1207: int, month_s1207: int, day_s1207: int, hour_s1207: int, minute_s1207: int) returns (timestamp_s1207: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call timestamp_s1207 := toTimestamp5_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207);
assume ((revert) || ((gas) < (0)));
} else {
call timestamp_s1207 := toTimestamp5_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} toTimestamp6_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1395: int, month_s1395: int, day_s1395: int, hour_s1395: int, minute_s1395: int, second_s1395: int) returns (timestamp_s1395: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
implementation toTimestamp6_DateTime(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1395: int, month_s1395: int, day_s1395: int, hour_s1395: int, minute_s1395: int, second_s1395: int) returns (timestamp_s1395: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call timestamp_s1395 := toTimestamp6_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1395, month_s1395, day_s1395, hour_s1395, minute_s1395, second_s1395);
assume ((revert) || ((gas) < (0)));
} else {
call timestamp_s1395 := toTimestamp6_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1395, month_s1395, day_s1395, hour_s1395, minute_s1395, second_s1395);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} ERC20Token_ERC20Token_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies balances_ERC20Token;
modifies M_Ref_int;
modifies allowed_ERC20Token;
modifies M_Ref_Ref;
modifies Alloc;
procedure {:inline 1} ERC20Token_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies balances_ERC20Token;
modifies M_Ref_int;
modifies allowed_ERC20Token;
modifies M_Ref_Ref;
modifies Alloc;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
implementation ERC20Token_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

var balances_ERC20Token: [Ref]Ref;
var allowed_ERC20Token: [Ref]Ref;
procedure {:public} {:inline 1} transfer_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3586: Ref, _value_s3586: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_int;
implementation transfer_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3586: Ref, _value_s3586: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := transfer_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := transfer_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} transfer_ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3646: Ref, _value_s3646: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_int;
procedure {:public} {:inline 1} transferFrom_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3664: Ref, _to_s3664: Ref, _value_s3664: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
implementation transferFrom_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3664: Ref, _to_s3664: Ref, _value_s3664: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := transferFrom_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := transferFrom_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} transferFrom_ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3748: Ref, _to_s3748: Ref, _value_s3748: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:public} {:inline 1} balanceOf_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3760: Ref) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation balanceOf_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3760: Ref) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := balanceOf_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s3760);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := balanceOf_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _owner_s3760);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} approve_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3775: Ref, _value_s3775: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
implementation approve_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3775: Ref, _value_s3775: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := approve_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := approve_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} approve_ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3803: Ref, _value_s3803: int) returns (__ret_0_: bool);
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:public} {:inline 1} allowance_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3819: Ref, _spender_s3819: Ref) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
implementation allowance_ERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3819: Ref, _spender_s3819: Ref) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := allowance_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s3819, _spender_s3819);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := allowance_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _owner_s3819, _spender_s3819);
assume ((!(revert)) && ((gas) >= (0)));
}
}

var state_Fund: [Ref]int;
var token_Fund: [Ref]Ref;
var INITIAL_TAP_Fund: [Ref]int;
var teamWallet_Fund: [Ref]Ref;
var crowdsaleEndDate_Fund: [Ref]int;
var referralTokenWallet_Fund: [Ref]Ref;
var foundationTokenWallet_Fund: [Ref]Ref;
var reserveTokenWallet_Fund: [Ref]Ref;
var bountyTokenWallet_Fund: [Ref]Ref;
var companyTokenWallet_Fund: [Ref]Ref;
var advisorTokenWallet_Fund: [Ref]Ref;
var lockedTokenAddress_Fund: [Ref]Ref;
var refundManager_Fund: [Ref]Ref;
var lastWithdrawTime_Fund: [Ref]int;
var firstWithdrawAmount_Fund: [Ref]int;
var crowdsaleAddress_Fund: [Ref]Ref;
var contributions_Fund: [Ref]Ref;
procedure {:inline 1} Fund_Fund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref);
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies crowdsaleEndDate_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies lockedTokenAddress_Fund;
modifies refundManager_Fund;
modifies lastWithdrawTime_Fund;
modifies firstWithdrawAmount_Fund;
modifies crowdsaleAddress_Fund;
modifies contributions_Fund;
modifies M_Ref_int;
modifies state_Fund;
modifies Alloc;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
procedure {:constructor} {:public} {:inline 1} Fund_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies crowdsaleEndDate_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies lockedTokenAddress_Fund;
modifies refundManager_Fund;
modifies lastWithdrawTime_Fund;
modifies firstWithdrawAmount_Fund;
modifies crowdsaleAddress_Fund;
modifies contributions_Fund;
modifies M_Ref_int;
modifies state_Fund;
modifies Alloc;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
implementation Fund_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call Fund_Fund__fail(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s1547, _referralTokenWallet_s1547, _foundationTokenWallet_s1547, _companyTokenWallet_s1547, _reserveTokenWallet_s1547, _bountyTokenWallet_s1547, _advisorTokenWallet_s1547, _refundManager_s1547, _owners_s1547);
assume ((revert) || ((gas) < (0)));
} else {
call Fund_Fund__success(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s1547, _referralTokenWallet_s1547, _foundationTokenWallet_s1547, _companyTokenWallet_s1547, _reserveTokenWallet_s1547, _bountyTokenWallet_s1547, _advisorTokenWallet_s1547, _refundManager_s1547, _owners_s1547);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} canWithdraw_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:public} {:inline 1} setCrowdsaleAddress_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _crowdsaleAddress_s1592: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies crowdsaleAddress_Fund;
implementation setCrowdsaleAddress_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _crowdsaleAddress_s1592: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call setCrowdsaleAddress_Fund__fail(this, msgsender_MSG, msgvalue_MSG, _crowdsaleAddress_s1592);
assume ((revert) || ((gas) < (0)));
} else {
call setCrowdsaleAddress_Fund__success(this, msgsender_MSG, msgvalue_MSG, _crowdsaleAddress_s1592);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} setTokenAddress_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s1616: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies token_Fund;
implementation setTokenAddress_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s1616: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call setTokenAddress_Fund__fail(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s1616);
assume ((revert) || ((gas) < (0)));
} else {
call setTokenAddress_Fund__success(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s1616);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} setLockedTokenAddress_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _lockedTokenAddress_s1638: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies lockedTokenAddress_Fund;
implementation setLockedTokenAddress_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _lockedTokenAddress_s1638: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call setLockedTokenAddress_Fund__fail(this, msgsender_MSG, msgvalue_MSG, _lockedTokenAddress_s1638);
assume ((revert) || ((gas) < (0)));
} else {
call setLockedTokenAddress_Fund__success(this, msgsender_MSG, msgvalue_MSG, _lockedTokenAddress_s1638);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} processContribution_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s1669: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
modifies M_Ref_int;
implementation processContribution_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s1669: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call processContribution_Fund__fail(this, msgsender_MSG, msgvalue_MSG, contributor_s1669);
assume ((revert) || ((gas) < (0)));
} else {
call processContribution_Fund__success(this, msgsender_MSG, msgvalue_MSG, contributor_s1669);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} onCrowdsaleEnd_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
implementation onCrowdsaleEnd_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call onCrowdsaleEnd_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call onCrowdsaleEnd_Fund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} enableCrowdsaleRefund_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies state_Fund;
implementation enableCrowdsaleRefund_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call enableCrowdsaleRefund_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call enableCrowdsaleRefund_Fund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} refundCrowdsaleContributor_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies gas;
modifies M_Ref_int;
modifies Balance;
implementation refundCrowdsaleContributor_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call refundCrowdsaleContributor_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call refundCrowdsaleContributor_Fund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} autoRefundCrowdsaleContributor_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributorAddress_s1850: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies gas;
modifies M_Ref_int;
modifies Balance;
implementation autoRefundCrowdsaleContributor_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributorAddress_s1850: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call autoRefundCrowdsaleContributor_Fund__fail(this, msgsender_MSG, msgvalue_MSG, contributorAddress_s1850);
assume ((revert) || ((gas) < (0)));
} else {
call autoRefundCrowdsaleContributor_Fund__success(this, msgsender_MSG, msgvalue_MSG, contributorAddress_s1850);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getCurrentTapAmount_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getCurrentTapAmount_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getCurrentTapAmount_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getCurrentTapAmount_Fund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} calcTapAmount_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
procedure {:public} {:inline 1} firstWithdraw_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies gas;
modifies firstWithdrawAmount_Fund;
modifies Balance;
implementation firstWithdraw_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call firstWithdraw_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call firstWithdraw_Fund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} withdraw_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies gas;
modifies lastWithdrawTime_Fund;
modifies Balance;
implementation withdraw_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call withdraw_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call withdraw_Fund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} enableRefund_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies state_Fund;
modifies M_Ref_int;
procedure {:public} {:inline 1} refundTokenHolder_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies gas;
modifies M_Ref_int;
modifies Balance;
implementation refundTokenHolder_Fund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call refundTokenHolder_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call refundTokenHolder_Fund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} ICrowdsaleFund_ICrowdsaleFund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ICrowdsaleFund_ICrowdsaleFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation ICrowdsaleFund_ICrowdsaleFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call ICrowdsaleFund_ICrowdsaleFund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call ICrowdsaleFund_ICrowdsaleFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} processContribution_ICrowdsaleFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s2377: Ref);
procedure {:public} {:inline 1} onCrowdsaleEnd_ICrowdsaleFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:public} {:inline 1} enableCrowdsaleRefund_ICrowdsaleFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} IERC20Token_IERC20Token_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
procedure {:inline 1} IERC20Token_IERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
implementation IERC20Token_IERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call IERC20Token_IERC20Token__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call IERC20Token_IERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

var name_IERC20Token: [Ref]int;
var symbol_IERC20Token: [Ref]int;
var decimals_IERC20Token: [Ref]int;
var totalSupply_IERC20Token: [Ref]int;
procedure {:public} {:inline 1} balanceOf_IERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3837: Ref) returns (balance_s3837: int);
procedure {:public} {:inline 1} transfer_IERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3846: Ref, _value_s3846: int) returns (success_s3846: bool);
procedure {:public} {:inline 1} transferFrom_IERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3857: Ref, _to_s3857: Ref, _value_s3857: int) returns (success_s3857: bool);
procedure {:public} {:inline 1} approve_IERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3866: Ref, _value_s3866: int) returns (success_s3866: bool);
procedure {:public} {:inline 1} allowance_IERC20Token(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3875: Ref, _spender_s3875: Ref) returns (remaining_s3875: int);
procedure {:inline 1} IPollManagedFund_IPollManagedFund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} IPollManagedFund_IPollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation IPollManagedFund_IPollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call IPollManagedFund_IPollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call IPollManagedFund_IPollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} onTapPollFinish_IPollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2144: bool, _tap_s2144: int);
procedure {:public} {:inline 1} onRefundPollFinish_IPollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2149: bool);
procedure {:inline 1} ISimpleCrowdsale_ISimpleCrowdsale_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ISimpleCrowdsale_ISimpleCrowdsale(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation ISimpleCrowdsale_ISimpleCrowdsale(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call ISimpleCrowdsale_ISimpleCrowdsale__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call ISimpleCrowdsale_ISimpleCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} getSoftCap_ISimpleCrowdsale(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
procedure {:public} {:inline 1} isContributorInLists_ISimpleCrowdsale(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributorAddress_s2398: Ref) returns (__ret_0_: bool);
procedure {:public} {:inline 1} processReservationFundContribution_ISimpleCrowdsale(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s2407: Ref, tokenAmount_s2407: int, tokenBonusAmount_s2407: int);
procedure {:inline 1} ITokenEventListener_ITokenEventListener_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ITokenEventListener_ITokenEventListener(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation ITokenEventListener_ITokenEventListener(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call ITokenEventListener_ITokenEventListener__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call ITokenEventListener_ITokenEventListener__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} onTokenTransfer_ITokenEventListener(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2161: Ref, _to_s2161: Ref, _value_s2161: int);
var allowTransfers_ManagedToken: [Ref]bool;
var issuanceFinished_ManagedToken: [Ref]bool;
var eventListener_ManagedToken: [Ref]Ref;
procedure {:inline 1} ManagedToken_ManagedToken_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref);
modifies allowTransfers_ManagedToken;
modifies issuanceFinished_ManagedToken;
modifies eventListener_ManagedToken;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
procedure {:constructor} {:public} {:inline 1} ManagedToken_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
modifies balances_ERC20Token;
modifies M_Ref_int;
modifies allowed_ERC20Token;
modifies M_Ref_Ref;
modifies Alloc;
modifies allowTransfers_ManagedToken;
modifies issuanceFinished_ManagedToken;
modifies eventListener_ManagedToken;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
implementation ManagedToken_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call ManagedToken_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _listener_s2486, _owners_s2486);
assume ((revert) || ((gas) < (0)));
} else {
call ManagedToken_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _listener_s2486, _owners_s2486);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} approve_ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2501: Ref, _value_s2501: int) returns (__ret_0_: bool);
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:public} {:inline 1} setAllowTransfers_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _allowTransfers_s2517: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies allowTransfers_ManagedToken;
implementation setAllowTransfers_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _allowTransfers_s2517: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call setAllowTransfers_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _allowTransfers_s2517);
assume ((revert) || ((gas) < (0)));
} else {
call setAllowTransfers_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _allowTransfers_s2517);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} setListener_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2542: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies eventListener_ManagedToken;
implementation setListener_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2542: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call setListener_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _listener_s2542);
assume ((revert) || ((gas) < (0)));
} else {
call setListener_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _listener_s2542);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} transfer_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2557: Ref, _value_s2557: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_int;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
implementation transfer_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2557: Ref, _value_s2557: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := transfer_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s2557, _value_s2557);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := transfer_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s2557, _value_s2557);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} transfer_ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2593: Ref, _value_s2593: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_int;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure {:public} {:inline 1} transferFrom_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2611: Ref, _to_s2611: Ref, _value_s2611: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
implementation transferFrom_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2611: Ref, _to_s2611: Ref, _value_s2611: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := transferFrom_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s2611, _to_s2611, _value_s2611);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := transferFrom_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s2611, _to_s2611, _value_s2611);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} transferFrom_ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2649: Ref, _to_s2649: Ref, _value_s2649: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure {:inline 1} hasListener_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:public} {:inline 1} issue_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2704: Ref, _value_s2704: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_int;
implementation issue_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2704: Ref, _value_s2704: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call issue_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s2704, _value_s2704);
assume ((revert) || ((gas) < (0)));
} else {
call issue_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s2704, _value_s2704);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} destroy_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2756: Ref, _value_s2756: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_int;
implementation destroy_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2756: Ref, _value_s2756: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call destroy_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s2756, _value_s2756);
assume ((revert) || ((gas) < (0)));
} else {
call destroy_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s2756, _value_s2756);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} increaseApproval_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2797: Ref, _addedValue_s2797: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
implementation increaseApproval_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2797: Ref, _addedValue_s2797: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := increaseApproval_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s2797, _addedValue_s2797);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := increaseApproval_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s2797, _addedValue_s2797);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} decreaseApproval_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2857: Ref, _subtractedValue_s2857: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
implementation decreaseApproval_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2857: Ref, _subtractedValue_s2857: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := decreaseApproval_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s2857, _subtractedValue_s2857);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := decreaseApproval_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s2857, _subtractedValue_s2857);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} finishIssuance_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies issuanceFinished_ManagedToken;
implementation finishIssuance_ManagedToken(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := finishIssuance_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := finishIssuance_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

var manager_MultiOwnable: [Ref]Ref;
var owners_MultiOwnable: [Ref]Ref;
var ownerByAddress_MultiOwnable: [Ref]Ref;
procedure {:inline 1} MultiOwnable_MultiOwnable_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
modifies Alloc;
procedure {:constructor} {:public} {:inline 1} MultiOwnable_MultiOwnable(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
modifies Alloc;
implementation MultiOwnable_MultiOwnable(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call MultiOwnable_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call MultiOwnable_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} setOwners_MultiOwnable(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2931: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
implementation setOwners_MultiOwnable(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2931: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
assume ((revert) || ((gas) < (0)));
} else {
call setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} _setOwners_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2988: Ref);
modifies M_Ref_bool;
modifies owners_MultiOwnable;
procedure {:public} {:inline 1} getOwners_MultiOwnable(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getOwners_MultiOwnable(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

var TAP_POLL_DURATION_PollManagedFund: [Ref]int;
var REFUND_POLL_DURATION_PollManagedFund: [Ref]int;
var MAX_VOTED_TOKEN_PERC_PollManagedFund: [Ref]int;
var tapPoll_PollManagedFund: [Ref]Ref;
var refundPoll_PollManagedFund: [Ref]Ref;
var minVotedTokensPerc_PollManagedFund: [Ref]int;
var secondRefundPollDate_PollManagedFund: [Ref]int;
var isWithdrawEnabled_PollManagedFund: [Ref]bool;
var refundPollDates_PollManagedFund: [Ref]Ref;
procedure {:inline 1} PollManagedFund_PollManagedFund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref);
modifies TAP_POLL_DURATION_PollManagedFund;
modifies REFUND_POLL_DURATION_PollManagedFund;
modifies MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies refundPollDates_PollManagedFund;
modifies Alloc;
procedure {:constructor} {:public} {:inline 1} PollManagedFund_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
modifies Alloc;
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies crowdsaleEndDate_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies lockedTokenAddress_Fund;
modifies refundManager_Fund;
modifies lastWithdrawTime_Fund;
modifies firstWithdrawAmount_Fund;
modifies crowdsaleAddress_Fund;
modifies contributions_Fund;
modifies M_Ref_int;
modifies state_Fund;
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
modifies TAP_POLL_DURATION_PollManagedFund;
modifies REFUND_POLL_DURATION_PollManagedFund;
modifies MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies refundPollDates_PollManagedFund;
implementation PollManagedFund_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call PollManagedFund_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
assume ((revert) || ((gas) < (0)));
} else {
call PollManagedFund_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} canWithdraw_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation canWithdraw_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := canWithdraw_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := canWithdraw_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} onTokenTransfer_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s211: Ref, __param_0_: Ref, _value_s211: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
implementation onTokenTransfer_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s211: Ref, __param_0_: Ref, _value_s211: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call onTokenTransfer_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG, _from_s211, __param_0_, _value_s211);
assume ((revert) || ((gas) < (0)));
} else {
call onTokenTransfer_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG, _from_s211, __param_0_, _value_s211);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} updateMinVotedTokens_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _minVotedTokensPerc_s237: int);
modifies minVotedTokensPerc_PollManagedFund;
procedure {:public} {:inline 1} createTapPoll_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tapIncPerc_s317: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies tapPoll_PollManagedFund;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies Alloc;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
implementation createTapPoll_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tapIncPerc_s317: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call createTapPoll_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG, tapIncPerc_s317);
assume ((revert) || ((gas) < (0)));
} else {
call createTapPoll_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG, tapIncPerc_s317);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} onTapPollFinish_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s352: bool, _tap_s352: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies minVotedTokensPerc_PollManagedFund;
implementation onTapPollFinish_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s352: bool, _tap_s352: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call onTapPollFinish_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG, agree_s352, _tap_s352);
assume ((revert) || ((gas) < (0)));
} else {
call onTapPollFinish_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG, agree_s352, _tap_s352);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} checkRefundPollDate_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:public} {:inline 1} createRefundPoll_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies secondRefundPollDate_PollManagedFund;
modifies refundPoll_PollManagedFund;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
modifies Alloc;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies holdEndTime_RefundPoll;
implementation createRefundPoll_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call createRefundPoll_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call createRefundPoll_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} onRefundPollFinish_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s589: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
implementation onRefundPollFinish_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s589: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call onRefundPollFinish_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG, agree_s589);
assume ((revert) || ((gas) < (0)));
} else {
call onRefundPollFinish_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG, agree_s589);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} forceRefund_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies state_Fund;
modifies M_Ref_int;
implementation forceRefund_PollManagedFund(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call forceRefund_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call forceRefund_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

var holdEndTime_RefundPoll: [Ref]int;
procedure {:inline 1} RefundPoll_RefundPoll_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool);
modifies holdEndTime_RefundPoll;
procedure {:constructor} {:public} {:inline 1} RefundPoll_RefundPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies holdEndTime_RefundPoll;
implementation RefundPoll_RefundPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call RefundPoll_RefundPoll__fail(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _holdEndTime_s2198, _checkTransfersAfterEnd_s2198);
assume ((revert) || ((gas) < (0)));
} else {
call RefundPoll_RefundPoll__success(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _holdEndTime_s2198, _checkTransfersAfterEnd_s2198);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:public} {:inline 1} tryToFinalize_RefundPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies finalized_BasePoll;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
implementation tryToFinalize_RefundPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := tryToFinalize_RefundPoll__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := tryToFinalize_RefundPoll__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} isSubjectApproved_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:inline 1} onPollFinish_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2273: bool);
modifies revert;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure {:inline 1} SafeMath_SafeMath_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:constructor} {:public} {:inline 1} SafeMath_SafeMath(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation SafeMath_SafeMath(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

// procedure {:inline 1} safeMul_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3034: int, b_s3034: int) returns (__ret_0_: int);
// procedure {:inline 1} safeDiv_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3052: int, b_s3052: int) returns (__ret_0_: int);
procedure {:inline 1} safeSub_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3072: int, b_s3072: int) returns (__ret_0_: int);
procedure {:inline 1} safeAdd_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3096: int, b_s3096: int) returns (__ret_0_: int);
var tap_TapPoll: [Ref]int;
var minTokensPerc_TapPoll: [Ref]int;
procedure {:inline 1} TapPoll_TapPoll_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int);
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
procedure {:constructor} {:public} {:inline 1} TapPoll_TapPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
implementation TapPoll_TapPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call TapPoll_TapPoll__fail(this, msgsender_MSG, msgvalue_MSG, _tap_s2316, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, _minTokensPerc_s2316);
assume ((revert) || ((gas) < (0)));
} else {
call TapPoll_TapPoll__success(this, msgsender_MSG, msgvalue_MSG, _tap_s2316, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, _minTokensPerc_s2316);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} onPollFinish_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2335: bool);
modifies revert;
modifies minVotedTokensPerc_PollManagedFund;
procedure {:public} {:inline 1} getVotedTokensPerc_TapPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
implementation getVotedTokensPerc_TapPoll(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var __exception: bool;
havoc __exception;
revert := false;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
call __ret_0_ := getVotedTokensPerc_TapPoll__fail(this, msgsender_MSG, msgvalue_MSG);
assume ((revert) || ((gas) < (0)));
} else {
call __ret_0_ := getVotedTokensPerc_TapPoll__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
}
}

procedure {:inline 1} isSubjectApproved_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
procedure {:inline 1} FallbackDispatch__success(from: Ref, to: Ref, amount: int);
modifies Balance;
procedure {:inline 1} Fallback_UnknownType__success(from: Ref, to: Ref, amount: int);
modifies Balance;
procedure {:inline 1} send__success(from: Ref, to: Ref, amount: int) returns (success: bool);
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies revert;
modifies Balance;
// const {:existential true} HoudiniB1_BasePoll: bool;
// const {:existential true} HoudiniB2_BasePoll: bool;
procedure BoogieEntry_BasePoll();
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure BoogieEntry_DateTime();
modifies gas;
modifies now;
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
procedure BoogieEntry_ERC20Token();
modifies gas;
modifies now;
modifies balances_ERC20Token;
modifies M_Ref_int;
modifies allowed_ERC20Token;
modifies M_Ref_Ref;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
// const {:existential true} HoudiniB1_Fund: bool;
// const {:existential true} HoudiniB2_Fund: bool;
// const {:existential true} HoudiniB3_Fund: bool;
// const {:existential true} HoudiniB4_Fund: bool;
// const {:existential true} HoudiniB5_Fund: bool;
// const {:existential true} HoudiniB6_Fund: bool;
// const {:existential true} HoudiniB7_Fund: bool;
// const {:existential true} HoudiniB8_Fund: bool;
// const {:existential true} HoudiniB9_Fund: bool;
// const {:existential true} HoudiniB10_Fund: bool;
// const {:existential true} HoudiniB11_Fund: bool;
// const {:existential true} HoudiniB12_Fund: bool;
// const {:existential true} HoudiniB13_Fund: bool;
// const {:existential true} HoudiniB14_Fund: bool;
// const {:existential true} HoudiniB15_Fund: bool;
// const {:existential true} HoudiniB16_Fund: bool;
// const {:existential true} HoudiniB17_Fund: bool;
// const {:existential true} HoudiniB18_Fund: bool;
// const {:existential true} HoudiniB19_Fund: bool;
// const {:existential true} HoudiniB20_Fund: bool;
// const {:existential true} HoudiniB21_Fund: bool;
// const {:existential true} HoudiniB22_Fund: bool;
// const {:existential true} HoudiniB23_Fund: bool;
// const {:existential true} HoudiniB24_Fund: bool;
// const {:existential true} HoudiniB25_Fund: bool;
// const {:existential true} HoudiniB26_Fund: bool;
// const {:existential true} HoudiniB27_Fund: bool;
// const {:existential true} HoudiniB28_Fund: bool;
// const {:existential true} HoudiniB29_Fund: bool;
// const {:existential true} HoudiniB30_Fund: bool;
// const {:existential true} HoudiniB31_Fund: bool;
// const {:existential true} HoudiniB32_Fund: bool;
// const {:existential true} HoudiniB33_Fund: bool;
// const {:existential true} HoudiniB34_Fund: bool;
// const {:existential true} HoudiniB35_Fund: bool;
// const {:existential true} HoudiniB36_Fund: bool;
// const {:existential true} HoudiniB37_Fund: bool;
// const {:existential true} HoudiniB38_Fund: bool;
// const {:existential true} HoudiniB39_Fund: bool;
// const {:existential true} HoudiniB40_Fund: bool;
// const {:existential true} HoudiniB41_Fund: bool;
// const {:existential true} HoudiniB42_Fund: bool;
// const {:existential true} HoudiniB43_Fund: bool;
// const {:existential true} HoudiniB44_Fund: bool;
// const {:existential true} HoudiniB45_Fund: bool;
// const {:existential true} HoudiniB46_Fund: bool;
// const {:existential true} HoudiniB47_Fund: bool;
// const {:existential true} HoudiniB48_Fund: bool;
// const {:existential true} HoudiniB49_Fund: bool;
// const {:existential true} HoudiniB50_Fund: bool;
// const {:existential true} HoudiniB51_Fund: bool;
// const {:existential true} HoudiniB52_Fund: bool;
// const {:existential true} HoudiniB53_Fund: bool;
// const {:existential true} HoudiniB54_Fund: bool;
// const {:existential true} HoudiniB55_Fund: bool;
// const {:existential true} HoudiniB56_Fund: bool;
// const {:existential true} HoudiniB57_Fund: bool;
// const {:existential true} HoudiniB58_Fund: bool;
// const {:existential true} HoudiniB59_Fund: bool;
// const {:existential true} HoudiniB60_Fund: bool;
// const {:existential true} HoudiniB61_Fund: bool;
// const {:existential true} HoudiniB62_Fund: bool;
// const {:existential true} HoudiniB63_Fund: bool;
// const {:existential true} HoudiniB64_Fund: bool;
// const {:existential true} HoudiniB65_Fund: bool;
// const {:existential true} HoudiniB66_Fund: bool;
// const {:existential true} HoudiniB67_Fund: bool;
// const {:existential true} HoudiniB68_Fund: bool;
// const {:existential true} HoudiniB69_Fund: bool;
// const {:existential true} HoudiniB70_Fund: bool;
// const {:existential true} HoudiniB71_Fund: bool;
// const {:existential true} HoudiniB72_Fund: bool;
// const {:existential true} HoudiniB73_Fund: bool;
// const {:existential true} HoudiniB74_Fund: bool;
// const {:existential true} HoudiniB75_Fund: bool;
// const {:existential true} HoudiniB76_Fund: bool;
// const {:existential true} HoudiniB77_Fund: bool;
// const {:existential true} HoudiniB78_Fund: bool;
// const {:existential true} HoudiniB79_Fund: bool;
// const {:existential true} HoudiniB80_Fund: bool;
// const {:existential true} HoudiniB81_Fund: bool;
// const {:existential true} HoudiniB82_Fund: bool;
// const {:existential true} HoudiniB83_Fund: bool;
// const {:existential true} HoudiniB84_Fund: bool;
// const {:existential true} HoudiniB85_Fund: bool;
// const {:existential true} HoudiniB86_Fund: bool;
// const {:existential true} HoudiniB87_Fund: bool;
// const {:existential true} HoudiniB88_Fund: bool;
// const {:existential true} HoudiniB89_Fund: bool;
// const {:existential true} HoudiniB90_Fund: bool;
// const {:existential true} HoudiniB91_Fund: bool;
// const {:existential true} HoudiniB92_Fund: bool;
// const {:existential true} HoudiniB93_Fund: bool;
// const {:existential true} HoudiniB94_Fund: bool;
// const {:existential true} HoudiniB95_Fund: bool;
// const {:existential true} HoudiniB96_Fund: bool;
// const {:existential true} HoudiniB97_Fund: bool;
// const {:existential true} HoudiniB98_Fund: bool;
// const {:existential true} HoudiniB99_Fund: bool;
// const {:existential true} HoudiniB100_Fund: bool;
// const {:existential true} HoudiniB101_Fund: bool;
// const {:existential true} HoudiniB102_Fund: bool;
// const {:existential true} HoudiniB103_Fund: bool;
// const {:existential true} HoudiniB104_Fund: bool;
// const {:existential true} HoudiniB105_Fund: bool;
// const {:existential true} HoudiniB106_Fund: bool;
// const {:existential true} HoudiniB107_Fund: bool;
// const {:existential true} HoudiniB108_Fund: bool;
// const {:existential true} HoudiniB109_Fund: bool;
// const {:existential true} HoudiniB110_Fund: bool;
// const {:existential true} HoudiniB111_Fund: bool;
// const {:existential true} HoudiniB112_Fund: bool;
// const {:existential true} HoudiniB113_Fund: bool;
// const {:existential true} HoudiniB114_Fund: bool;
// const {:existential true} HoudiniB115_Fund: bool;
// const {:existential true} HoudiniB116_Fund: bool;
// const {:existential true} HoudiniB117_Fund: bool;
// const {:existential true} HoudiniB118_Fund: bool;
// const {:existential true} HoudiniB119_Fund: bool;
// const {:existential true} HoudiniB120_Fund: bool;
// const {:existential true} HoudiniB121_Fund: bool;
// const {:existential true} HoudiniB122_Fund: bool;
// const {:existential true} HoudiniB123_Fund: bool;
// const {:existential true} HoudiniB124_Fund: bool;
// const {:existential true} HoudiniB125_Fund: bool;
// const {:existential true} HoudiniB126_Fund: bool;
// const {:existential true} HoudiniB127_Fund: bool;
// const {:existential true} HoudiniB128_Fund: bool;
// const {:existential true} HoudiniB129_Fund: bool;
// const {:existential true} HoudiniB130_Fund: bool;
// const {:existential true} HoudiniB131_Fund: bool;
// const {:existential true} HoudiniB132_Fund: bool;
procedure BoogieEntry_Fund();
modifies gas;
modifies now;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
modifies M_Ref_int;
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
modifies crowdsaleAddress_Fund;
modifies token_Fund;
modifies lockedTokenAddress_Fund;
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies refundManager_Fund;
modifies contributions_Fund;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
procedure BoogieEntry_ICrowdsaleFund();
modifies gas;
modifies now;
procedure BoogieEntry_IERC20Token();
modifies gas;
modifies now;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
procedure BoogieEntry_IPollManagedFund();
modifies gas;
modifies now;
procedure BoogieEntry_ISimpleCrowdsale();
modifies gas;
modifies now;
procedure BoogieEntry_ITokenEventListener();
modifies gas;
modifies now;
// const {:existential true} HoudiniB1_ManagedToken: bool;
// const {:existential true} HoudiniB2_ManagedToken: bool;
procedure BoogieEntry_ManagedToken();
modifies gas;
modifies now;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies allowTransfers_ManagedToken;
modifies eventListener_ManagedToken;
modifies issuanceFinished_ManagedToken;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
modifies balances_ERC20Token;
modifies allowed_ERC20Token;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
// const {:existential true} HoudiniB1_MultiOwnable: bool;
// const {:existential true} HoudiniB2_MultiOwnable: bool;
procedure BoogieEntry_MultiOwnable();
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Alloc;
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
// const {:existential true} HoudiniB1_PollManagedFund: bool;
// const {:existential true} HoudiniB2_PollManagedFund: bool;
// const {:existential true} HoudiniB3_PollManagedFund: bool;
// const {:existential true} HoudiniB4_PollManagedFund: bool;
// const {:existential true} HoudiniB5_PollManagedFund: bool;
// const {:existential true} HoudiniB6_PollManagedFund: bool;
// const {:existential true} HoudiniB7_PollManagedFund: bool;
// const {:existential true} HoudiniB8_PollManagedFund: bool;
// const {:existential true} HoudiniB9_PollManagedFund: bool;
// const {:existential true} HoudiniB10_PollManagedFund: bool;
// const {:existential true} HoudiniB11_PollManagedFund: bool;
// const {:existential true} HoudiniB12_PollManagedFund: bool;
// const {:existential true} HoudiniB13_PollManagedFund: bool;
// const {:existential true} HoudiniB14_PollManagedFund: bool;
// const {:existential true} HoudiniB15_PollManagedFund: bool;
// const {:existential true} HoudiniB16_PollManagedFund: bool;
// const {:existential true} HoudiniB17_PollManagedFund: bool;
// const {:existential true} HoudiniB18_PollManagedFund: bool;
// const {:existential true} HoudiniB19_PollManagedFund: bool;
// const {:existential true} HoudiniB20_PollManagedFund: bool;
// const {:existential true} HoudiniB21_PollManagedFund: bool;
// const {:existential true} HoudiniB22_PollManagedFund: bool;
// const {:existential true} HoudiniB23_PollManagedFund: bool;
// const {:existential true} HoudiniB24_PollManagedFund: bool;
// const {:existential true} HoudiniB25_PollManagedFund: bool;
// const {:existential true} HoudiniB26_PollManagedFund: bool;
// const {:existential true} HoudiniB27_PollManagedFund: bool;
// const {:existential true} HoudiniB28_PollManagedFund: bool;
// const {:existential true} HoudiniB29_PollManagedFund: bool;
// const {:existential true} HoudiniB30_PollManagedFund: bool;
// const {:existential true} HoudiniB31_PollManagedFund: bool;
// const {:existential true} HoudiniB32_PollManagedFund: bool;
// const {:existential true} HoudiniB33_PollManagedFund: bool;
// const {:existential true} HoudiniB34_PollManagedFund: bool;
// const {:existential true} HoudiniB35_PollManagedFund: bool;
// const {:existential true} HoudiniB36_PollManagedFund: bool;
// const {:existential true} HoudiniB37_PollManagedFund: bool;
// const {:existential true} HoudiniB38_PollManagedFund: bool;
// const {:existential true} HoudiniB39_PollManagedFund: bool;
// const {:existential true} HoudiniB40_PollManagedFund: bool;
// const {:existential true} HoudiniB41_PollManagedFund: bool;
// const {:existential true} HoudiniB42_PollManagedFund: bool;
// const {:existential true} HoudiniB43_PollManagedFund: bool;
// const {:existential true} HoudiniB44_PollManagedFund: bool;
// const {:existential true} HoudiniB45_PollManagedFund: bool;
// const {:existential true} HoudiniB46_PollManagedFund: bool;
// const {:existential true} HoudiniB47_PollManagedFund: bool;
// const {:existential true} HoudiniB48_PollManagedFund: bool;
// const {:existential true} HoudiniB49_PollManagedFund: bool;
// const {:existential true} HoudiniB50_PollManagedFund: bool;
// const {:existential true} HoudiniB51_PollManagedFund: bool;
// const {:existential true} HoudiniB52_PollManagedFund: bool;
// const {:existential true} HoudiniB53_PollManagedFund: bool;
// const {:existential true} HoudiniB54_PollManagedFund: bool;
// const {:existential true} HoudiniB55_PollManagedFund: bool;
// const {:existential true} HoudiniB56_PollManagedFund: bool;
// const {:existential true} HoudiniB57_PollManagedFund: bool;
// const {:existential true} HoudiniB58_PollManagedFund: bool;
// const {:existential true} HoudiniB59_PollManagedFund: bool;
// const {:existential true} HoudiniB60_PollManagedFund: bool;
// const {:existential true} HoudiniB61_PollManagedFund: bool;
// const {:existential true} HoudiniB62_PollManagedFund: bool;
// const {:existential true} HoudiniB63_PollManagedFund: bool;
// const {:existential true} HoudiniB64_PollManagedFund: bool;
// const {:existential true} HoudiniB65_PollManagedFund: bool;
// const {:existential true} HoudiniB66_PollManagedFund: bool;
// const {:existential true} HoudiniB67_PollManagedFund: bool;
// const {:existential true} HoudiniB68_PollManagedFund: bool;
// const {:existential true} HoudiniB69_PollManagedFund: bool;
// const {:existential true} HoudiniB70_PollManagedFund: bool;
// const {:existential true} HoudiniB71_PollManagedFund: bool;
// const {:existential true} HoudiniB72_PollManagedFund: bool;
// const {:existential true} HoudiniB73_PollManagedFund: bool;
// const {:existential true} HoudiniB74_PollManagedFund: bool;
// const {:existential true} HoudiniB75_PollManagedFund: bool;
// const {:existential true} HoudiniB76_PollManagedFund: bool;
// const {:existential true} HoudiniB77_PollManagedFund: bool;
// const {:existential true} HoudiniB78_PollManagedFund: bool;
// const {:existential true} HoudiniB79_PollManagedFund: bool;
// const {:existential true} HoudiniB80_PollManagedFund: bool;
// const {:existential true} HoudiniB81_PollManagedFund: bool;
// const {:existential true} HoudiniB82_PollManagedFund: bool;
// const {:existential true} HoudiniB83_PollManagedFund: bool;
// const {:existential true} HoudiniB84_PollManagedFund: bool;
// const {:existential true} HoudiniB85_PollManagedFund: bool;
// const {:existential true} HoudiniB86_PollManagedFund: bool;
// const {:existential true} HoudiniB87_PollManagedFund: bool;
// const {:existential true} HoudiniB88_PollManagedFund: bool;
// const {:existential true} HoudiniB89_PollManagedFund: bool;
// const {:existential true} HoudiniB90_PollManagedFund: bool;
// const {:existential true} HoudiniB91_PollManagedFund: bool;
// const {:existential true} HoudiniB92_PollManagedFund: bool;
// const {:existential true} HoudiniB93_PollManagedFund: bool;
// const {:existential true} HoudiniB94_PollManagedFund: bool;
// const {:existential true} HoudiniB95_PollManagedFund: bool;
// const {:existential true} HoudiniB96_PollManagedFund: bool;
// const {:existential true} HoudiniB97_PollManagedFund: bool;
// const {:existential true} HoudiniB98_PollManagedFund: bool;
// const {:existential true} HoudiniB99_PollManagedFund: bool;
// const {:existential true} HoudiniB100_PollManagedFund: bool;
// const {:existential true} HoudiniB101_PollManagedFund: bool;
// const {:existential true} HoudiniB102_PollManagedFund: bool;
// const {:existential true} HoudiniB103_PollManagedFund: bool;
// const {:existential true} HoudiniB104_PollManagedFund: bool;
// const {:existential true} HoudiniB105_PollManagedFund: bool;
// const {:existential true} HoudiniB106_PollManagedFund: bool;
// const {:existential true} HoudiniB107_PollManagedFund: bool;
// const {:existential true} HoudiniB108_PollManagedFund: bool;
// const {:existential true} HoudiniB109_PollManagedFund: bool;
// const {:existential true} HoudiniB110_PollManagedFund: bool;
// const {:existential true} HoudiniB111_PollManagedFund: bool;
// const {:existential true} HoudiniB112_PollManagedFund: bool;
// const {:existential true} HoudiniB113_PollManagedFund: bool;
// const {:existential true} HoudiniB114_PollManagedFund: bool;
// const {:existential true} HoudiniB115_PollManagedFund: bool;
// const {:existential true} HoudiniB116_PollManagedFund: bool;
// const {:existential true} HoudiniB117_PollManagedFund: bool;
// const {:existential true} HoudiniB118_PollManagedFund: bool;
// const {:existential true} HoudiniB119_PollManagedFund: bool;
// const {:existential true} HoudiniB120_PollManagedFund: bool;
// const {:existential true} HoudiniB121_PollManagedFund: bool;
// const {:existential true} HoudiniB122_PollManagedFund: bool;
// const {:existential true} HoudiniB123_PollManagedFund: bool;
// const {:existential true} HoudiniB124_PollManagedFund: bool;
// const {:existential true} HoudiniB125_PollManagedFund: bool;
// const {:existential true} HoudiniB126_PollManagedFund: bool;
// const {:existential true} HoudiniB127_PollManagedFund: bool;
// const {:existential true} HoudiniB128_PollManagedFund: bool;
// const {:existential true} HoudiniB129_PollManagedFund: bool;
// const {:existential true} HoudiniB130_PollManagedFund: bool;
// const {:existential true} HoudiniB131_PollManagedFund: bool;
// const {:existential true} HoudiniB132_PollManagedFund: bool;
procedure main();
modifies gas;
modifies now;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
modifies Balance;
modifies M_Ref_int;
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
modifies crowdsaleAddress_Fund;
modifies token_Fund;
modifies lockedTokenAddress_Fund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies tapPoll_PollManagedFund;
modifies refundPoll_PollManagedFund;
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies refundManager_Fund;
modifies contributions_Fund;
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
modifies TAP_POLL_DURATION_PollManagedFund;
modifies REFUND_POLL_DURATION_PollManagedFund;
modifies MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies minVotedTokensPerc_PollManagedFund;
modifies refundPollDates_PollManagedFund;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
modifies holdEndTime_RefundPoll;
// const {:existential true} HoudiniB1_RefundPoll: bool;
// const {:existential true} HoudiniB2_RefundPoll: bool;
procedure BoogieEntry_RefundPoll();
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies holdEndTime_RefundPoll;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure BoogieEntry_SafeMath();
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
// const {:existential true} HoudiniB1_TapPoll: bool;
// const {:existential true} HoudiniB2_TapPoll: bool;
procedure BoogieEntry_TapPoll();
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure checkTime_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure notFinalized_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure withdrawEnabled_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure onlyCrowdsale_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure transfersAllowed_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure canIssue_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure onlyOwner_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure onlyTokenHolder_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure CorralChoice_BasePoll(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure CorralEntry_BasePoll();
modifies gas;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure CorralChoice_DateTime(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
procedure CorralEntry_DateTime();
modifies gas;
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
procedure CorralChoice_ERC20Token(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure CorralEntry_ERC20Token();
modifies gas;
modifies balances_ERC20Token;
modifies M_Ref_int;
modifies allowed_ERC20Token;
modifies M_Ref_Ref;
modifies Alloc;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
procedure CorralChoice_Fund(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
modifies M_Ref_int;
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
modifies Alloc;
modifies crowdsaleAddress_Fund;
modifies token_Fund;
modifies lockedTokenAddress_Fund;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
procedure CorralEntry_Fund();
modifies gas;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
modifies Balance;
modifies M_Ref_int;
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
modifies crowdsaleAddress_Fund;
modifies token_Fund;
modifies lockedTokenAddress_Fund;
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies refundManager_Fund;
modifies contributions_Fund;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
procedure CorralChoice_ICrowdsaleFund(this: Ref);
modifies gas;
modifies now;
procedure CorralEntry_ICrowdsaleFund();
modifies gas;
modifies now;
procedure CorralChoice_IERC20Token(this: Ref);
modifies gas;
modifies now;
procedure CorralEntry_IERC20Token();
modifies gas;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
modifies now;
procedure CorralChoice_IPollManagedFund(this: Ref);
modifies gas;
modifies now;
procedure CorralEntry_IPollManagedFund();
modifies gas;
modifies now;
procedure CorralChoice_ISimpleCrowdsale(this: Ref);
modifies gas;
modifies now;
procedure CorralEntry_ISimpleCrowdsale();
modifies gas;
modifies now;
procedure CorralChoice_ITokenEventListener(this: Ref);
modifies gas;
modifies now;
procedure CorralEntry_ITokenEventListener();
modifies gas;
modifies now;
procedure CorralChoice_ManagedToken(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
modifies allowTransfers_ManagedToken;
modifies eventListener_ManagedToken;
modifies issuanceFinished_ManagedToken;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure CorralEntry_ManagedToken();
modifies gas;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies allowTransfers_ManagedToken;
modifies eventListener_ManagedToken;
modifies issuanceFinished_ManagedToken;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
modifies balances_ERC20Token;
modifies allowed_ERC20Token;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure CorralChoice_MultiOwnable(this: Ref);
modifies gas;
modifies now;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
procedure CorralEntry_MultiOwnable();
modifies gas;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
modifies Alloc;
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
procedure CorralChoice_PollManagedFund(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies M_int_int;
modifies Balance;
modifies M_Ref_int;
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
modifies Alloc;
modifies crowdsaleAddress_Fund;
modifies token_Fund;
modifies lockedTokenAddress_Fund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies tapPoll_PollManagedFund;
modifies refundPoll_PollManagedFund;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies minVotedTokensPerc_PollManagedFund;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
modifies holdEndTime_RefundPoll;
procedure CorralEntry_PollManagedFund();
modifies gas;
modifies Alloc;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
modifies M_int_int;
modifies Balance;
modifies M_Ref_int;
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
modifies crowdsaleAddress_Fund;
modifies token_Fund;
modifies lockedTokenAddress_Fund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies tapPoll_PollManagedFund;
modifies refundPoll_PollManagedFund;
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies refundManager_Fund;
modifies contributions_Fund;
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
modifies TAP_POLL_DURATION_PollManagedFund;
modifies REFUND_POLL_DURATION_PollManagedFund;
modifies MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies minVotedTokensPerc_PollManagedFund;
modifies refundPollDates_PollManagedFund;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
modifies holdEndTime_RefundPoll;
procedure CorralChoice_RefundPoll(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure CorralEntry_RefundPoll();
modifies gas;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies holdEndTime_RefundPoll;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure CorralChoice_SafeMath(this: Ref);
modifies gas;
modifies now;
procedure CorralEntry_SafeMath();
modifies gas;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
procedure CorralChoice_TapPoll(this: Ref);
modifies gas;
modifies now;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure CorralEntry_TapPoll();
modifies gas;
modifies revert;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies now;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies Alloc;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
var __tmp__Balance: [Ref]int;
var __tmp__DType: [Ref]ContractName;
var __tmp__Alloc: [Ref]bool;
var __tmp__balance_ADDR: [Ref]int;
var __tmp__M_Ref_Ref: [Ref][Ref]Ref;
var __tmp__M_Ref_int: [Ref][Ref]int;
var __tmp__M_Ref_bool: [Ref][Ref]bool;
var __tmp__M_int_int: [Ref][int]int;
var __tmp__M_int_Ref: [Ref][int]Ref;
var __tmp__Length: [Ref]int;
var __tmp__now: int;
var __tmp__time_BasePoll.Vote: [Ref]int;
var __tmp__weight_BasePoll.Vote: [Ref]int;
var __tmp__agree_BasePoll.Vote: [Ref]bool;
var __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll: [Ref]int;
var __tmp__token_BasePoll: [Ref]Ref;
var __tmp__fundAddress_BasePoll: [Ref]Ref;
var __tmp__startTime_BasePoll: [Ref]int;
var __tmp__endTime_BasePoll: [Ref]int;
var __tmp__checkTransfersAfterEnd_BasePoll: [Ref]bool;
var __tmp__yesCounter_BasePoll: [Ref]int;
var __tmp__noCounter_BasePoll: [Ref]int;
var __tmp__totalVoted_BasePoll: [Ref]int;
var __tmp__finalized_BasePoll: [Ref]bool;
var __tmp__votesByAddress_BasePoll: [Ref]Ref;
var __tmp__year_DateTime._DateTime: [Ref]int;
var __tmp__month_DateTime._DateTime: [Ref]int;
var __tmp__day_DateTime._DateTime: [Ref]int;
var __tmp__hour_DateTime._DateTime: [Ref]int;
var __tmp__minute_DateTime._DateTime: [Ref]int;
var __tmp__second_DateTime._DateTime: [Ref]int;
var __tmp__weekday_DateTime._DateTime: [Ref]int;
var __tmp__DAY_IN_SECONDS_DateTime: [Ref]int;
var __tmp__YEAR_IN_SECONDS_DateTime: [Ref]int;
var __tmp__LEAP_YEAR_IN_SECONDS_DateTime: [Ref]int;
var __tmp__HOUR_IN_SECONDS_DateTime: [Ref]int;
var __tmp__MINUTE_IN_SECONDS_DateTime: [Ref]int;
var __tmp__ORIGIN_YEAR_DateTime: [Ref]int;
var __tmp__balances_ERC20Token: [Ref]Ref;
var __tmp__allowed_ERC20Token: [Ref]Ref;
var __tmp__state_Fund: [Ref]int;
var __tmp__token_Fund: [Ref]Ref;
var __tmp__INITIAL_TAP_Fund: [Ref]int;
var __tmp__teamWallet_Fund: [Ref]Ref;
var __tmp__crowdsaleEndDate_Fund: [Ref]int;
var __tmp__referralTokenWallet_Fund: [Ref]Ref;
var __tmp__foundationTokenWallet_Fund: [Ref]Ref;
var __tmp__reserveTokenWallet_Fund: [Ref]Ref;
var __tmp__bountyTokenWallet_Fund: [Ref]Ref;
var __tmp__companyTokenWallet_Fund: [Ref]Ref;
var __tmp__advisorTokenWallet_Fund: [Ref]Ref;
var __tmp__lockedTokenAddress_Fund: [Ref]Ref;
var __tmp__refundManager_Fund: [Ref]Ref;
var __tmp__lastWithdrawTime_Fund: [Ref]int;
var __tmp__firstWithdrawAmount_Fund: [Ref]int;
var __tmp__crowdsaleAddress_Fund: [Ref]Ref;
var __tmp__contributions_Fund: [Ref]Ref;
var __tmp__name_IERC20Token: [Ref]int;
var __tmp__symbol_IERC20Token: [Ref]int;
var __tmp__decimals_IERC20Token: [Ref]int;
var __tmp__totalSupply_IERC20Token: [Ref]int;
var __tmp__allowTransfers_ManagedToken: [Ref]bool;
var __tmp__issuanceFinished_ManagedToken: [Ref]bool;
var __tmp__eventListener_ManagedToken: [Ref]Ref;
var __tmp__manager_MultiOwnable: [Ref]Ref;
var __tmp__owners_MultiOwnable: [Ref]Ref;
var __tmp__ownerByAddress_MultiOwnable: [Ref]Ref;
var __tmp__TAP_POLL_DURATION_PollManagedFund: [Ref]int;
var __tmp__REFUND_POLL_DURATION_PollManagedFund: [Ref]int;
var __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund: [Ref]int;
var __tmp__tapPoll_PollManagedFund: [Ref]Ref;
var __tmp__refundPoll_PollManagedFund: [Ref]Ref;
var __tmp__minVotedTokensPerc_PollManagedFund: [Ref]int;
var __tmp__secondRefundPollDate_PollManagedFund: [Ref]int;
var __tmp__isWithdrawEnabled_PollManagedFund: [Ref]bool;
var __tmp__refundPollDates_PollManagedFund: [Ref]Ref;
var __tmp__holdEndTime_RefundPoll: [Ref]int;
var __tmp__tap_TapPoll: [Ref]int;
var __tmp__minTokensPerc_TapPoll: [Ref]int;
procedure {:inline 1} FreshRefGenerator__fail() returns (newRef: Ref);
modifies __tmp__Alloc;
procedure {:inline 1} BasePoll.Vote_ctor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, time: int, weight: int, agree: bool);
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
procedure {:inline 1} DateTime._DateTime_ctor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year: int, month: int, day: int, hour: int, minute: int, second: int, weekday: int);
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
procedure {:inline 1} BasePoll_BasePoll_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool);
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__M_Ref_Ref;
modifies revert;
modifies __tmp__token_BasePoll;
modifies __tmp__Alloc;
procedure {:constructor} {:inline 1} BasePoll_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool);
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies revert;
modifies token_BasePoll;
modifies Alloc;
procedure {:constructor} {:inline 1} BasePoll_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool);
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__M_Ref_Ref;
modifies revert;
modifies __tmp__token_BasePoll;
modifies __tmp__Alloc;
procedure {:inline 1} vote_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s3313: bool);
modifies revert;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
procedure {:inline 1} vote_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s3313: bool);
modifies revert;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__totalVoted_BasePoll;
procedure {:inline 1} revokeVote_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies time_BasePoll.Vote;
modifies weight_BasePoll.Vote;
modifies agree_BasePoll.Vote;
modifies totalVoted_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
procedure {:inline 1} revokeVote_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
procedure {:inline 1} onTokenTransfer_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tokenHolder_s3502: Ref, amount_s3502: int);
modifies revert;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure {:inline 1} onTokenTransfer_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tokenHolder_s3502: Ref, amount_s3502: int);
modifies revert;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__weight_BasePoll.Vote;
procedure {:inline 1} tryToFinalize_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies finalized_BasePoll;
modifies revert;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure {:inline 1} tryToFinalize_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies __tmp__finalized_BasePoll;
modifies revert;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__state_Fund;
modifies __tmp__M_Ref_int;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__M_int_int;
procedure {:inline 1} isNowApproved_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
procedure {:inline 1} isNowApproved_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
procedure {:inline 1} isSubjectApproved_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:inline 1} DateTime_DateTime_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
procedure {:inline 1} DateTime_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
procedure {:inline 1} DateTime_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
procedure {:inline 1} isLeapYear_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s676: int) returns (__ret_0_: bool);
procedure {:inline 1} isLeapYear_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s676: int) returns (__ret_0_: bool);
procedure {:inline 1} leapYearsBefore_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year2_s704: int) returns (__ret_0_: int);
procedure {:inline 1} leapYearsBefore_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year2_s704: int) returns (__ret_0_: int);
procedure {:inline 1} getDaysInMonth_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, month_s774: int, year_s774: int) returns (__ret_0_: int);
procedure {:inline 1} getDaysInMonth_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, month_s774: int, year_s774: int) returns (__ret_0_: int);
procedure {:inline 1} parseTimestamp_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s943: int) returns (dt_s943: Ref);
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
procedure {:inline 1} getYear_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1031: int) returns (__ret_0_: int);
procedure {:inline 1} getYear_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1031: int) returns (__ret_0_: int);
procedure {:inline 1} getMonth_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1044: int) returns (__ret_0_: int);
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
procedure {:inline 1} getMonth_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1044: int) returns (__ret_0_: int);
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
procedure {:inline 1} getDay_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1057: int) returns (__ret_0_: int);
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
procedure {:inline 1} getDay_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1057: int) returns (__ret_0_: int);
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
procedure {:inline 1} getHour_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1076: int) returns (__ret_0_: int);
procedure {:inline 1} getHour_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1076: int) returns (__ret_0_: int);
procedure {:inline 1} getMinute_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1093: int) returns (__ret_0_: int);
procedure {:inline 1} getMinute_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1093: int) returns (__ret_0_: int);
procedure {:inline 1} getSecond_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1107: int) returns (__ret_0_: int);
procedure {:inline 1} getSecond_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1107: int) returns (__ret_0_: int);
procedure {:inline 1} getWeekday_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1126: int) returns (__ret_0_: int);
procedure {:inline 1} getWeekday_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1126: int) returns (__ret_0_: int);
procedure {:inline 1} toTimestamp3_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1153: int, month_s1153: int, day_s1153: int) returns (timestamp_s1153: int);
modifies M_int_int;
procedure {:inline 1} toTimestamp3_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1153: int, month_s1153: int, day_s1153: int) returns (timestamp_s1153: int);
modifies __tmp__M_int_int;
procedure {:inline 1} toTimestamp4_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1180: int, month_s1180: int, day_s1180: int, hour_s1180: int) returns (timestamp_s1180: int);
modifies M_int_int;
procedure {:inline 1} toTimestamp4_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1180: int, month_s1180: int, day_s1180: int, hour_s1180: int) returns (timestamp_s1180: int);
modifies __tmp__M_int_int;
procedure {:inline 1} toTimestamp5_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1207: int, month_s1207: int, day_s1207: int, hour_s1207: int, minute_s1207: int) returns (timestamp_s1207: int);
modifies M_int_int;
procedure {:inline 1} toTimestamp5_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1207: int, month_s1207: int, day_s1207: int, hour_s1207: int, minute_s1207: int) returns (timestamp_s1207: int);
modifies __tmp__M_int_int;
procedure {:inline 1} toTimestamp6_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1395: int, month_s1395: int, day_s1395: int, hour_s1395: int, minute_s1395: int, second_s1395: int) returns (timestamp_s1395: int);
modifies M_int_int;
procedure {:inline 1} toTimestamp6_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1395: int, month_s1395: int, day_s1395: int, hour_s1395: int, minute_s1395: int, second_s1395: int) returns (timestamp_s1395: int);
modifies __tmp__M_int_int;
procedure {:inline 1} ERC20Token_ERC20Token_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__balances_ERC20Token;
modifies __tmp__M_Ref_int;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__M_Ref_Ref;
modifies __tmp__Alloc;
procedure {:inline 1} ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies balances_ERC20Token;
modifies M_Ref_int;
modifies allowed_ERC20Token;
modifies M_Ref_Ref;
modifies Alloc;
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
procedure {:inline 1} ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__balances_ERC20Token;
modifies __tmp__M_Ref_int;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__M_Ref_Ref;
modifies __tmp__Alloc;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
procedure {:inline 1} transfer_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3586: Ref, _value_s3586: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_int;
procedure {:inline 1} transfer_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3586: Ref, _value_s3586: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_int;
procedure {:inline 1} transfer_ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3646: Ref, _value_s3646: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_int;
procedure {:inline 1} transferFrom_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3664: Ref, _to_s3664: Ref, _value_s3664: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:inline 1} transferFrom_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3664: Ref, _to_s3664: Ref, _value_s3664: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} transferFrom_ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3748: Ref, _to_s3748: Ref, _value_s3748: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} balanceOf_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3760: Ref) returns (__ret_0_: int);
procedure {:inline 1} balanceOf_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3760: Ref) returns (__ret_0_: int);
procedure {:inline 1} approve_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3775: Ref, _value_s3775: int) returns (__ret_0_: bool);
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:inline 1} approve_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3775: Ref, _value_s3775: int) returns (__ret_0_: bool);
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} approve_ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3803: Ref, _value_s3803: int) returns (__ret_0_: bool);
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} allowance_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3819: Ref, _spender_s3819: Ref) returns (__ret_0_: int);
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:inline 1} allowance_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3819: Ref, _spender_s3819: Ref) returns (__ret_0_: int);
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} Fund_Fund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref);
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__M_Ref_int;
modifies __tmp__state_Fund;
modifies __tmp__Alloc;
modifies __tmp__M_Ref_bool;
modifies __tmp__owners_MultiOwnable;
procedure {:constructor} {:inline 1} Fund_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref);
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies crowdsaleEndDate_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies lockedTokenAddress_Fund;
modifies refundManager_Fund;
modifies lastWithdrawTime_Fund;
modifies firstWithdrawAmount_Fund;
modifies crowdsaleAddress_Fund;
modifies contributions_Fund;
modifies M_Ref_int;
modifies state_Fund;
modifies Alloc;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
procedure {:constructor} {:inline 1} Fund_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref);
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__M_Ref_int;
modifies __tmp__state_Fund;
modifies __tmp__Alloc;
modifies __tmp__M_Ref_bool;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
procedure {:inline 1} setCrowdsaleAddress_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _crowdsaleAddress_s1592: Ref);
modifies revert;
modifies crowdsaleAddress_Fund;
procedure {:inline 1} setCrowdsaleAddress_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _crowdsaleAddress_s1592: Ref);
modifies revert;
modifies __tmp__crowdsaleAddress_Fund;
procedure {:inline 1} setTokenAddress_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s1616: Ref);
modifies revert;
modifies token_Fund;
procedure {:inline 1} setTokenAddress_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s1616: Ref);
modifies revert;
modifies __tmp__token_Fund;
procedure {:inline 1} setLockedTokenAddress_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _lockedTokenAddress_s1638: Ref);
modifies revert;
modifies lockedTokenAddress_Fund;
procedure {:inline 1} setLockedTokenAddress_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _lockedTokenAddress_s1638: Ref);
modifies revert;
modifies __tmp__lockedTokenAddress_Fund;
procedure {:inline 1} processContribution_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s1669: Ref);
modifies Balance;
modifies revert;
modifies M_Ref_int;
procedure {:inline 1} processContribution_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s1669: Ref);
modifies __tmp__Balance;
modifies revert;
modifies __tmp__M_Ref_int;
procedure {:inline 1} onCrowdsaleEnd_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies state_Fund;
modifies firstWithdrawAmount_Fund;
modifies lastWithdrawTime_Fund;
modifies crowdsaleEndDate_Fund;
modifies revert;
procedure {:inline 1} onCrowdsaleEnd_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__state_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies revert;
procedure {:inline 1} enableCrowdsaleRefund_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies state_Fund;
procedure {:inline 1} enableCrowdsaleRefund_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__state_Fund;
procedure {:inline 1} refundCrowdsaleContributor_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies M_Ref_int;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
procedure {:inline 1} refundCrowdsaleContributor_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__M_Ref_int;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:inline 1} autoRefundCrowdsaleContributor_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributorAddress_s1850: Ref);
modifies revert;
modifies M_Ref_int;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
procedure {:inline 1} autoRefundCrowdsaleContributor_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributorAddress_s1850: Ref);
modifies revert;
modifies __tmp__M_Ref_int;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:inline 1} getCurrentTapAmount_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
procedure {:inline 1} getCurrentTapAmount_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
procedure {:inline 1} calcTapAmount_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
procedure {:inline 1} firstWithdraw_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies firstWithdrawAmount_Fund;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
procedure {:inline 1} firstWithdraw_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__firstWithdrawAmount_Fund;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:inline 1} withdraw_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies lastWithdrawTime_Fund;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
procedure {:inline 1} withdraw_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__lastWithdrawTime_Fund;
modifies gas;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:inline 1} enableRefund_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__state_Fund;
modifies __tmp__M_Ref_int;
procedure {:inline 1} refundTokenHolder_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies gas;
modifies M_Ref_int;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies Balance;
procedure {:inline 1} refundTokenHolder_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies gas;
modifies __tmp__M_Ref_int;
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:inline 1} ICrowdsaleFund_ICrowdsaleFund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ICrowdsaleFund_ICrowdsaleFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ICrowdsaleFund_ICrowdsaleFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} IERC20Token_IERC20Token_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
procedure {:inline 1} IERC20Token_IERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
procedure {:inline 1} IERC20Token_IERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
procedure {:inline 1} IPollManagedFund_IPollManagedFund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} IPollManagedFund_IPollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} IPollManagedFund_IPollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ISimpleCrowdsale_ISimpleCrowdsale_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ISimpleCrowdsale_ISimpleCrowdsale__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ISimpleCrowdsale_ISimpleCrowdsale__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ITokenEventListener_ITokenEventListener_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ITokenEventListener_ITokenEventListener__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ITokenEventListener_ITokenEventListener__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:inline 1} ManagedToken_ManagedToken_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref);
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__M_Ref_bool;
modifies __tmp__owners_MultiOwnable;
procedure {:constructor} {:inline 1} ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref);
modifies name_IERC20Token;
modifies symbol_IERC20Token;
modifies decimals_IERC20Token;
modifies totalSupply_IERC20Token;
modifies balances_ERC20Token;
modifies M_Ref_int;
modifies allowed_ERC20Token;
modifies M_Ref_Ref;
modifies Alloc;
modifies allowTransfers_ManagedToken;
modifies issuanceFinished_ManagedToken;
modifies eventListener_ManagedToken;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
modifies manager_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
procedure {:constructor} {:inline 1} ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref);
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__balances_ERC20Token;
modifies __tmp__M_Ref_int;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__M_Ref_Ref;
modifies __tmp__Alloc;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__M_Ref_bool;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
procedure {:inline 1} approve_ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2501: Ref, _value_s2501: int) returns (__ret_0_: bool);
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} setAllowTransfers_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _allowTransfers_s2517: bool);
modifies allowTransfers_ManagedToken;
modifies revert;
procedure {:inline 1} setAllowTransfers_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _allowTransfers_s2517: bool);
modifies __tmp__allowTransfers_ManagedToken;
modifies revert;
procedure {:inline 1} setListener_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2542: Ref);
modifies eventListener_ManagedToken;
modifies revert;
procedure {:inline 1} setListener_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2542: Ref);
modifies __tmp__eventListener_ManagedToken;
modifies revert;
procedure {:inline 1} transfer_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2557: Ref, _value_s2557: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_int;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure {:inline 1} transfer_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2557: Ref, _value_s2557: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_int;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__weight_BasePoll.Vote;
procedure {:inline 1} transfer_ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2593: Ref, _value_s2593: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_int;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__weight_BasePoll.Vote;
procedure {:inline 1} transferFrom_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2611: Ref, _to_s2611: Ref, _value_s2611: int) returns (__ret_0_: bool);
modifies revert;
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure {:inline 1} transferFrom_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2611: Ref, _to_s2611: Ref, _value_s2611: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__weight_BasePoll.Vote;
procedure {:inline 1} transferFrom_ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2649: Ref, _to_s2649: Ref, _value_s2649: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__weight_BasePoll.Vote;
procedure {:inline 1} hasListener_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:inline 1} issue_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2704: Ref, _value_s2704: int);
modifies M_Ref_int;
modifies revert;
procedure {:inline 1} issue_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2704: Ref, _value_s2704: int);
modifies __tmp__M_Ref_int;
modifies revert;
procedure {:inline 1} destroy_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2756: Ref, _value_s2756: int);
modifies revert;
modifies M_Ref_int;
procedure {:inline 1} destroy_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2756: Ref, _value_s2756: int);
modifies revert;
modifies __tmp__M_Ref_int;
procedure {:inline 1} increaseApproval_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2797: Ref, _addedValue_s2797: int) returns (__ret_0_: bool);
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:inline 1} increaseApproval_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2797: Ref, _addedValue_s2797: int) returns (__ret_0_: bool);
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} decreaseApproval_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2857: Ref, _subtractedValue_s2857: int) returns (__ret_0_: bool);
modifies M_Ref_Ref;
modifies M_Ref_int;
modifies Alloc;
procedure {:inline 1} decreaseApproval_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2857: Ref, _subtractedValue_s2857: int) returns (__ret_0_: bool);
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__Alloc;
procedure {:inline 1} finishIssuance_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies issuanceFinished_ManagedToken;
modifies revert;
procedure {:inline 1} finishIssuance_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies __tmp__issuanceFinished_ManagedToken;
modifies revert;
procedure {:inline 1} MultiOwnable_MultiOwnable_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__M_Ref_bool;
modifies __tmp__Alloc;
procedure {:constructor} {:inline 1} MultiOwnable_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
modifies Alloc;
procedure {:constructor} {:inline 1} MultiOwnable_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__M_Ref_bool;
modifies __tmp__Alloc;
procedure {:inline 1} setOwners_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2931: Ref);
modifies revert;
modifies M_Ref_bool;
modifies owners_MultiOwnable;
procedure {:inline 1} setOwners_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2931: Ref);
modifies revert;
modifies __tmp__M_Ref_bool;
modifies __tmp__owners_MultiOwnable;
procedure {:inline 1} _setOwners_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2988: Ref);
modifies __tmp__M_Ref_bool;
modifies __tmp__owners_MultiOwnable;
procedure {:inline 1} getOwners_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: Ref);
procedure {:inline 1} getOwners_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: Ref);
procedure {:inline 1} PollManagedFund_PollManagedFund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref);
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__Alloc;
procedure {:constructor} {:inline 1} PollManagedFund_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref);
modifies manager_MultiOwnable;
modifies owners_MultiOwnable;
modifies ownerByAddress_MultiOwnable;
modifies M_Ref_bool;
modifies Alloc;
modifies INITIAL_TAP_Fund;
modifies teamWallet_Fund;
modifies crowdsaleEndDate_Fund;
modifies referralTokenWallet_Fund;
modifies foundationTokenWallet_Fund;
modifies reserveTokenWallet_Fund;
modifies bountyTokenWallet_Fund;
modifies companyTokenWallet_Fund;
modifies advisorTokenWallet_Fund;
modifies lockedTokenAddress_Fund;
modifies refundManager_Fund;
modifies lastWithdrawTime_Fund;
modifies firstWithdrawAmount_Fund;
modifies crowdsaleAddress_Fund;
modifies contributions_Fund;
modifies M_Ref_int;
modifies state_Fund;
modifies DAY_IN_SECONDS_DateTime;
modifies YEAR_IN_SECONDS_DateTime;
modifies LEAP_YEAR_IN_SECONDS_DateTime;
modifies HOUR_IN_SECONDS_DateTime;
modifies MINUTE_IN_SECONDS_DateTime;
modifies ORIGIN_YEAR_DateTime;
modifies TAP_POLL_DURATION_PollManagedFund;
modifies REFUND_POLL_DURATION_PollManagedFund;
modifies MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies minVotedTokensPerc_PollManagedFund;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies refundPollDates_PollManagedFund;
procedure {:constructor} {:inline 1} PollManagedFund_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref);
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__M_Ref_bool;
modifies __tmp__Alloc;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__M_Ref_int;
modifies __tmp__state_Fund;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
procedure {:inline 1} canWithdraw_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
procedure {:inline 1} canWithdraw_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
procedure {:inline 1} onTokenTransfer_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s211: Ref, __param_0_: Ref, _value_s211: int);
modifies revert;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies weight_BasePoll.Vote;
procedure {:inline 1} onTokenTransfer_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s211: Ref, __param_0_: Ref, _value_s211: int);
modifies revert;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__weight_BasePoll.Vote;
procedure {:inline 1} updateMinVotedTokens_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _minVotedTokensPerc_s237: int);
modifies __tmp__minVotedTokensPerc_PollManagedFund;
procedure {:inline 1} createTapPoll_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tapIncPerc_s317: int);
modifies revert;
modifies tapPoll_PollManagedFund;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies Alloc;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
procedure {:inline 1} createTapPoll_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tapIncPerc_s317: int);
modifies revert;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__Alloc;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__M_Ref_Ref;
modifies __tmp__token_BasePoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:inline 1} onTapPollFinish_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s352: bool, _tap_s352: int);
modifies revert;
modifies minVotedTokensPerc_PollManagedFund;
procedure {:inline 1} onTapPollFinish_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s352: bool, _tap_s352: int);
modifies revert;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
procedure {:inline 1} checkRefundPollDate_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:inline 1} createRefundPoll_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies secondRefundPollDate_PollManagedFund;
modifies refundPoll_PollManagedFund;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
modifies Alloc;
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies token_BasePoll;
modifies holdEndTime_RefundPoll;
procedure {:inline 1} createRefundPoll_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__M_int_int;
modifies __tmp__Alloc;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__M_Ref_Ref;
modifies __tmp__token_BasePoll;
modifies __tmp__holdEndTime_RefundPoll;
procedure {:inline 1} onRefundPollFinish_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s589: bool);
modifies revert;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure {:inline 1} onRefundPollFinish_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s589: bool);
modifies revert;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__state_Fund;
modifies __tmp__M_Ref_int;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__M_int_int;
procedure {:inline 1} forceRefund_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies state_Fund;
modifies M_Ref_int;
procedure {:inline 1} forceRefund_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
modifies __tmp__state_Fund;
modifies __tmp__M_Ref_int;
procedure {:inline 1} RefundPoll_RefundPoll_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool);
modifies __tmp__holdEndTime_RefundPoll;
procedure {:constructor} {:inline 1} RefundPoll_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool);
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies revert;
modifies token_BasePoll;
modifies Alloc;
modifies holdEndTime_RefundPoll;
procedure {:constructor} {:inline 1} RefundPoll_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool);
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__M_Ref_Ref;
modifies revert;
modifies __tmp__token_BasePoll;
modifies __tmp__Alloc;
modifies __tmp__holdEndTime_RefundPoll;
procedure {:inline 1} tryToFinalize_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
modifies finalized_BasePoll;
modifies secondRefundPollDate_PollManagedFund;
modifies isWithdrawEnabled_PollManagedFund;
modifies state_Fund;
modifies M_Ref_int;
modifies year_DateTime._DateTime;
modifies month_DateTime._DateTime;
modifies day_DateTime._DateTime;
modifies hour_DateTime._DateTime;
modifies minute_DateTime._DateTime;
modifies second_DateTime._DateTime;
modifies weekday_DateTime._DateTime;
modifies M_int_int;
procedure {:inline 1} tryToFinalize_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
modifies __tmp__finalized_BasePoll;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__state_Fund;
modifies __tmp__M_Ref_int;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__M_int_int;
procedure {:inline 1} isSubjectApproved_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
procedure {:inline 1} onPollFinish_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2273: bool);
modifies revert;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__state_Fund;
modifies __tmp__M_Ref_int;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__M_int_int;
procedure {:inline 1} SafeMath_SafeMath_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:constructor} {:inline 1} SafeMath_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
procedure {:constructor} {:inline 1} SafeMath_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
// procedure {:inline 1} safeMul_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3034: int, b_s3034: int) returns (__ret_0_: int);
// procedure {:inline 1} safeDiv_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3052: int, b_s3052: int) returns (__ret_0_: int);
procedure {:inline 1} safeSub_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3072: int, b_s3072: int) returns (__ret_0_: int);
procedure {:inline 1} safeAdd_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3096: int, b_s3096: int) returns (__ret_0_: int);
procedure {:inline 1} TapPoll_TapPoll_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int);
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:constructor} {:inline 1} TapPoll_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int);
modifies MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies fundAddress_BasePoll;
modifies startTime_BasePoll;
modifies endTime_BasePoll;
modifies checkTransfersAfterEnd_BasePoll;
modifies yesCounter_BasePoll;
modifies noCounter_BasePoll;
modifies totalVoted_BasePoll;
modifies finalized_BasePoll;
modifies votesByAddress_BasePoll;
modifies M_Ref_Ref;
modifies revert;
modifies token_BasePoll;
modifies Alloc;
modifies tap_TapPoll;
modifies minTokensPerc_TapPoll;
procedure {:constructor} {:inline 1} TapPoll_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int);
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__M_Ref_Ref;
modifies revert;
modifies __tmp__token_BasePoll;
modifies __tmp__Alloc;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
procedure {:inline 1} onPollFinish_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2335: bool);
modifies revert;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
procedure {:inline 1} getVotedTokensPerc_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
modifies revert;
procedure {:inline 1} getVotedTokensPerc_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int);
modifies revert;
procedure {:inline 1} isSubjectApproved_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool);
modifies revert;
procedure {:inline 1} FallbackDispatch__fail(from: Ref, to: Ref, amount: int);
modifies __tmp__Balance;
procedure {:inline 1} Fallback_UnknownType__fail(from: Ref, to: Ref, amount: int);
modifies __tmp__Balance;
procedure {:inline 1} send__fail(from: Ref, to: Ref, amount: int) returns (success: bool);
modifies __tmp__Balance;
modifies __tmp__DType;
modifies __tmp__Alloc;
modifies __tmp__balance_ADDR;
modifies __tmp__M_Ref_Ref;
modifies __tmp__M_Ref_int;
modifies __tmp__M_Ref_bool;
modifies __tmp__M_int_int;
modifies __tmp__M_int_Ref;
modifies __tmp__Length;
modifies __tmp__now;
modifies __tmp__time_BasePoll.Vote;
modifies __tmp__weight_BasePoll.Vote;
modifies __tmp__agree_BasePoll.Vote;
modifies __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
modifies __tmp__token_BasePoll;
modifies __tmp__fundAddress_BasePoll;
modifies __tmp__startTime_BasePoll;
modifies __tmp__endTime_BasePoll;
modifies __tmp__checkTransfersAfterEnd_BasePoll;
modifies __tmp__yesCounter_BasePoll;
modifies __tmp__noCounter_BasePoll;
modifies __tmp__totalVoted_BasePoll;
modifies __tmp__finalized_BasePoll;
modifies __tmp__votesByAddress_BasePoll;
modifies __tmp__year_DateTime._DateTime;
modifies __tmp__month_DateTime._DateTime;
modifies __tmp__day_DateTime._DateTime;
modifies __tmp__hour_DateTime._DateTime;
modifies __tmp__minute_DateTime._DateTime;
modifies __tmp__second_DateTime._DateTime;
modifies __tmp__weekday_DateTime._DateTime;
modifies __tmp__DAY_IN_SECONDS_DateTime;
modifies __tmp__YEAR_IN_SECONDS_DateTime;
modifies __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
modifies __tmp__HOUR_IN_SECONDS_DateTime;
modifies __tmp__MINUTE_IN_SECONDS_DateTime;
modifies __tmp__ORIGIN_YEAR_DateTime;
modifies __tmp__balances_ERC20Token;
modifies __tmp__allowed_ERC20Token;
modifies __tmp__state_Fund;
modifies __tmp__token_Fund;
modifies __tmp__INITIAL_TAP_Fund;
modifies __tmp__teamWallet_Fund;
modifies __tmp__crowdsaleEndDate_Fund;
modifies __tmp__referralTokenWallet_Fund;
modifies __tmp__foundationTokenWallet_Fund;
modifies __tmp__reserveTokenWallet_Fund;
modifies __tmp__bountyTokenWallet_Fund;
modifies __tmp__companyTokenWallet_Fund;
modifies __tmp__advisorTokenWallet_Fund;
modifies __tmp__lockedTokenAddress_Fund;
modifies __tmp__refundManager_Fund;
modifies __tmp__lastWithdrawTime_Fund;
modifies __tmp__firstWithdrawAmount_Fund;
modifies __tmp__crowdsaleAddress_Fund;
modifies __tmp__contributions_Fund;
modifies __tmp__name_IERC20Token;
modifies __tmp__symbol_IERC20Token;
modifies __tmp__decimals_IERC20Token;
modifies __tmp__totalSupply_IERC20Token;
modifies __tmp__allowTransfers_ManagedToken;
modifies __tmp__issuanceFinished_ManagedToken;
modifies __tmp__eventListener_ManagedToken;
modifies __tmp__manager_MultiOwnable;
modifies __tmp__owners_MultiOwnable;
modifies __tmp__ownerByAddress_MultiOwnable;
modifies __tmp__TAP_POLL_DURATION_PollManagedFund;
modifies __tmp__REFUND_POLL_DURATION_PollManagedFund;
modifies __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
modifies __tmp__tapPoll_PollManagedFund;
modifies __tmp__refundPoll_PollManagedFund;
modifies __tmp__minVotedTokensPerc_PollManagedFund;
modifies __tmp__secondRefundPollDate_PollManagedFund;
modifies __tmp__isWithdrawEnabled_PollManagedFund;
modifies __tmp__refundPollDates_PollManagedFund;
modifies __tmp__holdEndTime_RefundPoll;
modifies __tmp__tap_TapPoll;
modifies __tmp__minTokensPerc_TapPoll;
modifies revert;
procedure checkTime_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure notFinalized_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure withdrawEnabled_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure onlyCrowdsale_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure transfersAllowed_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure canIssue_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure onlyOwner_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
procedure onlyTokenHolder_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int);
modifies revert;
implementation FreshRefGenerator__fail() returns (newRef: Ref)
{
havoc newRef;
assume ((__tmp__Alloc[newRef]) == (false));
__tmp__Alloc[newRef] := true;
assume ((newRef) != (null));
}

implementation FreshRefGenerator__success() returns (newRef: Ref)
{
havoc newRef;
assume ((Alloc[newRef]) == (false));
Alloc[newRef] := true;
assume ((newRef) != (null));
}

implementation BasePoll.Vote_ctor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, time: int, weight: int, agree: bool)
{
__tmp__time_BasePoll.Vote[this] := time;
__tmp__weight_BasePoll.Vote[this] := weight;
__tmp__agree_BasePoll.Vote[this] := agree;
}

implementation BasePoll.Vote_ctor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, time: int, weight: int, agree: bool)
{
time_BasePoll.Vote[this] := time;
weight_BasePoll.Vote[this] := weight;
agree_BasePoll.Vote[this] := agree;
}

implementation DateTime._DateTime_ctor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year: int, month: int, day: int, hour: int, minute: int, second: int, weekday: int)
{
__tmp__year_DateTime._DateTime[this] := year;
__tmp__month_DateTime._DateTime[this] := month;
__tmp__day_DateTime._DateTime[this] := day;
__tmp__hour_DateTime._DateTime[this] := hour;
__tmp__minute_DateTime._DateTime[this] := minute;
__tmp__second_DateTime._DateTime[this] := second;
__tmp__weekday_DateTime._DateTime[this] := weekday;
}

implementation DateTime._DateTime_ctor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year: int, month: int, day: int, hour: int, minute: int, second: int, weekday: int)
{
year_DateTime._DateTime[this] := year;
month_DateTime._DateTime[this] := month;
day_DateTime._DateTime[this] := day;
hour_DateTime._DateTime[this] := hour;
minute_DateTime._DateTime[this] := minute;
second_DateTime._DateTime[this] := second;
weekday_DateTime._DateTime[this] := weekday;
}

implementation BasePoll_BasePoll_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool)
{
var __var_1: Ref;
var __var_2: Ref;
var __var_3: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll[this] := 1000;
__tmp__fundAddress_BasePoll[this] := null;
__tmp__startTime_BasePoll[this] := 0;
__tmp__endTime_BasePoll[this] := 0;
__tmp__checkTransfersAfterEnd_BasePoll[this] := false;
__tmp__yesCounter_BasePoll[this] := 0;
__tmp__noCounter_BasePoll[this] := 0;
__tmp__totalVoted_BasePoll[this] := 0;
__tmp__finalized_BasePoll[this] := false;
// Make array/mapping vars distinct for votesByAddress
call __var_3 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__votesByAddress_BasePoll[this] := __var_3;
// Initialize address/contract mapping votesByAddress
__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]] := zeroRefRefArr();
// end of initialization
__var_1 := null;
if (!((_tokenAddress_s3219) != (null))) {
revert := true;
return;
}
assume ((_startTime_s3219) >= (0));
assume ((__tmp__now) >= (0));
assume ((_endTime_s3219) >= (0));
assume ((_startTime_s3219) >= (0));
if (!(((_startTime_s3219) >= (__tmp__now)) && ((_endTime_s3219) > (_startTime_s3219)))) {
revert := true;
return;
}
assume ((__tmp__DType[_tokenAddress_s3219]) == (IERC20Token));
__var_2 := _tokenAddress_s3219;
__tmp__token_BasePoll[this] := __var_2;
__tmp__fundAddress_BasePoll[this] := _fundAddress_s3219;
assume ((__tmp__startTime_BasePoll[this]) >= (0));
assume ((_startTime_s3219) >= (0));
__tmp__startTime_BasePoll[this] := _startTime_s3219;
assume ((__tmp__endTime_BasePoll[this]) >= (0));
assume ((_endTime_s3219) >= (0));
__tmp__endTime_BasePoll[this] := _endTime_s3219;
__tmp__finalized_BasePoll[this] := false;
__tmp__checkTransfersAfterEnd_BasePoll[this] := _checkTransfersAfterEnd_s3219;
}

implementation BasePoll_BasePoll_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool)
{
var __var_1: Ref;
var __var_2: Ref;
var __var_3: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
MAX_TOKENS_WEIGHT_DENOM_BasePoll[this] := 1000;
fundAddress_BasePoll[this] := null;
startTime_BasePoll[this] := 0;
endTime_BasePoll[this] := 0;
checkTransfersAfterEnd_BasePoll[this] := false;
yesCounter_BasePoll[this] := 0;
noCounter_BasePoll[this] := 0;
totalVoted_BasePoll[this] := 0;
finalized_BasePoll[this] := false;
// Make array/mapping vars distinct for votesByAddress
call __var_3 := FreshRefGenerator__success();
if (revert) {
return;
}
votesByAddress_BasePoll[this] := __var_3;
// Initialize address/contract mapping votesByAddress
M_Ref_Ref[votesByAddress_BasePoll[this]] := zeroRefRefArr();
// end of initialization
__var_1 := null;
if (!((_tokenAddress_s3219) != (null))) {
revert := true;
return;
}
assume ((_startTime_s3219) >= (0));
assume ((now) >= (0));
assume ((_endTime_s3219) >= (0));
assume ((_startTime_s3219) >= (0));
if (!(((_startTime_s3219) >= (now)) && ((_endTime_s3219) > (_startTime_s3219)))) {
revert := true;
return;
}
assume ((DType[_tokenAddress_s3219]) == (IERC20Token));
__var_2 := _tokenAddress_s3219;
token_BasePoll[this] := __var_2;
fundAddress_BasePoll[this] := _fundAddress_s3219;
assume ((startTime_BasePoll[this]) >= (0));
assume ((_startTime_s3219) >= (0));
startTime_BasePoll[this] := _startTime_s3219;
assume ((endTime_BasePoll[this]) >= (0));
assume ((_endTime_s3219) >= (0));
endTime_BasePoll[this] := _endTime_s3219;
finalized_BasePoll[this] := false;
checkTransfersAfterEnd_BasePoll[this] := _checkTransfersAfterEnd_s3219;
}

implementation BasePoll_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool)
{
var __var_1: Ref;
var __var_2: Ref;
var __var_3: Ref;
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call BasePoll_BasePoll_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s3219, _fundAddress_s3219, _startTime_s3219, _endTime_s3219, _checkTransfersAfterEnd_s3219);
if (revert) {
return;
}
}

implementation BasePoll_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s3219: Ref, _fundAddress_s3219: Ref, _startTime_s3219: int, _endTime_s3219: int, _checkTransfersAfterEnd_s3219: bool)
{
var __var_1: Ref;
var __var_2: Ref;
var __var_3: Ref;
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call BasePoll_BasePoll_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s3219, _fundAddress_s3219, _startTime_s3219, _endTime_s3219, _checkTransfersAfterEnd_s3219);
if (revert) {
return;
}
}

implementation vote_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s3313: bool)
{
var voiceWeight_s3312: int;
var __var_4: int;
var maxVoiceWeight_s3312: int;
var __var_5: int;
var __var_6: int;
var __var_7: int;
var __var_8: int;
var __var_9: int;
var __var_10: int;
call checkTime_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
if (!((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) == (0))) {
revert := true;
return;
}
assume ((voiceWeight_s3312) >= (0));
if ((__tmp__DType[__tmp__token_BasePoll[this]]) == (ManagedToken)) {
call voiceWeight_s3312 := balanceOf_ERC20Token__fail(__tmp__token_BasePoll[this], this, __var_4, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_BasePoll[this]]) == (ERC20Token)) {
call voiceWeight_s3312 := balanceOf_ERC20Token__fail(__tmp__token_BasePoll[this], this, __var_4, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_BasePoll[this]]) == (IERC20Token)) {
call voiceWeight_s3312 := balanceOf_IERC20Token(__tmp__token_BasePoll[this], this, __var_4, msgsender_MSG);
} else {
assume (false);
}
voiceWeight_s3312 := voiceWeight_s3312;
assume ((maxVoiceWeight_s3312) >= (0));
assume ((__var_5) >= (0));
assume ((__tmp__DType[__tmp__token_BasePoll[this]]) == (IERC20Token));
__var_5 := __tmp__totalSupply_IERC20Token[__tmp__token_BasePoll[this]];
assume ((__var_5) >= (0));
assume (((__var_5) / (1000)) >= (0));
maxVoiceWeight_s3312 := (__var_5) / (1000);
assume ((voiceWeight_s3312) >= (0));
assume ((voiceWeight_s3312) >= (0));
assume ((maxVoiceWeight_s3312) >= (0));
assume ((voiceWeight_s3312) >= (0));
assume ((maxVoiceWeight_s3312) >= (0));
assume ((if (voiceWeight_s3312) <= (maxVoiceWeight_s3312) then (voiceWeight_s3312) else (maxVoiceWeight_s3312)) >= (0));
voiceWeight_s3312 := if (voiceWeight_s3312) <= (maxVoiceWeight_s3312) then (voiceWeight_s3312) else (maxVoiceWeight_s3312);
if (agree_s3313) {
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3312) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_7 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_7 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_7 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__yesCounter_BasePoll[this] := __var_7;
assume ((__var_7) >= (0));
} else {
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3312) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_8 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_8 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_8 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__noCounter_BasePoll[this] := __var_8;
assume ((__var_8) >= (0));
}
assume ((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
assume ((__tmp__now) >= (0));
__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]] := __tmp__now;
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
assume ((voiceWeight_s3312) >= (0));
__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]] := voiceWeight_s3312;
__tmp__agree_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]] := agree_s3313;
assume ((__tmp__totalVoted_BasePoll[this]) >= (0));
assume ((__tmp__totalVoted_BasePoll[this]) >= (0));
assume ((__var_10) >= (0));
__var_10 := 1;
assume ((1) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_9 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_9 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_9 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__totalVoted_BasePoll[this] := __var_9;
assume ((__var_9) >= (0));
}

implementation vote_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s3313: bool)
{
var voiceWeight_s3312: int;
var __var_4: int;
var maxVoiceWeight_s3312: int;
var __var_5: int;
var __var_6: int;
var __var_7: int;
var __var_8: int;
var __var_9: int;
var __var_10: int;
call checkTime_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
if (!((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) == (0))) {
revert := true;
return;
}
assume ((voiceWeight_s3312) >= (0));
if ((DType[token_BasePoll[this]]) == (ManagedToken)) {
call voiceWeight_s3312 := balanceOf_ERC20Token__success(token_BasePoll[this], this, __var_4, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_BasePoll[this]]) == (ERC20Token)) {
call voiceWeight_s3312 := balanceOf_ERC20Token__success(token_BasePoll[this], this, __var_4, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_BasePoll[this]]) == (IERC20Token)) {
call voiceWeight_s3312 := balanceOf_IERC20Token(token_BasePoll[this], this, __var_4, msgsender_MSG);
} else {
assume (false);
}
voiceWeight_s3312 := voiceWeight_s3312;
assume ((maxVoiceWeight_s3312) >= (0));
assume ((__var_5) >= (0));
assume ((DType[token_BasePoll[this]]) == (IERC20Token));
__var_5 := totalSupply_IERC20Token[token_BasePoll[this]];
assume ((__var_5) >= (0));
assume (((__var_5) / (1000)) >= (0));
maxVoiceWeight_s3312 := (__var_5) / (1000);
assume ((voiceWeight_s3312) >= (0));
assume ((voiceWeight_s3312) >= (0));
assume ((maxVoiceWeight_s3312) >= (0));
assume ((voiceWeight_s3312) >= (0));
assume ((maxVoiceWeight_s3312) >= (0));
assume ((if (voiceWeight_s3312) <= (maxVoiceWeight_s3312) then (voiceWeight_s3312) else (maxVoiceWeight_s3312)) >= (0));
voiceWeight_s3312 := if (voiceWeight_s3312) <= (maxVoiceWeight_s3312) then (voiceWeight_s3312) else (maxVoiceWeight_s3312);
if (agree_s3313) {
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3312) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_7 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_7 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_7 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else {
assume (false);
}
yesCounter_BasePoll[this] := __var_7;
assume ((__var_7) >= (0));
} else {
assume ((noCounter_BasePoll[this]) >= (0));
assume ((noCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3312) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_8 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_8 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_8 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3312);
if (revert) {
return;
}
} else {
assume (false);
}
noCounter_BasePoll[this] := __var_8;
assume ((__var_8) >= (0));
}
assume ((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
assume ((now) >= (0));
time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]] := now;
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
assume ((voiceWeight_s3312) >= (0));
weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]] := voiceWeight_s3312;
agree_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]] := agree_s3313;
assume ((totalVoted_BasePoll[this]) >= (0));
assume ((totalVoted_BasePoll[this]) >= (0));
assume ((__var_10) >= (0));
__var_10 := 1;
assume ((1) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_9 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_9 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_9 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
totalVoted_BasePoll[this] := __var_9;
assume ((__var_9) >= (0));
}

implementation revokeVote_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var voiceWeight_s3395: int;
var agree_s3395: bool;
var __var_11: int;
var __var_12: int;
var __var_13: int;
var __var_14: int;
call checkTime_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
if (!((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) > (0))) {
revert := true;
return;
}
assume ((voiceWeight_s3395) >= (0));
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
voiceWeight_s3395 := __tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]];
agree_s3395 := __tmp__agree_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]];
assume ((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]] := 0;
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]] := 0;
__tmp__agree_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][msgsender_MSG]] := false;
assume ((__tmp__totalVoted_BasePoll[this]) >= (0));
assume ((__tmp__totalVoted_BasePoll[this]) >= (0));
assume ((__var_12) >= (0));
__var_12 := 1;
assume ((1) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_11 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_11 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_11 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__totalVoted_BasePoll[this] := __var_11;
assume ((__var_11) >= (0));
if (agree_s3395) {
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3395) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_13 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_13 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_13 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__yesCounter_BasePoll[this] := __var_13;
assume ((__var_13) >= (0));
} else {
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3395) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_14 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_14 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_14 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__noCounter_BasePoll[this] := __var_14;
assume ((__var_14) >= (0));
}
}

implementation revokeVote_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var voiceWeight_s3395: int;
var agree_s3395: bool;
var __var_11: int;
var __var_12: int;
var __var_13: int;
var __var_14: int;
call checkTime_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
if (!((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) > (0))) {
revert := true;
return;
}
assume ((voiceWeight_s3395) >= (0));
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
voiceWeight_s3395 := weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]];
agree_s3395 := agree_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]];
assume ((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]] := 0;
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]]) >= (0));
weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]] := 0;
agree_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][msgsender_MSG]] := false;
assume ((totalVoted_BasePoll[this]) >= (0));
assume ((totalVoted_BasePoll[this]) >= (0));
assume ((__var_12) >= (0));
__var_12 := 1;
assume ((1) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_11 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_11 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_11 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalVoted_BasePoll[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
totalVoted_BasePoll[this] := __var_11;
assume ((__var_11) >= (0));
if (agree_s3395) {
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3395) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_13 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_13 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_13 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else {
assume (false);
}
yesCounter_BasePoll[this] := __var_13;
assume ((__var_13) >= (0));
} else {
assume ((noCounter_BasePoll[this]) >= (0));
assume ((noCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3395) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_14 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_14 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_14 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3395);
if (revert) {
return;
}
} else {
assume (false);
}
noCounter_BasePoll[this] := __var_14;
assume ((__var_14) >= (0));
}
}

implementation onTokenTransfer_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tokenHolder_s3502: Ref, amount_s3502: int)
{
var __var_15: int;
var __var_16: int;
var voiceWeight_s3501: int;
var __var_17: int;
var __var_18: int;
var __var_19: int;
if (!((msgsender_MSG) == (__tmp__fundAddress_BasePoll[this]))) {
revert := true;
return;
}
assume ((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
if ((__tmp__time_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) == (0)) {
return;
}
if (!(__tmp__checkTransfersAfterEnd_BasePoll[this])) {
assume ((__tmp__now) >= (0));
assume ((__tmp__startTime_BasePoll[this]) >= (0));
assume ((__tmp__now) >= (0));
assume ((__tmp__endTime_BasePoll[this]) >= (0));
if ((__tmp__finalized_BasePoll[this]) || ((((__tmp__now) < (__tmp__startTime_BasePoll[this])) || ((__tmp__now) > (__tmp__endTime_BasePoll[this]))))) {
return;
}
}
assume ((__var_15) >= (0));
if ((__tmp__DType[__tmp__token_BasePoll[this]]) == (ManagedToken)) {
call __var_15 := balanceOf_ERC20Token__fail(__tmp__token_BasePoll[this], this, __var_16, tokenHolder_s3502);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_BasePoll[this]]) == (ERC20Token)) {
call __var_15 := balanceOf_ERC20Token__fail(__tmp__token_BasePoll[this], this, __var_16, tokenHolder_s3502);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_BasePoll[this]]) == (IERC20Token)) {
call __var_15 := balanceOf_IERC20Token(__tmp__token_BasePoll[this], this, __var_16, tokenHolder_s3502);
} else {
assume (false);
}
assume ((__var_15) >= (0));
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
if ((__var_15) >= (__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]])) {
return;
}
assume ((voiceWeight_s3501) >= (0));
assume ((amount_s3502) >= (0));
voiceWeight_s3501 := amount_s3502;
assume ((amount_s3502) >= (0));
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
if ((amount_s3502) > (__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]])) {
assume ((voiceWeight_s3501) >= (0));
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
voiceWeight_s3501 := __tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]];
}
if (__tmp__agree_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) {
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3501) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_17 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_17 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_17 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__yesCounter_BasePoll[this] := __var_17;
assume ((__var_17) >= (0));
} else {
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3501) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_18 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_18 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_18 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__noCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__noCounter_BasePoll[this] := __var_18;
assume ((__var_18) >= (0));
}
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
assume ((__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
assume ((voiceWeight_s3501) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_19 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_19 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_19 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]], voiceWeight_s3501);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__weight_BasePoll.Vote[__tmp__M_Ref_Ref[__tmp__votesByAddress_BasePoll[this]][tokenHolder_s3502]] := __var_19;
assume ((__var_19) >= (0));
}

implementation onTokenTransfer_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tokenHolder_s3502: Ref, amount_s3502: int)
{
var __var_15: int;
var __var_16: int;
var voiceWeight_s3501: int;
var __var_17: int;
var __var_18: int;
var __var_19: int;
if (!((msgsender_MSG) == (fundAddress_BasePoll[this]))) {
revert := true;
return;
}
assume ((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
if ((time_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) == (0)) {
return;
}
if (!(checkTransfersAfterEnd_BasePoll[this])) {
assume ((now) >= (0));
assume ((startTime_BasePoll[this]) >= (0));
assume ((now) >= (0));
assume ((endTime_BasePoll[this]) >= (0));
if ((finalized_BasePoll[this]) || ((((now) < (startTime_BasePoll[this])) || ((now) > (endTime_BasePoll[this]))))) {
return;
}
}
assume ((__var_15) >= (0));
if ((DType[token_BasePoll[this]]) == (ManagedToken)) {
call __var_15 := balanceOf_ERC20Token__success(token_BasePoll[this], this, __var_16, tokenHolder_s3502);
if (revert) {
return;
}
} else if ((DType[token_BasePoll[this]]) == (ERC20Token)) {
call __var_15 := balanceOf_ERC20Token__success(token_BasePoll[this], this, __var_16, tokenHolder_s3502);
if (revert) {
return;
}
} else if ((DType[token_BasePoll[this]]) == (IERC20Token)) {
call __var_15 := balanceOf_IERC20Token(token_BasePoll[this], this, __var_16, tokenHolder_s3502);
} else {
assume (false);
}
assume ((__var_15) >= (0));
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
if ((__var_15) >= (weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]])) {
return;
}
assume ((voiceWeight_s3501) >= (0));
assume ((amount_s3502) >= (0));
voiceWeight_s3501 := amount_s3502;
assume ((amount_s3502) >= (0));
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
if ((amount_s3502) > (weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]])) {
assume ((voiceWeight_s3501) >= (0));
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
voiceWeight_s3501 := weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]];
}
if (agree_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) {
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3501) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_17 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_17 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_17 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else {
assume (false);
}
yesCounter_BasePoll[this] := __var_17;
assume ((__var_17) >= (0));
} else {
assume ((noCounter_BasePoll[this]) >= (0));
assume ((noCounter_BasePoll[this]) >= (0));
assume ((voiceWeight_s3501) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_18 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_18 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_18 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, noCounter_BasePoll[this], voiceWeight_s3501);
if (revert) {
return;
}
} else {
assume (false);
}
noCounter_BasePoll[this] := __var_18;
assume ((__var_18) >= (0));
}
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
assume ((weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]]) >= (0));
assume ((voiceWeight_s3501) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_19 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_19 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]], voiceWeight_s3501);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_19 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]], voiceWeight_s3501);
if (revert) {
return;
}
} else {
assume (false);
}
weight_BasePoll.Vote[M_Ref_Ref[votesByAddress_BasePoll[this]][tokenHolder_s3502]] := __var_19;
assume ((__var_19) >= (0));
}

implementation tryToFinalize_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_20: bool;
call notFinalized_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((__tmp__now) >= (0));
assume ((__tmp__endTime_BasePoll[this]) >= (0));
if ((__tmp__now) < (__tmp__endTime_BasePoll[this])) {
__ret_0_ := false;
return;
}
__tmp__finalized_BasePoll[this] := true;
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_20 := isSubjectApproved_TapPoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_20 := isSubjectApproved_RefundPoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_20 := isSubjectApproved_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
if ((__tmp__DType[this]) == (TapPoll)) {
call onPollFinish_TapPoll__fail(this, msgsender_MSG, msgvalue_MSG, __var_20);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call onPollFinish_RefundPoll__fail(this, msgsender_MSG, msgvalue_MSG, __var_20);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call onPollFinish_BasePoll(this, msgsender_MSG, msgvalue_MSG, __var_20);
} else {
assume (false);
}
__ret_0_ := true;
return;
}

implementation tryToFinalize_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_20: bool;
call notFinalized_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((now) >= (0));
assume ((endTime_BasePoll[this]) >= (0));
if ((now) < (endTime_BasePoll[this])) {
__ret_0_ := false;
return;
}
finalized_BasePoll[this] := true;
if ((DType[this]) == (TapPoll)) {
call __var_20 := isSubjectApproved_TapPoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_20 := isSubjectApproved_RefundPoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_20 := isSubjectApproved_BasePoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
if ((DType[this]) == (TapPoll)) {
call onPollFinish_TapPoll__success(this, msgsender_MSG, msgvalue_MSG, __var_20);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call onPollFinish_RefundPoll__success(this, msgsender_MSG, msgvalue_MSG, __var_20);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call onPollFinish_BasePoll(this, msgsender_MSG, msgvalue_MSG, __var_20);
} else {
assume (false);
}
__ret_0_ := true;
return;
}

implementation isNowApproved_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_21: bool;
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_21 := isSubjectApproved_TapPoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_21 := isSubjectApproved_RefundPoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (BasePoll)) {
call __var_21 := isSubjectApproved_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_21;
return;
}

implementation isNowApproved_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_21: bool;
if ((DType[this]) == (TapPoll)) {
call __var_21 := isSubjectApproved_TapPoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (RefundPoll)) {
call __var_21 := isSubjectApproved_RefundPoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (BasePoll)) {
call __var_21 := isSubjectApproved_BasePoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_21;
return;
}

implementation isSubjectApproved_BasePoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
__ret_0_ := (__tmp__yesCounter_BasePoll[this]) > (__tmp__noCounter_BasePoll[this]);
return;
}

implementation isSubjectApproved_BasePoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((noCounter_BasePoll[this]) >= (0));
__ret_0_ := (yesCounter_BasePoll[this]) > (noCounter_BasePoll[this]);
return;
}

implementation DateTime_DateTime_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__DAY_IN_SECONDS_DateTime[this] := 86400;
__tmp__YEAR_IN_SECONDS_DateTime[this] := 31536000;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime[this] := 31622400;
__tmp__HOUR_IN_SECONDS_DateTime[this] := 3600;
__tmp__MINUTE_IN_SECONDS_DateTime[this] := 60;
__tmp__ORIGIN_YEAR_DateTime[this] := 1970;
// end of initialization
}

implementation DateTime_DateTime_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
DAY_IN_SECONDS_DateTime[this] := 86400;
YEAR_IN_SECONDS_DateTime[this] := 31536000;
LEAP_YEAR_IN_SECONDS_DateTime[this] := 31622400;
HOUR_IN_SECONDS_DateTime[this] := 3600;
MINUTE_IN_SECONDS_DateTime[this] := 60;
ORIGIN_YEAR_DateTime[this] := 1970;
// end of initialization
}

implementation DateTime_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call DateTime_DateTime_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation DateTime_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call DateTime_DateTime_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation isLeapYear_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s676: int) returns (__ret_0_: bool)
{
assume ((year_s676) >= (0));
assume (((year_s676) % (4)) >= (0));
if (((year_s676) % (4)) != (0)) {
__ret_0_ := false;
return;
}
assume ((year_s676) >= (0));
assume (((year_s676) % (100)) >= (0));
if (((year_s676) % (100)) != (0)) {
__ret_0_ := true;
return;
}
assume ((year_s676) >= (0));
assume (((year_s676) % (400)) >= (0));
if (((year_s676) % (400)) != (0)) {
__ret_0_ := false;
return;
}
__ret_0_ := true;
return;
}

implementation isLeapYear_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s676: int) returns (__ret_0_: bool)
{
assume ((year_s676) >= (0));
assume (((year_s676) % (4)) >= (0));
if (((year_s676) % (4)) != (0)) {
__ret_0_ := false;
return;
}
assume ((year_s676) >= (0));
assume (((year_s676) % (100)) >= (0));
if (((year_s676) % (100)) != (0)) {
__ret_0_ := true;
return;
}
assume ((year_s676) >= (0));
assume (((year_s676) % (400)) >= (0));
if (((year_s676) % (400)) != (0)) {
__ret_0_ := false;
return;
}
__ret_0_ := true;
return;
}

implementation leapYearsBefore_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year2_s704: int) returns (__ret_0_: int)
{
var year_s703: int;
assume ((year_s703) >= (0));
assume ((year2_s704) >= (0));
year_s703 := year2_s704;
assume ((year_s703) >= (0));
year_s703 := (year_s703) - (1);
assume ((year_s703) >= (0));
assume (((year_s703) / (4)) >= (0));
assume ((year_s703) >= (0));
assume (((year_s703) / (100)) >= (0));
assume ((((year_s703) / (4)) - ((year_s703) / (100))) >= (0));
assume ((year_s703) >= (0));
assume (((year_s703) / (400)) >= (0));
assume (((((year_s703) / (4)) - ((year_s703) / (100))) + ((year_s703) / (400))) >= (0));
__ret_0_ := (((year_s703) / (4)) - ((year_s703) / (100))) + ((year_s703) / (400));
return;
}

implementation leapYearsBefore_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year2_s704: int) returns (__ret_0_: int)
{
var year_s703: int;
assume ((year_s703) >= (0));
assume ((year2_s704) >= (0));
year_s703 := year2_s704;
assume ((year_s703) >= (0));
year_s703 := (year_s703) - (1);
assume ((year_s703) >= (0));
assume (((year_s703) / (4)) >= (0));
assume ((year_s703) >= (0));
assume (((year_s703) / (100)) >= (0));
assume ((((year_s703) / (4)) - ((year_s703) / (100))) >= (0));
assume ((year_s703) >= (0));
assume (((year_s703) / (400)) >= (0));
assume (((((year_s703) / (4)) - ((year_s703) / (100))) + ((year_s703) / (400))) >= (0));
__ret_0_ := (((year_s703) / (4)) - ((year_s703) / (100))) + ((year_s703) / (400));
return;
}

implementation getDaysInMonth_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, month_s774: int, year_s774: int) returns (__ret_0_: int)
{
var __var_22: bool;
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
if ((((((((month_s774) == (1)) || ((month_s774) == (3))) || ((month_s774) == (5))) || ((month_s774) == (7))) || ((month_s774) == (8))) || ((month_s774) == (10))) || ((month_s774) == (12))) {
__ret_0_ := 31;
return;
} else {
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
if (((((month_s774) == (4)) || ((month_s774) == (6))) || ((month_s774) == (9))) || ((month_s774) == (11))) {
__ret_0_ := 30;
return;
} else {
assume ((year_s774) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_22 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s774);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_22 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s774);
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_22) {
__ret_0_ := 29;
return;
} else {
__ret_0_ := 28;
return;
}
}
}
}

implementation getDaysInMonth_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, month_s774: int, year_s774: int) returns (__ret_0_: int)
{
var __var_22: bool;
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
if ((((((((month_s774) == (1)) || ((month_s774) == (3))) || ((month_s774) == (5))) || ((month_s774) == (7))) || ((month_s774) == (8))) || ((month_s774) == (10))) || ((month_s774) == (12))) {
__ret_0_ := 31;
return;
} else {
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
assume ((month_s774) >= (0));
if (((((month_s774) == (4)) || ((month_s774) == (6))) || ((month_s774) == (9))) || ((month_s774) == (11))) {
__ret_0_ := 30;
return;
} else {
assume ((year_s774) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_22 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s774);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_22 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s774);
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_22) {
__ret_0_ := 29;
return;
} else {
__ret_0_ := 28;
return;
}
}
}
}

implementation parseTimestamp_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s943: int) returns (dt_s943: Ref)
{
var secondsAccountedFor_s942: int;
var buf_s942: int;
var i_s942: int;
var __var_23: int;
var __var_24: int;
var __var_25: int;
var __var_26: int;
var __var_27: int;
var secondsInMonth_s942: int;
var __var_28: int;
var __var_29: int;
var __var_30: int;
var __var_31: int;
var __var_32: int;
var __var_33: int;
assume ((secondsAccountedFor_s942) >= (0));
secondsAccountedFor_s942 := 0;
havoc buf_s942;
havoc i_s942;
assume ((__tmp__year_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_23 := getYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_23 := getYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__year_DateTime._DateTime[dt_s943] := __var_23;
assume ((__var_23) >= (0));
assume ((buf_s942) >= (0));
assume ((__var_24) >= (0));
assume ((__var_25) >= (0));
assume ((__tmp__year_DateTime._DateTime[dt_s943]) >= (0));
__var_25 := __tmp__year_DateTime._DateTime[dt_s943];
assume ((__tmp__year_DateTime._DateTime[dt_s943]) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_24 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_24 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_24) >= (0));
assume ((__var_26) >= (0));
assume ((__var_27) >= (0));
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
__var_27 := __tmp__ORIGIN_YEAR_DateTime[this];
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_26 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_26 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_26) >= (0));
assume (((__var_24) - (__var_26)) >= (0));
buf_s942 := (__var_24) - (__var_26);
assume ((secondsAccountedFor_s942) >= (0));
assume ((buf_s942) >= (0));
assume (((31622400) * (buf_s942)) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + ((31622400) * (buf_s942));
assume ((secondsAccountedFor_s942) >= (0));
assume ((__tmp__year_DateTime._DateTime[dt_s943]) >= (0));
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
assume (((__tmp__year_DateTime._DateTime[dt_s943]) - (__tmp__ORIGIN_YEAR_DateTime[this])) >= (0));
assume ((buf_s942) >= (0));
assume (((((__tmp__year_DateTime._DateTime[dt_s943]) - (__tmp__ORIGIN_YEAR_DateTime[this])) - (buf_s942))) >= (0));
assume (((31536000) * ((((__tmp__year_DateTime._DateTime[dt_s943]) - (__tmp__ORIGIN_YEAR_DateTime[this])) - (buf_s942)))) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + ((31536000) * ((((__tmp__year_DateTime._DateTime[dt_s943]) - (__tmp__ORIGIN_YEAR_DateTime[this])) - (buf_s942))));
havoc secondsInMonth_s942;
assume ((i_s942) >= (0));
assume ((i_s942) >= (0));
i_s942 := 1;
while ((i_s942) <= (12))
{
assume ((secondsInMonth_s942) >= (0));
assume ((__var_28) >= (0));
assume ((i_s942) >= (0));
assume ((__tmp__year_DateTime._DateTime[dt_s943]) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_28 := getDaysInMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, i_s942, __tmp__year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_28 := getDaysInMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, i_s942, __tmp__year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_28) >= (0));
assume (((86400) * (__var_28)) >= (0));
secondsInMonth_s942 := (86400) * (__var_28);
assume ((secondsInMonth_s942) >= (0));
assume ((secondsAccountedFor_s942) >= (0));
assume (((secondsInMonth_s942) + (secondsAccountedFor_s942)) >= (0));
assume ((timestamp_s943) >= (0));
if (((secondsInMonth_s942) + (secondsAccountedFor_s942)) > (timestamp_s943)) {
assume ((__tmp__month_DateTime._DateTime[dt_s943]) >= (0));
assume ((i_s942) >= (0));
__tmp__month_DateTime._DateTime[dt_s943] := i_s942;
break;
}
assume ((secondsAccountedFor_s942) >= (0));
assume ((secondsInMonth_s942) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + (secondsInMonth_s942);
assume ((i_s942) >= (0));
i_s942 := (i_s942) + (1);
assume ((i_s942) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((i_s942) >= (0));
assume ((__var_29) >= (0));
assume ((__tmp__month_DateTime._DateTime[dt_s943]) >= (0));
assume ((__tmp__year_DateTime._DateTime[dt_s943]) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_29 := getDaysInMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__month_DateTime._DateTime[dt_s943], __tmp__year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_29 := getDaysInMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__month_DateTime._DateTime[dt_s943], __tmp__year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_29) >= (0));
assume ((i_s942) >= (0));
i_s942 := 1;
while ((i_s942) <= (__var_29))
{
assume ((secondsAccountedFor_s942) >= (0));
assume (((86400) + (secondsAccountedFor_s942)) >= (0));
assume ((timestamp_s943) >= (0));
if (((86400) + (secondsAccountedFor_s942)) > (timestamp_s943)) {
assume ((__tmp__day_DateTime._DateTime[dt_s943]) >= (0));
assume ((i_s942) >= (0));
__tmp__day_DateTime._DateTime[dt_s943] := i_s942;
break;
}
assume ((secondsAccountedFor_s942) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + (86400);
assume ((i_s942) >= (0));
i_s942 := (i_s942) + (1);
assume ((i_s942) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((__tmp__hour_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_30 := getHour_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_30 := getHour_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__hour_DateTime._DateTime[dt_s943] := __var_30;
assume ((__var_30) >= (0));
assume ((__tmp__minute_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_31 := getMinute_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_31 := getMinute_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__minute_DateTime._DateTime[dt_s943] := __var_31;
assume ((__var_31) >= (0));
assume ((__tmp__second_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_32 := getSecond_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_32 := getSecond_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__second_DateTime._DateTime[dt_s943] := __var_32;
assume ((__var_32) >= (0));
assume ((__tmp__weekday_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_33 := getWeekday_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_33 := getWeekday_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__weekday_DateTime._DateTime[dt_s943] := __var_33;
assume ((__var_33) >= (0));
}

implementation parseTimestamp_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s943: int) returns (dt_s943: Ref)
{
var secondsAccountedFor_s942: int;
var buf_s942: int;
var i_s942: int;
var __var_23: int;
var __var_24: int;
var __var_25: int;
var __var_26: int;
var __var_27: int;
var secondsInMonth_s942: int;
var __var_28: int;
var __var_29: int;
var __var_30: int;
var __var_31: int;
var __var_32: int;
var __var_33: int;
assume ((secondsAccountedFor_s942) >= (0));
secondsAccountedFor_s942 := 0;
havoc buf_s942;
havoc i_s942;
assume ((year_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_23 := getYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_23 := getYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
year_DateTime._DateTime[dt_s943] := __var_23;
assume ((__var_23) >= (0));
assume ((buf_s942) >= (0));
assume ((__var_24) >= (0));
assume ((__var_25) >= (0));
assume ((year_DateTime._DateTime[dt_s943]) >= (0));
__var_25 := year_DateTime._DateTime[dt_s943];
assume ((year_DateTime._DateTime[dt_s943]) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_24 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_24 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_24) >= (0));
assume ((__var_26) >= (0));
assume ((__var_27) >= (0));
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
__var_27 := ORIGIN_YEAR_DateTime[this];
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_26 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_26 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_26) >= (0));
assume (((__var_24) - (__var_26)) >= (0));
buf_s942 := (__var_24) - (__var_26);
assume ((secondsAccountedFor_s942) >= (0));
assume ((buf_s942) >= (0));
assume (((31622400) * (buf_s942)) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + ((31622400) * (buf_s942));
assume ((secondsAccountedFor_s942) >= (0));
assume ((year_DateTime._DateTime[dt_s943]) >= (0));
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
assume (((year_DateTime._DateTime[dt_s943]) - (ORIGIN_YEAR_DateTime[this])) >= (0));
assume ((buf_s942) >= (0));
assume (((((year_DateTime._DateTime[dt_s943]) - (ORIGIN_YEAR_DateTime[this])) - (buf_s942))) >= (0));
assume (((31536000) * ((((year_DateTime._DateTime[dt_s943]) - (ORIGIN_YEAR_DateTime[this])) - (buf_s942)))) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + ((31536000) * ((((year_DateTime._DateTime[dt_s943]) - (ORIGIN_YEAR_DateTime[this])) - (buf_s942))));
havoc secondsInMonth_s942;
assume ((i_s942) >= (0));
assume ((i_s942) >= (0));
i_s942 := 1;
while ((i_s942) <= (12))
{
assume ((secondsInMonth_s942) >= (0));
assume ((__var_28) >= (0));
assume ((i_s942) >= (0));
assume ((year_DateTime._DateTime[dt_s943]) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_28 := getDaysInMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, i_s942, year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_28 := getDaysInMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, i_s942, year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_28) >= (0));
assume (((86400) * (__var_28)) >= (0));
secondsInMonth_s942 := (86400) * (__var_28);
assume ((secondsInMonth_s942) >= (0));
assume ((secondsAccountedFor_s942) >= (0));
assume (((secondsInMonth_s942) + (secondsAccountedFor_s942)) >= (0));
assume ((timestamp_s943) >= (0));
if (((secondsInMonth_s942) + (secondsAccountedFor_s942)) > (timestamp_s943)) {
assume ((month_DateTime._DateTime[dt_s943]) >= (0));
assume ((i_s942) >= (0));
month_DateTime._DateTime[dt_s943] := i_s942;
break;
}
assume ((secondsAccountedFor_s942) >= (0));
assume ((secondsInMonth_s942) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + (secondsInMonth_s942);
assume ((i_s942) >= (0));
i_s942 := (i_s942) + (1);
assume ((i_s942) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((i_s942) >= (0));
assume ((__var_29) >= (0));
assume ((month_DateTime._DateTime[dt_s943]) >= (0));
assume ((year_DateTime._DateTime[dt_s943]) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_29 := getDaysInMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, month_DateTime._DateTime[dt_s943], year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_29 := getDaysInMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, month_DateTime._DateTime[dt_s943], year_DateTime._DateTime[dt_s943]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_29) >= (0));
assume ((i_s942) >= (0));
i_s942 := 1;
while ((i_s942) <= (__var_29))
{
assume ((secondsAccountedFor_s942) >= (0));
assume (((86400) + (secondsAccountedFor_s942)) >= (0));
assume ((timestamp_s943) >= (0));
if (((86400) + (secondsAccountedFor_s942)) > (timestamp_s943)) {
assume ((day_DateTime._DateTime[dt_s943]) >= (0));
assume ((i_s942) >= (0));
day_DateTime._DateTime[dt_s943] := i_s942;
break;
}
assume ((secondsAccountedFor_s942) >= (0));
secondsAccountedFor_s942 := (secondsAccountedFor_s942) + (86400);
assume ((i_s942) >= (0));
i_s942 := (i_s942) + (1);
assume ((i_s942) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((hour_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_30 := getHour_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_30 := getHour_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
hour_DateTime._DateTime[dt_s943] := __var_30;
assume ((__var_30) >= (0));
assume ((minute_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_31 := getMinute_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_31 := getMinute_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
minute_DateTime._DateTime[dt_s943] := __var_31;
assume ((__var_31) >= (0));
assume ((second_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_32 := getSecond_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_32 := getSecond_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
second_DateTime._DateTime[dt_s943] := __var_32;
assume ((__var_32) >= (0));
assume ((weekday_DateTime._DateTime[dt_s943]) >= (0));
assume ((timestamp_s943) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_33 := getWeekday_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_33 := getWeekday_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s943);
if (revert) {
return;
}
} else {
assume (false);
}
weekday_DateTime._DateTime[dt_s943] := __var_33;
assume ((__var_33) >= (0));
}

implementation getYear_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1031: int) returns (__ret_0_: int)
{
var secondsAccountedFor_s1030: int;
var year_s1030: int;
var numLeapYears_s1030: int;
var __var_34: int;
var __var_35: int;
var __var_36: int;
var __var_37: int;
var __var_38: bool;
var __var_39: int;
assume ((secondsAccountedFor_s1030) >= (0));
secondsAccountedFor_s1030 := 0;
havoc year_s1030;
havoc numLeapYears_s1030;
assume ((year_s1030) >= (0));
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
assume ((timestamp_s1031) >= (0));
assume (((timestamp_s1031) / (31536000)) >= (0));
assume (((__tmp__ORIGIN_YEAR_DateTime[this]) + ((timestamp_s1031) / (31536000))) >= (0));
year_s1030 := (__tmp__ORIGIN_YEAR_DateTime[this]) + ((timestamp_s1031) / (31536000));
assume ((numLeapYears_s1030) >= (0));
assume ((__var_34) >= (0));
assume ((__var_35) >= (0));
assume ((year_s1030) >= (0));
__var_35 := year_s1030;
assume ((year_s1030) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_34 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1030);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_34 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1030);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_34) >= (0));
assume ((__var_36) >= (0));
assume ((__var_37) >= (0));
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
__var_37 := __tmp__ORIGIN_YEAR_DateTime[this];
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_36 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_36 := leapYearsBefore_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_36) >= (0));
assume (((__var_34) - (__var_36)) >= (0));
numLeapYears_s1030 := (__var_34) - (__var_36);
assume ((secondsAccountedFor_s1030) >= (0));
assume ((numLeapYears_s1030) >= (0));
assume (((31622400) * (numLeapYears_s1030)) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) + ((31622400) * (numLeapYears_s1030));
assume ((secondsAccountedFor_s1030) >= (0));
assume ((year_s1030) >= (0));
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
assume (((year_s1030) - (__tmp__ORIGIN_YEAR_DateTime[this])) >= (0));
assume ((numLeapYears_s1030) >= (0));
assume (((((year_s1030) - (__tmp__ORIGIN_YEAR_DateTime[this])) - (numLeapYears_s1030))) >= (0));
assume (((31536000) * ((((year_s1030) - (__tmp__ORIGIN_YEAR_DateTime[this])) - (numLeapYears_s1030)))) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) + ((31536000) * ((((year_s1030) - (__tmp__ORIGIN_YEAR_DateTime[this])) - (numLeapYears_s1030))));
assume ((secondsAccountedFor_s1030) >= (0));
assume ((timestamp_s1031) >= (0));
while ((secondsAccountedFor_s1030) > (timestamp_s1031))
{
assume ((__var_39) >= (0));
assume ((year_s1030) >= (0));
assume (((year_s1030) - (1)) >= (0));
__var_39 := (year_s1030) - (1);
assume (((year_s1030) - (1)) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_38 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, (year_s1030) - (1));
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_38 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, (year_s1030) - (1));
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_38) {
assume ((secondsAccountedFor_s1030) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) - (31622400);
} else {
assume ((secondsAccountedFor_s1030) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) - (31536000);
}
assume ((year_s1030) >= (0));
year_s1030 := (year_s1030) - (1);
if ((gas) < (0)) {
return;
}
}
assume ((year_s1030) >= (0));
__ret_0_ := year_s1030;
return;
}

implementation getYear_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1031: int) returns (__ret_0_: int)
{
var secondsAccountedFor_s1030: int;
var year_s1030: int;
var numLeapYears_s1030: int;
var __var_34: int;
var __var_35: int;
var __var_36: int;
var __var_37: int;
var __var_38: bool;
var __var_39: int;
assume ((secondsAccountedFor_s1030) >= (0));
secondsAccountedFor_s1030 := 0;
havoc year_s1030;
havoc numLeapYears_s1030;
assume ((year_s1030) >= (0));
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
assume ((timestamp_s1031) >= (0));
assume (((timestamp_s1031) / (31536000)) >= (0));
assume (((ORIGIN_YEAR_DateTime[this]) + ((timestamp_s1031) / (31536000))) >= (0));
year_s1030 := (ORIGIN_YEAR_DateTime[this]) + ((timestamp_s1031) / (31536000));
assume ((numLeapYears_s1030) >= (0));
assume ((__var_34) >= (0));
assume ((__var_35) >= (0));
assume ((year_s1030) >= (0));
__var_35 := year_s1030;
assume ((year_s1030) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_34 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1030);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_34 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1030);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_34) >= (0));
assume ((__var_36) >= (0));
assume ((__var_37) >= (0));
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
__var_37 := ORIGIN_YEAR_DateTime[this];
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_36 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_36 := leapYearsBefore_DateTime__success(this, msgsender_MSG, msgvalue_MSG, ORIGIN_YEAR_DateTime[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_36) >= (0));
assume (((__var_34) - (__var_36)) >= (0));
numLeapYears_s1030 := (__var_34) - (__var_36);
assume ((secondsAccountedFor_s1030) >= (0));
assume ((numLeapYears_s1030) >= (0));
assume (((31622400) * (numLeapYears_s1030)) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) + ((31622400) * (numLeapYears_s1030));
assume ((secondsAccountedFor_s1030) >= (0));
assume ((year_s1030) >= (0));
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
assume (((year_s1030) - (ORIGIN_YEAR_DateTime[this])) >= (0));
assume ((numLeapYears_s1030) >= (0));
assume (((((year_s1030) - (ORIGIN_YEAR_DateTime[this])) - (numLeapYears_s1030))) >= (0));
assume (((31536000) * ((((year_s1030) - (ORIGIN_YEAR_DateTime[this])) - (numLeapYears_s1030)))) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) + ((31536000) * ((((year_s1030) - (ORIGIN_YEAR_DateTime[this])) - (numLeapYears_s1030))));
assume ((secondsAccountedFor_s1030) >= (0));
assume ((timestamp_s1031) >= (0));
while ((secondsAccountedFor_s1030) > (timestamp_s1031))
{
assume ((__var_39) >= (0));
assume ((year_s1030) >= (0));
assume (((year_s1030) - (1)) >= (0));
__var_39 := (year_s1030) - (1);
assume (((year_s1030) - (1)) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_38 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, (year_s1030) - (1));
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_38 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, (year_s1030) - (1));
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_38) {
assume ((secondsAccountedFor_s1030) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) - (31622400);
} else {
assume ((secondsAccountedFor_s1030) >= (0));
secondsAccountedFor_s1030 := (secondsAccountedFor_s1030) - (31536000);
}
assume ((year_s1030) >= (0));
year_s1030 := (year_s1030) - (1);
if ((gas) < (0)) {
return;
}
}
assume ((year_s1030) >= (0));
__ret_0_ := year_s1030;
return;
}

implementation getMonth_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1044: int) returns (__ret_0_: int)
{
var __var_40: Ref;
assume ((timestamp_s1044) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_40 := parseTimestamp_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_40 := parseTimestamp_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__tmp__month_DateTime._DateTime[__var_40]) >= (0));
__ret_0_ := __tmp__month_DateTime._DateTime[__var_40];
return;
}

implementation getMonth_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1044: int) returns (__ret_0_: int)
{
var __var_40: Ref;
assume ((timestamp_s1044) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_40 := parseTimestamp_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_40 := parseTimestamp_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((month_DateTime._DateTime[__var_40]) >= (0));
__ret_0_ := month_DateTime._DateTime[__var_40];
return;
}

implementation getDay_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1057: int) returns (__ret_0_: int)
{
var __var_41: Ref;
assume ((timestamp_s1057) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_41 := parseTimestamp_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_41 := parseTimestamp_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__tmp__day_DateTime._DateTime[__var_41]) >= (0));
__ret_0_ := __tmp__day_DateTime._DateTime[__var_41];
return;
}

implementation getDay_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1057: int) returns (__ret_0_: int)
{
var __var_41: Ref;
assume ((timestamp_s1057) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_41 := parseTimestamp_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_41 := parseTimestamp_DateTime__success(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((day_DateTime._DateTime[__var_41]) >= (0));
__ret_0_ := day_DateTime._DateTime[__var_41];
return;
}

implementation getHour_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1076: int) returns (__ret_0_: int)
{
var __var_42: int;
assume ((__var_42) >= (0));
assume ((timestamp_s1076) >= (0));
assume (((timestamp_s1076) / (60)) >= (0));
assume (((((timestamp_s1076) / (60)) / (60))) >= (0));
assume ((((((timestamp_s1076) / (60)) / (60))) % (24)) >= (0));
__var_42 := ((((timestamp_s1076) / (60)) / (60))) % (24);
assume ((((((timestamp_s1076) / (60)) / (60))) % (24)) >= (0));
__ret_0_ := ((((timestamp_s1076) / (60)) / (60))) % (24);
return;
}

implementation getHour_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1076: int) returns (__ret_0_: int)
{
var __var_42: int;
assume ((__var_42) >= (0));
assume ((timestamp_s1076) >= (0));
assume (((timestamp_s1076) / (60)) >= (0));
assume (((((timestamp_s1076) / (60)) / (60))) >= (0));
assume ((((((timestamp_s1076) / (60)) / (60))) % (24)) >= (0));
__var_42 := ((((timestamp_s1076) / (60)) / (60))) % (24);
assume ((((((timestamp_s1076) / (60)) / (60))) % (24)) >= (0));
__ret_0_ := ((((timestamp_s1076) / (60)) / (60))) % (24);
return;
}

implementation getMinute_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1093: int) returns (__ret_0_: int)
{
var __var_43: int;
assume ((__var_43) >= (0));
assume ((timestamp_s1093) >= (0));
assume ((((timestamp_s1093) / (60))) >= (0));
assume (((((timestamp_s1093) / (60))) % (60)) >= (0));
__var_43 := (((timestamp_s1093) / (60))) % (60);
assume (((((timestamp_s1093) / (60))) % (60)) >= (0));
__ret_0_ := (((timestamp_s1093) / (60))) % (60);
return;
}

implementation getMinute_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1093: int) returns (__ret_0_: int)
{
var __var_43: int;
assume ((__var_43) >= (0));
assume ((timestamp_s1093) >= (0));
assume ((((timestamp_s1093) / (60))) >= (0));
assume (((((timestamp_s1093) / (60))) % (60)) >= (0));
__var_43 := (((timestamp_s1093) / (60))) % (60);
assume (((((timestamp_s1093) / (60))) % (60)) >= (0));
__ret_0_ := (((timestamp_s1093) / (60))) % (60);
return;
}

implementation getSecond_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1107: int) returns (__ret_0_: int)
{
var __var_44: int;
assume ((__var_44) >= (0));
assume ((timestamp_s1107) >= (0));
assume (((timestamp_s1107) % (60)) >= (0));
__var_44 := (timestamp_s1107) % (60);
assume (((timestamp_s1107) % (60)) >= (0));
__ret_0_ := (timestamp_s1107) % (60);
return;
}

implementation getSecond_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1107: int) returns (__ret_0_: int)
{
var __var_44: int;
assume ((__var_44) >= (0));
assume ((timestamp_s1107) >= (0));
assume (((timestamp_s1107) % (60)) >= (0));
__var_44 := (timestamp_s1107) % (60);
assume (((timestamp_s1107) % (60)) >= (0));
__ret_0_ := (timestamp_s1107) % (60);
return;
}

implementation getWeekday_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1126: int) returns (__ret_0_: int)
{
var __var_45: int;
assume ((__var_45) >= (0));
assume ((timestamp_s1126) >= (0));
assume (((timestamp_s1126) / (86400)) >= (0));
assume (((((timestamp_s1126) / (86400)) + (4))) >= (0));
assume ((((((timestamp_s1126) / (86400)) + (4))) % (7)) >= (0));
__var_45 := ((((timestamp_s1126) / (86400)) + (4))) % (7);
assume ((((((timestamp_s1126) / (86400)) + (4))) % (7)) >= (0));
__ret_0_ := ((((timestamp_s1126) / (86400)) + (4))) % (7);
return;
}

implementation getWeekday_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, timestamp_s1126: int) returns (__ret_0_: int)
{
var __var_45: int;
assume ((__var_45) >= (0));
assume ((timestamp_s1126) >= (0));
assume (((timestamp_s1126) / (86400)) >= (0));
assume (((((timestamp_s1126) / (86400)) + (4))) >= (0));
assume ((((((timestamp_s1126) / (86400)) + (4))) % (7)) >= (0));
__var_45 := ((((timestamp_s1126) / (86400)) + (4))) % (7);
assume ((((((timestamp_s1126) / (86400)) + (4))) % (7)) >= (0));
__ret_0_ := ((((timestamp_s1126) / (86400)) + (4))) % (7);
return;
}

implementation toTimestamp3_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1153: int, month_s1153: int, day_s1153: int) returns (timestamp_s1153: int)
{
var __var_46: int;
var __var_47: int;
var __var_48: int;
var __var_49: int;
assume ((__var_46) >= (0));
assume ((year_s1153) >= (0));
assume ((month_s1153) >= (0));
assume ((day_s1153) >= (0));
assume ((__var_47) >= (0));
__var_47 := 0;
assume ((0) >= (0));
assume ((__var_48) >= (0));
__var_48 := 0;
assume ((0) >= (0));
assume ((__var_49) >= (0));
__var_49 := 0;
assume ((0) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_46 := toTimestamp6_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153, 0, 0, 0);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_46 := toTimestamp6_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153, 0, 0, 0);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_46) >= (0));
timestamp_s1153 := __var_46;
return;
}

implementation toTimestamp3_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1153: int, month_s1153: int, day_s1153: int) returns (timestamp_s1153: int)
{
var __var_46: int;
var __var_47: int;
var __var_48: int;
var __var_49: int;
assume ((__var_46) >= (0));
assume ((year_s1153) >= (0));
assume ((month_s1153) >= (0));
assume ((day_s1153) >= (0));
assume ((__var_47) >= (0));
__var_47 := 0;
assume ((0) >= (0));
assume ((__var_48) >= (0));
__var_48 := 0;
assume ((0) >= (0));
assume ((__var_49) >= (0));
__var_49 := 0;
assume ((0) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_46 := toTimestamp6_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153, 0, 0, 0);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_46 := toTimestamp6_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153, 0, 0, 0);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_46) >= (0));
timestamp_s1153 := __var_46;
return;
}

implementation toTimestamp4_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1180: int, month_s1180: int, day_s1180: int, hour_s1180: int) returns (timestamp_s1180: int)
{
var __var_50: int;
var __var_51: int;
var __var_52: int;
assume ((__var_50) >= (0));
assume ((year_s1180) >= (0));
assume ((month_s1180) >= (0));
assume ((day_s1180) >= (0));
assume ((hour_s1180) >= (0));
assume ((__var_51) >= (0));
__var_51 := 0;
assume ((0) >= (0));
assume ((__var_52) >= (0));
__var_52 := 0;
assume ((0) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_50 := toTimestamp6_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180, 0, 0);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_50 := toTimestamp6_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180, 0, 0);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_50) >= (0));
timestamp_s1180 := __var_50;
return;
}

implementation toTimestamp4_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1180: int, month_s1180: int, day_s1180: int, hour_s1180: int) returns (timestamp_s1180: int)
{
var __var_50: int;
var __var_51: int;
var __var_52: int;
assume ((__var_50) >= (0));
assume ((year_s1180) >= (0));
assume ((month_s1180) >= (0));
assume ((day_s1180) >= (0));
assume ((hour_s1180) >= (0));
assume ((__var_51) >= (0));
__var_51 := 0;
assume ((0) >= (0));
assume ((__var_52) >= (0));
__var_52 := 0;
assume ((0) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_50 := toTimestamp6_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180, 0, 0);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_50 := toTimestamp6_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180, 0, 0);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_50) >= (0));
timestamp_s1180 := __var_50;
return;
}

implementation toTimestamp5_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1207: int, month_s1207: int, day_s1207: int, hour_s1207: int, minute_s1207: int) returns (timestamp_s1207: int)
{
var __var_53: int;
var __var_54: int;
assume ((__var_53) >= (0));
assume ((year_s1207) >= (0));
assume ((month_s1207) >= (0));
assume ((day_s1207) >= (0));
assume ((hour_s1207) >= (0));
assume ((minute_s1207) >= (0));
assume ((__var_54) >= (0));
__var_54 := 0;
assume ((0) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_53 := toTimestamp6_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207, 0);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_53 := toTimestamp6_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207, 0);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_53) >= (0));
timestamp_s1207 := __var_53;
return;
}

implementation toTimestamp5_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1207: int, month_s1207: int, day_s1207: int, hour_s1207: int, minute_s1207: int) returns (timestamp_s1207: int)
{
var __var_53: int;
var __var_54: int;
assume ((__var_53) >= (0));
assume ((year_s1207) >= (0));
assume ((month_s1207) >= (0));
assume ((day_s1207) >= (0));
assume ((hour_s1207) >= (0));
assume ((minute_s1207) >= (0));
assume ((__var_54) >= (0));
__var_54 := 0;
assume ((0) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_53 := toTimestamp6_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207, 0);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_53 := toTimestamp6_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207, 0);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_53) >= (0));
timestamp_s1207 := __var_53;
return;
}

implementation toTimestamp6_DateTime__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1395: int, month_s1395: int, day_s1395: int, hour_s1395: int, minute_s1395: int, second_s1395: int) returns (timestamp_s1395: int)
{
var i_s1394: int;
var __var_55: bool;
var monthDayCounts_s1394: Ref;
var __var_56: bool;
havoc i_s1394;
assume ((i_s1394) >= (0));
assume ((year_s1395) >= (0));
assume ((i_s1394) >= (0));
assume ((__tmp__ORIGIN_YEAR_DateTime[this]) >= (0));
i_s1394 := __tmp__ORIGIN_YEAR_DateTime[this];
while ((i_s1394) < (year_s1395))
{
assume ((i_s1394) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_55 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, i_s1394);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_55 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, i_s1394);
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_55) {
assume ((timestamp_s1395) >= (0));
timestamp_s1395 := (timestamp_s1395) + (31622400);
} else {
assume ((timestamp_s1395) >= (0));
timestamp_s1395 := (timestamp_s1395) + (31536000);
}
assume ((i_s1394) >= (0));
i_s1394 := (i_s1394) + (1);
assume ((i_s1394) >= (0));
if ((gas) < (0)) {
return;
}
}
havoc monthDayCounts_s1394;
assume ((__tmp__M_int_int[monthDayCounts_s1394][0]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][0] := 31;
assume ((year_s1395) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_56 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1395);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (DateTime)) {
call __var_56 := isLeapYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, year_s1395);
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_56) {
assume ((__tmp__M_int_int[monthDayCounts_s1394][1]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][1] := 29;
} else {
assume ((__tmp__M_int_int[monthDayCounts_s1394][1]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][1] := 28;
}
assume ((__tmp__M_int_int[monthDayCounts_s1394][2]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][2] := 31;
assume ((__tmp__M_int_int[monthDayCounts_s1394][3]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][3] := 30;
assume ((__tmp__M_int_int[monthDayCounts_s1394][4]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][4] := 31;
assume ((__tmp__M_int_int[monthDayCounts_s1394][5]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][5] := 30;
assume ((__tmp__M_int_int[monthDayCounts_s1394][6]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][6] := 31;
assume ((__tmp__M_int_int[monthDayCounts_s1394][7]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][7] := 31;
assume ((__tmp__M_int_int[monthDayCounts_s1394][8]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][8] := 30;
assume ((__tmp__M_int_int[monthDayCounts_s1394][9]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][9] := 31;
assume ((__tmp__M_int_int[monthDayCounts_s1394][10]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][10] := 30;
assume ((__tmp__M_int_int[monthDayCounts_s1394][11]) >= (0));
__tmp__M_int_int[monthDayCounts_s1394][11] := 31;
assume ((i_s1394) >= (0));
assume ((month_s1395) >= (0));
assume ((i_s1394) >= (0));
i_s1394 := 1;
while ((i_s1394) < (month_s1395))
{
assume ((timestamp_s1395) >= (0));
assume ((i_s1394) >= (0));
assume (((i_s1394) - (1)) >= (0));
assume ((__tmp__M_int_int[monthDayCounts_s1394][(i_s1394) - (1)]) >= (0));
assume (((86400) * (__tmp__M_int_int[monthDayCounts_s1394][(i_s1394) - (1)])) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((86400) * (__tmp__M_int_int[monthDayCounts_s1394][(i_s1394) - (1)]));
assume ((i_s1394) >= (0));
i_s1394 := (i_s1394) + (1);
assume ((i_s1394) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((timestamp_s1395) >= (0));
assume ((day_s1395) >= (0));
assume ((((day_s1395) - (1))) >= (0));
assume (((86400) * (((day_s1395) - (1)))) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((86400) * (((day_s1395) - (1))));
assume ((timestamp_s1395) >= (0));
assume (((hour_s1395)) >= (0));
assume (((3600) * ((hour_s1395))) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((3600) * ((hour_s1395)));
assume ((timestamp_s1395) >= (0));
assume (((minute_s1395)) >= (0));
assume (((60) * ((minute_s1395))) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((60) * ((minute_s1395)));
assume ((timestamp_s1395) >= (0));
assume ((second_s1395) >= (0));
timestamp_s1395 := (timestamp_s1395) + (second_s1395);
assume ((timestamp_s1395) >= (0));
timestamp_s1395 := timestamp_s1395;
return;
}

implementation toTimestamp6_DateTime__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, year_s1395: int, month_s1395: int, day_s1395: int, hour_s1395: int, minute_s1395: int, second_s1395: int) returns (timestamp_s1395: int)
{
var i_s1394: int;
var __var_55: bool;
var monthDayCounts_s1394: Ref;
var __var_56: bool;
havoc i_s1394;
assume ((i_s1394) >= (0));
assume ((year_s1395) >= (0));
assume ((i_s1394) >= (0));
assume ((ORIGIN_YEAR_DateTime[this]) >= (0));
i_s1394 := ORIGIN_YEAR_DateTime[this];
while ((i_s1394) < (year_s1395))
{
assume ((i_s1394) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_55 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, i_s1394);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_55 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, i_s1394);
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_55) {
assume ((timestamp_s1395) >= (0));
timestamp_s1395 := (timestamp_s1395) + (31622400);
} else {
assume ((timestamp_s1395) >= (0));
timestamp_s1395 := (timestamp_s1395) + (31536000);
}
assume ((i_s1394) >= (0));
i_s1394 := (i_s1394) + (1);
assume ((i_s1394) >= (0));
if ((gas) < (0)) {
return;
}
}
havoc monthDayCounts_s1394;
assume ((M_int_int[monthDayCounts_s1394][0]) >= (0));
M_int_int[monthDayCounts_s1394][0] := 31;
assume ((year_s1395) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_56 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1395);
if (revert) {
return;
}
} else if ((DType[this]) == (DateTime)) {
call __var_56 := isLeapYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, year_s1395);
if (revert) {
return;
}
} else {
assume (false);
}
if (__var_56) {
assume ((M_int_int[monthDayCounts_s1394][1]) >= (0));
M_int_int[monthDayCounts_s1394][1] := 29;
} else {
assume ((M_int_int[monthDayCounts_s1394][1]) >= (0));
M_int_int[monthDayCounts_s1394][1] := 28;
}
assume ((M_int_int[monthDayCounts_s1394][2]) >= (0));
M_int_int[monthDayCounts_s1394][2] := 31;
assume ((M_int_int[monthDayCounts_s1394][3]) >= (0));
M_int_int[monthDayCounts_s1394][3] := 30;
assume ((M_int_int[monthDayCounts_s1394][4]) >= (0));
M_int_int[monthDayCounts_s1394][4] := 31;
assume ((M_int_int[monthDayCounts_s1394][5]) >= (0));
M_int_int[monthDayCounts_s1394][5] := 30;
assume ((M_int_int[monthDayCounts_s1394][6]) >= (0));
M_int_int[monthDayCounts_s1394][6] := 31;
assume ((M_int_int[monthDayCounts_s1394][7]) >= (0));
M_int_int[monthDayCounts_s1394][7] := 31;
assume ((M_int_int[monthDayCounts_s1394][8]) >= (0));
M_int_int[monthDayCounts_s1394][8] := 30;
assume ((M_int_int[monthDayCounts_s1394][9]) >= (0));
M_int_int[monthDayCounts_s1394][9] := 31;
assume ((M_int_int[monthDayCounts_s1394][10]) >= (0));
M_int_int[monthDayCounts_s1394][10] := 30;
assume ((M_int_int[monthDayCounts_s1394][11]) >= (0));
M_int_int[monthDayCounts_s1394][11] := 31;
assume ((i_s1394) >= (0));
assume ((month_s1395) >= (0));
assume ((i_s1394) >= (0));
i_s1394 := 1;
while ((i_s1394) < (month_s1395))
{
assume ((timestamp_s1395) >= (0));
assume ((i_s1394) >= (0));
assume (((i_s1394) - (1)) >= (0));
assume ((M_int_int[monthDayCounts_s1394][(i_s1394) - (1)]) >= (0));
assume (((86400) * (M_int_int[monthDayCounts_s1394][(i_s1394) - (1)])) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((86400) * (M_int_int[monthDayCounts_s1394][(i_s1394) - (1)]));
assume ((i_s1394) >= (0));
i_s1394 := (i_s1394) + (1);
assume ((i_s1394) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((timestamp_s1395) >= (0));
assume ((day_s1395) >= (0));
assume ((((day_s1395) - (1))) >= (0));
assume (((86400) * (((day_s1395) - (1)))) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((86400) * (((day_s1395) - (1))));
assume ((timestamp_s1395) >= (0));
assume (((hour_s1395)) >= (0));
assume (((3600) * ((hour_s1395))) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((3600) * ((hour_s1395)));
assume ((timestamp_s1395) >= (0));
assume (((minute_s1395)) >= (0));
assume (((60) * ((minute_s1395))) >= (0));
timestamp_s1395 := (timestamp_s1395) + ((60) * ((minute_s1395)));
assume ((timestamp_s1395) >= (0));
assume ((second_s1395) >= (0));
timestamp_s1395 := (timestamp_s1395) + (second_s1395);
assume ((timestamp_s1395) >= (0));
timestamp_s1395 := timestamp_s1395;
return;
}

implementation ERC20Token_ERC20Token_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_57: Ref;
var __var_58: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
// Make array/mapping vars distinct for balances
call __var_57 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__balances_ERC20Token[this] := __var_57;
// Initialize Integer mapping balances
__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]] := zeroRefIntArr();
// Make array/mapping vars distinct for allowed
call __var_58 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__allowed_ERC20Token[this] := __var_58;
// Initialize length of 1-level nested array in allowed
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]] := zeroRefRefArr();
// end of initialization
}

implementation ERC20Token_ERC20Token_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_57: Ref;
var __var_58: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
// Make array/mapping vars distinct for balances
call __var_57 := FreshRefGenerator__success();
if (revert) {
return;
}
balances_ERC20Token[this] := __var_57;
// Initialize Integer mapping balances
M_Ref_int[balances_ERC20Token[this]] := zeroRefIntArr();
// Make array/mapping vars distinct for allowed
call __var_58 := FreshRefGenerator__success();
if (revert) {
return;
}
allowed_ERC20Token[this] := __var_58;
// Initialize length of 1-level nested array in allowed
M_Ref_Ref[allowed_ERC20Token[this]] := zeroRefRefArr();
// end of initialization
}

implementation ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call IERC20Token_IERC20Token__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ERC20Token_ERC20Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call IERC20Token_IERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation transfer_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3586: Ref, _value_s3586: int) returns (__ret_0_: bool)
{
var __var_59: bool;
assume ((_value_s3586) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_59 := transfer_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_59 := transfer_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_59;
return;
}

implementation transfer_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3586: Ref, _value_s3586: int) returns (__ret_0_: bool)
{
var __var_59: bool;
assume ((_value_s3586) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_59 := transfer_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_59 := transfer_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_59;
return;
}

implementation transfer_ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3646: Ref, _value_s3646: int) returns (__ret_0_: bool)
{
var __var_60: Ref;
var __var_61: int;
var __var_62: int;
__var_60 := null;
if (!((_to_s3646) != (null))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][msgsender_MSG]) >= (0));
assume ((_value_s3646) >= (0));
if (!((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][msgsender_MSG]) >= (_value_s3646))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][msgsender_MSG]) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][msgsender_MSG]) >= (0));
assume ((_value_s3646) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_61 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][msgsender_MSG], _value_s3646);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_61 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][msgsender_MSG], _value_s3646);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][msgsender_MSG] := __var_61;
assume ((__var_61) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3646]) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3646]) >= (0));
assume ((_value_s3646) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_62 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3646], _value_s3646);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_62 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3646], _value_s3646);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3646] := __var_62;
assume ((__var_62) >= (0));
__ret_0_ := true;
return;
}

implementation transfer_ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s3646: Ref, _value_s3646: int) returns (__ret_0_: bool)
{
var __var_60: Ref;
var __var_61: int;
var __var_62: int;
__var_60 := null;
if (!((_to_s3646) != (null))) {
revert := true;
return;
}
assume ((M_Ref_int[balances_ERC20Token[this]][msgsender_MSG]) >= (0));
assume ((_value_s3646) >= (0));
if (!((M_Ref_int[balances_ERC20Token[this]][msgsender_MSG]) >= (_value_s3646))) {
revert := true;
return;
}
assume ((M_Ref_int[balances_ERC20Token[this]][msgsender_MSG]) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][msgsender_MSG]) >= (0));
assume ((_value_s3646) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_61 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][msgsender_MSG], _value_s3646);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_61 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][msgsender_MSG], _value_s3646);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[balances_ERC20Token[this]][msgsender_MSG] := __var_61;
assume ((__var_61) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][_to_s3646]) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][_to_s3646]) >= (0));
assume ((_value_s3646) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_62 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_to_s3646], _value_s3646);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_62 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_to_s3646], _value_s3646);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[balances_ERC20Token[this]][_to_s3646] := __var_62;
assume ((__var_62) >= (0));
assert {:EventEmitted "Transfer_ERC20Token"} (true);
__ret_0_ := true;
return;
}

implementation transferFrom_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3664: Ref, _to_s3664: Ref, _value_s3664: int) returns (__ret_0_: bool)
{
var __var_63: bool;
assume ((_value_s3664) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_63 := transferFrom_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_63 := transferFrom_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_63;
return;
}

implementation transferFrom_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3664: Ref, _to_s3664: Ref, _value_s3664: int) returns (__ret_0_: bool)
{
var __var_63: bool;
assume ((_value_s3664) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_63 := transferFrom_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_63 := transferFrom_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_63;
return;
}

implementation transferFrom_ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3748: Ref, _to_s3748: Ref, _value_s3748: int) returns (__ret_0_: bool)
{
var __var_64: Ref;
var __var_65: Ref;
var __var_66: int;
var __var_67: int;
var __var_68: Ref;
var __var_69: int;
var __var_70: Ref;
__var_64 := null;
if (!((_to_s3748) != (null))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s3748]) >= (0));
assume ((_value_s3748) >= (0));
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]) == (null)) {
call __var_65 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748] := __var_65;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (0));
assume ((_value_s3748) >= (0));
if (!(((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s3748]) >= (_value_s3748)) && ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (_value_s3748)))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3748]) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3748]) >= (0));
assume ((_value_s3748) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_66 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3748], _value_s3748);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_66 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3748], _value_s3748);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s3748] := __var_66;
assume ((__var_66) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s3748]) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s3748]) >= (0));
assume ((_value_s3748) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_67 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s3748], _value_s3748);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_67 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s3748], _value_s3748);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s3748] := __var_67;
assume ((__var_67) >= (0));
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]) == (null)) {
call __var_68 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748] := __var_68;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (0));
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]) == (null)) {
call __var_70 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748] := __var_70;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (0));
assume ((_value_s3748) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_69 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG], _value_s3748);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_69 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG], _value_s3748);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG] := __var_69;
assume ((__var_69) >= (0));
__ret_0_ := true;
return;
}

implementation transferFrom_ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s3748: Ref, _to_s3748: Ref, _value_s3748: int) returns (__ret_0_: bool)
{
var __var_64: Ref;
var __var_65: Ref;
var __var_66: int;
var __var_67: int;
var __var_68: Ref;
var __var_69: int;
var __var_70: Ref;
__var_64 := null;
if (!((_to_s3748) != (null))) {
revert := true;
return;
}
assume ((M_Ref_int[balances_ERC20Token[this]][_from_s3748]) >= (0));
assume ((_value_s3748) >= (0));
if ((M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]) == (null)) {
call __var_65 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748] := __var_65;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (0));
assume ((_value_s3748) >= (0));
if (!(((M_Ref_int[balances_ERC20Token[this]][_from_s3748]) >= (_value_s3748)) && ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (_value_s3748)))) {
revert := true;
return;
}
assume ((M_Ref_int[balances_ERC20Token[this]][_to_s3748]) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][_to_s3748]) >= (0));
assume ((_value_s3748) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_66 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_to_s3748], _value_s3748);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_66 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_to_s3748], _value_s3748);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[balances_ERC20Token[this]][_to_s3748] := __var_66;
assume ((__var_66) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][_from_s3748]) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][_from_s3748]) >= (0));
assume ((_value_s3748) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_67 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_from_s3748], _value_s3748);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_67 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_from_s3748], _value_s3748);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[balances_ERC20Token[this]][_from_s3748] := __var_67;
assume ((__var_67) >= (0));
if ((M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]) == (null)) {
call __var_68 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748] := __var_68;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (0));
if ((M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]) == (null)) {
call __var_70 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748] := __var_70;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG]) >= (0));
assume ((_value_s3748) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_69 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG], _value_s3748);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_69 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG], _value_s3748);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_from_s3748]][msgsender_MSG] := __var_69;
assume ((__var_69) >= (0));
assert {:EventEmitted "Transfer_ERC20Token"} (true);
__ret_0_ := true;
return;
}

implementation balanceOf_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3760: Ref) returns (__ret_0_: int)
{
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_owner_s3760]) >= (0));
__ret_0_ := __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_owner_s3760];
return;
}

implementation balanceOf_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3760: Ref) returns (__ret_0_: int)
{
assume ((M_Ref_int[balances_ERC20Token[this]][_owner_s3760]) >= (0));
__ret_0_ := M_Ref_int[balances_ERC20Token[this]][_owner_s3760];
return;
}

implementation approve_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3775: Ref, _value_s3775: int) returns (__ret_0_: bool)
{
var __var_71: bool;
assume ((_value_s3775) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_71 := approve_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ERC20Token)) {
call __var_71 := approve_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_71;
return;
}

implementation approve_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3775: Ref, _value_s3775: int) returns (__ret_0_: bool)
{
var __var_71: bool;
assume ((_value_s3775) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_71 := approve_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
if (revert) {
return;
}
} else if ((DType[this]) == (ERC20Token)) {
call __var_71 := approve_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_71;
return;
}

implementation approve_ERC20Token_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3803: Ref, _value_s3803: int) returns (__ret_0_: bool)
{
var __var_72: Ref;
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_72 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG] := __var_72;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s3803]) >= (0));
assume ((_value_s3803) >= (0));
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s3803] := _value_s3803;
__ret_0_ := true;
return;
}

implementation approve_ERC20Token_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s3803: Ref, _value_s3803: int) returns (__ret_0_: bool)
{
var __var_72: Ref;
if ((M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_72 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG] := __var_72;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s3803]) >= (0));
assume ((_value_s3803) >= (0));
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s3803] := _value_s3803;
assert {:EventEmitted "Approval_ERC20Token"} (true);
__ret_0_ := true;
return;
}

implementation allowance_ERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3819: Ref, _spender_s3819: Ref) returns (__ret_0_: int)
{
var __var_73: Ref;
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_owner_s3819]) == (null)) {
call __var_73 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_owner_s3819] := __var_73;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_owner_s3819]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_owner_s3819]][_spender_s3819]) >= (0));
__ret_0_ := __tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][_owner_s3819]][_spender_s3819];
return;
}

implementation allowance_ERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owner_s3819: Ref, _spender_s3819: Ref) returns (__ret_0_: int)
{
var __var_73: Ref;
if ((M_Ref_Ref[allowed_ERC20Token[this]][_owner_s3819]) == (null)) {
call __var_73 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][_owner_s3819] := __var_73;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_owner_s3819]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_owner_s3819]][_spender_s3819]) >= (0));
__ret_0_ := M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][_owner_s3819]][_spender_s3819];
return;
}

implementation Fund_Fund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref)
{
var __var_74: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__INITIAL_TAP_Fund[this] := 192901234567901;
__tmp__teamWallet_Fund[this] := null;
__tmp__crowdsaleEndDate_Fund[this] := 0;
__tmp__referralTokenWallet_Fund[this] := null;
__tmp__foundationTokenWallet_Fund[this] := null;
__tmp__reserveTokenWallet_Fund[this] := null;
__tmp__bountyTokenWallet_Fund[this] := null;
__tmp__companyTokenWallet_Fund[this] := null;
__tmp__advisorTokenWallet_Fund[this] := null;
__tmp__lockedTokenAddress_Fund[this] := null;
__tmp__refundManager_Fund[this] := null;
__tmp__lastWithdrawTime_Fund[this] := 0;
__tmp__firstWithdrawAmount_Fund[this] := 0;
__tmp__crowdsaleAddress_Fund[this] := null;
// Make array/mapping vars distinct for contributions
call __var_74 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__contributions_Fund[this] := __var_74;
// Initialize Integer mapping contributions
__tmp__M_Ref_int[__tmp__contributions_Fund[this]] := zeroRefIntArr();
// end of initialization
__tmp__teamWallet_Fund[this] := _teamWallet_s1547;
__tmp__referralTokenWallet_Fund[this] := _referralTokenWallet_s1547;
__tmp__foundationTokenWallet_Fund[this] := _foundationTokenWallet_s1547;
__tmp__companyTokenWallet_Fund[this] := _companyTokenWallet_s1547;
__tmp__reserveTokenWallet_Fund[this] := _reserveTokenWallet_s1547;
__tmp__bountyTokenWallet_Fund[this] := _bountyTokenWallet_s1547;
__tmp__advisorTokenWallet_Fund[this] := _advisorTokenWallet_s1547;
__tmp__refundManager_Fund[this] := _refundManager_s1547;
if ((__tmp__DType[this]) == (PollManagedFund)) {
call _setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s1547);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (Fund)) {
call _setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s1547);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__state_Fund[this] := 0;
}

implementation Fund_Fund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref)
{
var __var_74: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
INITIAL_TAP_Fund[this] := 192901234567901;
teamWallet_Fund[this] := null;
crowdsaleEndDate_Fund[this] := 0;
referralTokenWallet_Fund[this] := null;
foundationTokenWallet_Fund[this] := null;
reserveTokenWallet_Fund[this] := null;
bountyTokenWallet_Fund[this] := null;
companyTokenWallet_Fund[this] := null;
advisorTokenWallet_Fund[this] := null;
lockedTokenAddress_Fund[this] := null;
refundManager_Fund[this] := null;
lastWithdrawTime_Fund[this] := 0;
firstWithdrawAmount_Fund[this] := 0;
crowdsaleAddress_Fund[this] := null;
// Make array/mapping vars distinct for contributions
call __var_74 := FreshRefGenerator__success();
if (revert) {
return;
}
contributions_Fund[this] := __var_74;
// Initialize Integer mapping contributions
M_Ref_int[contributions_Fund[this]] := zeroRefIntArr();
// end of initialization
teamWallet_Fund[this] := _teamWallet_s1547;
referralTokenWallet_Fund[this] := _referralTokenWallet_s1547;
foundationTokenWallet_Fund[this] := _foundationTokenWallet_s1547;
companyTokenWallet_Fund[this] := _companyTokenWallet_s1547;
reserveTokenWallet_Fund[this] := _reserveTokenWallet_s1547;
bountyTokenWallet_Fund[this] := _bountyTokenWallet_s1547;
advisorTokenWallet_Fund[this] := _advisorTokenWallet_s1547;
refundManager_Fund[this] := _refundManager_s1547;
if ((DType[this]) == (PollManagedFund)) {
call _setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s1547);
if (revert) {
return;
}
} else if ((DType[this]) == (Fund)) {
call _setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s1547);
if (revert) {
return;
}
} else {
assume (false);
}
state_Fund[this] := 0;
}

implementation Fund_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref)
{
var __var_74: Ref;
call ICrowdsaleFund_ICrowdsaleFund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call MultiOwnable_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call Fund_Fund_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s1547, _referralTokenWallet_s1547, _foundationTokenWallet_s1547, _companyTokenWallet_s1547, _reserveTokenWallet_s1547, _bountyTokenWallet_s1547, _advisorTokenWallet_s1547, _refundManager_s1547, _owners_s1547);
if (revert) {
return;
}
}

implementation Fund_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s1547: Ref, _referralTokenWallet_s1547: Ref, _foundationTokenWallet_s1547: Ref, _companyTokenWallet_s1547: Ref, _reserveTokenWallet_s1547: Ref, _bountyTokenWallet_s1547: Ref, _advisorTokenWallet_s1547: Ref, _refundManager_s1547: Ref, _owners_s1547: Ref)
{
var __var_74: Ref;
call ICrowdsaleFund_ICrowdsaleFund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call MultiOwnable_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call Fund_Fund_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s1547, _referralTokenWallet_s1547, _foundationTokenWallet_s1547, _companyTokenWallet_s1547, _reserveTokenWallet_s1547, _bountyTokenWallet_s1547, _advisorTokenWallet_s1547, _refundManager_s1547, _owners_s1547);
if (revert) {
return;
}
}

implementation setCrowdsaleAddress_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _crowdsaleAddress_s1592: Ref)
{
var __var_76: Ref;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_76 := null;
if (!((__tmp__crowdsaleAddress_Fund[this]) == (null))) {
revert := true;
return;
}
__tmp__crowdsaleAddress_Fund[this] := _crowdsaleAddress_s1592;
}

implementation setCrowdsaleAddress_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _crowdsaleAddress_s1592: Ref)
{
var __var_76: Ref;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_76 := null;
if (!((crowdsaleAddress_Fund[this]) == (null))) {
revert := true;
return;
}
crowdsaleAddress_Fund[this] := _crowdsaleAddress_s1592;
}

implementation setTokenAddress_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s1616: Ref)
{
var __var_77: Ref;
var __var_78: Ref;
var __var_79: Ref;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_77 := __tmp__token_Fund[this];
__var_78 := null;
if (!((__tmp__token_Fund[this]) == (null))) {
revert := true;
return;
}
assume ((__tmp__DType[_tokenAddress_s1616]) == (ManagedToken));
__var_79 := _tokenAddress_s1616;
__tmp__token_Fund[this] := __var_79;
}

implementation setTokenAddress_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s1616: Ref)
{
var __var_77: Ref;
var __var_78: Ref;
var __var_79: Ref;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_77 := token_Fund[this];
__var_78 := null;
if (!((token_Fund[this]) == (null))) {
revert := true;
return;
}
assume ((DType[_tokenAddress_s1616]) == (ManagedToken));
__var_79 := _tokenAddress_s1616;
token_Fund[this] := __var_79;
}

implementation setLockedTokenAddress_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _lockedTokenAddress_s1638: Ref)
{
var __var_80: Ref;
var __var_81: Ref;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_80 := __tmp__lockedTokenAddress_Fund[this];
__var_81 := null;
if (!((__tmp__lockedTokenAddress_Fund[this]) == (null))) {
revert := true;
return;
}
__tmp__lockedTokenAddress_Fund[this] := _lockedTokenAddress_s1638;
}

implementation setLockedTokenAddress_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _lockedTokenAddress_s1638: Ref)
{
var __var_80: Ref;
var __var_81: Ref;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_80 := lockedTokenAddress_Fund[this];
__var_81 := null;
if (!((lockedTokenAddress_Fund[this]) == (null))) {
revert := true;
return;
}
lockedTokenAddress_Fund[this] := _lockedTokenAddress_s1638;
}

implementation processContribution_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s1669: Ref)
{
var totalContribution_s1668: int;
// ---- Logic for payable function START 
assume ((__tmp__Balance[msgsender_MSG]) >= (msgvalue_MSG));
__tmp__Balance[msgsender_MSG] := (__tmp__Balance[msgsender_MSG]) - (msgvalue_MSG);
__tmp__Balance[this] := (__tmp__Balance[this]) + (msgvalue_MSG);
// ---- Logic for payable function END 
call onlyCrowdsale_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((__tmp__state_Fund[this]) == (0))) {
revert := true;
return;
}
assume ((totalContribution_s1668) >= (0));
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributor_s1669]) >= (0));
assume ((msgvalue_MSG) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call totalContribution_s1668 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributor_s1669], msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (Fund)) {
call totalContribution_s1668 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributor_s1669], msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
totalContribution_s1668 := totalContribution_s1668;
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributor_s1669]) >= (0));
assume ((totalContribution_s1668) >= (0));
__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributor_s1669] := totalContribution_s1668;
}

implementation processContribution_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributor_s1669: Ref)
{
var totalContribution_s1668: int;
// ---- Logic for payable function START 
assume ((Balance[msgsender_MSG]) >= (msgvalue_MSG));
Balance[msgsender_MSG] := (Balance[msgsender_MSG]) - (msgvalue_MSG);
Balance[this] := (Balance[this]) + (msgvalue_MSG);
// ---- Logic for payable function END 
call onlyCrowdsale_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((state_Fund[this]) == (0))) {
revert := true;
return;
}
assume ((totalContribution_s1668) >= (0));
assume ((M_Ref_int[contributions_Fund[this]][contributor_s1669]) >= (0));
assume ((msgvalue_MSG) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call totalContribution_s1668 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[contributions_Fund[this]][contributor_s1669], msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (Fund)) {
call totalContribution_s1668 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[contributions_Fund[this]][contributor_s1669], msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
totalContribution_s1668 := totalContribution_s1668;
assume ((M_Ref_int[contributions_Fund[this]][contributor_s1669]) >= (0));
assume ((totalContribution_s1668) >= (0));
M_Ref_int[contributions_Fund[this]][contributor_s1669] := totalContribution_s1668;
}

implementation onCrowdsaleEnd_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var crowdsale_s1701: Ref;
var __var_82: int;
var __var_83: int;
call onlyCrowdsale_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__tmp__state_Fund[this] := 2;
assume ((__tmp__DType[__tmp__crowdsaleAddress_Fund[this]]) == (ISimpleCrowdsale));
crowdsale_s1701 := __tmp__crowdsaleAddress_Fund[this];
assume ((__tmp__firstWithdrawAmount_Fund[this]) >= (0));
assume ((__var_82) >= (0));
call __var_82 := getSoftCap_ISimpleCrowdsale(crowdsale_s1701, this, __var_83);
assume ((__var_82) >= (0));
assume (((__var_82) / (2)) >= (0));
__tmp__firstWithdrawAmount_Fund[this] := (__var_82) / (2);
assume ((__tmp__lastWithdrawTime_Fund[this]) >= (0));
assume ((__tmp__now) >= (0));
__tmp__lastWithdrawTime_Fund[this] := __tmp__now;
assume ((__tmp__crowdsaleEndDate_Fund[this]) >= (0));
assume ((__tmp__now) >= (0));
__tmp__crowdsaleEndDate_Fund[this] := __tmp__now;
}

implementation onCrowdsaleEnd_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var crowdsale_s1701: Ref;
var __var_82: int;
var __var_83: int;
call onlyCrowdsale_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
state_Fund[this] := 2;
assume ((DType[crowdsaleAddress_Fund[this]]) == (ISimpleCrowdsale));
crowdsale_s1701 := crowdsaleAddress_Fund[this];
assume ((firstWithdrawAmount_Fund[this]) >= (0));
assume ((__var_82) >= (0));
call __var_82 := getSoftCap_ISimpleCrowdsale(crowdsale_s1701, this, __var_83);
assume ((__var_82) >= (0));
assume (((__var_82) / (2)) >= (0));
firstWithdrawAmount_Fund[this] := (__var_82) / (2);
assume ((lastWithdrawTime_Fund[this]) >= (0));
assume ((now) >= (0));
lastWithdrawTime_Fund[this] := now;
assume ((crowdsaleEndDate_Fund[this]) >= (0));
assume ((now) >= (0));
crowdsaleEndDate_Fund[this] := now;
}

implementation enableCrowdsaleRefund_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call onlyCrowdsale_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((__tmp__state_Fund[this]) == (0))) {
revert := true;
return;
}
__tmp__state_Fund[this] := 1;
}

implementation enableCrowdsaleRefund_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call onlyCrowdsale_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((state_Fund[this]) == (0))) {
revert := true;
return;
}
state_Fund[this] := 1;
}

implementation refundCrowdsaleContributor_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var refundAmount_s1780: int;
var __var_84: int;
var __var_85: int;
var __var_86: int;
var __var_87: int;
var __var_88: bool;
if (!((__tmp__state_Fund[this]) == (1))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][msgsender_MSG]) >= (0));
if (!((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][msgsender_MSG]) > (0))) {
revert := true;
return;
}
assume ((refundAmount_s1780) >= (0));
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][msgsender_MSG]) >= (0));
refundAmount_s1780 := __tmp__M_Ref_int[__tmp__contributions_Fund[this]][msgsender_MSG];
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][msgsender_MSG]) >= (0));
__tmp__M_Ref_int[__tmp__contributions_Fund[this]][msgsender_MSG] := 0;
assume ((__var_85) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_85 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_86, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_85 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_86, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_85 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_86, msgsender_MSG);
} else {
assume (false);
}
assume ((__var_85) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_84, msgsender_MSG, __var_85);
if (revert) {
return;
}
__var_87 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_87 := (__var_87) - (gas);
assume ((refundAmount_s1780) >= (0));
call __var_88 := send__fail(this, msgsender_MSG, refundAmount_s1780);
if (!(__var_88)) {
revert := true;
return;
}
gas := (__var_87) + (gas);
}

implementation refundCrowdsaleContributor_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var refundAmount_s1780: int;
var __var_84: int;
var __var_85: int;
var __var_86: int;
var __var_87: int;
var __var_88: bool;
if (!((state_Fund[this]) == (1))) {
revert := true;
return;
}
assume ((M_Ref_int[contributions_Fund[this]][msgsender_MSG]) >= (0));
if (!((M_Ref_int[contributions_Fund[this]][msgsender_MSG]) > (0))) {
revert := true;
return;
}
assume ((refundAmount_s1780) >= (0));
assume ((M_Ref_int[contributions_Fund[this]][msgsender_MSG]) >= (0));
refundAmount_s1780 := M_Ref_int[contributions_Fund[this]][msgsender_MSG];
assume ((M_Ref_int[contributions_Fund[this]][msgsender_MSG]) >= (0));
M_Ref_int[contributions_Fund[this]][msgsender_MSG] := 0;
assume ((__var_85) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_85 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_86, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_85 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_86, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_85 := balanceOf_IERC20Token(token_Fund[this], this, __var_86, msgsender_MSG);
} else {
assume (false);
}
assume ((__var_85) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_84, msgsender_MSG, __var_85);
if (revert) {
return;
}
__var_87 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_87 := (__var_87) - (gas);
assume ((refundAmount_s1780) >= (0));
call __var_88 := send__success(this, msgsender_MSG, refundAmount_s1780);
if (!(__var_88)) {
revert := true;
return;
}
gas := (__var_87) + (gas);
assert {:EventEmitted "RefundContributor_Fund"} (true);
}

implementation autoRefundCrowdsaleContributor_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributorAddress_s1850: Ref)
{
var refundAmount_s1849: int;
var __var_89: int;
var __var_90: int;
var __var_91: int;
var __var_92: int;
var __var_93: bool;
if (!(((__tmp__M_Ref_bool[__tmp__ownerByAddress_MultiOwnable[this]][msgsender_MSG]) == (true)) || ((msgsender_MSG) == (__tmp__refundManager_Fund[this])))) {
revert := true;
return;
}
if (!((__tmp__state_Fund[this]) == (1))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributorAddress_s1850]) >= (0));
if (!((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributorAddress_s1850]) > (0))) {
revert := true;
return;
}
assume ((refundAmount_s1849) >= (0));
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributorAddress_s1850]) >= (0));
refundAmount_s1849 := __tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributorAddress_s1850];
assume ((__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributorAddress_s1850]) >= (0));
__tmp__M_Ref_int[__tmp__contributions_Fund[this]][contributorAddress_s1850] := 0;
assume ((__var_90) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_90 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_91, contributorAddress_s1850);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_90 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_91, contributorAddress_s1850);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_90 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_91, contributorAddress_s1850);
} else {
assume (false);
}
assume ((__var_90) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_89, contributorAddress_s1850, __var_90);
if (revert) {
return;
}
__var_92 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_92 := (__var_92) - (gas);
assume ((refundAmount_s1849) >= (0));
call __var_93 := send__fail(this, contributorAddress_s1850, refundAmount_s1849);
if (!(__var_93)) {
revert := true;
return;
}
gas := (__var_92) + (gas);
}

implementation autoRefundCrowdsaleContributor_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, contributorAddress_s1850: Ref)
{
var refundAmount_s1849: int;
var __var_89: int;
var __var_90: int;
var __var_91: int;
var __var_92: int;
var __var_93: bool;
if (!(((M_Ref_bool[ownerByAddress_MultiOwnable[this]][msgsender_MSG]) == (true)) || ((msgsender_MSG) == (refundManager_Fund[this])))) {
revert := true;
return;
}
if (!((state_Fund[this]) == (1))) {
revert := true;
return;
}
assume ((M_Ref_int[contributions_Fund[this]][contributorAddress_s1850]) >= (0));
if (!((M_Ref_int[contributions_Fund[this]][contributorAddress_s1850]) > (0))) {
revert := true;
return;
}
assume ((refundAmount_s1849) >= (0));
assume ((M_Ref_int[contributions_Fund[this]][contributorAddress_s1850]) >= (0));
refundAmount_s1849 := M_Ref_int[contributions_Fund[this]][contributorAddress_s1850];
assume ((M_Ref_int[contributions_Fund[this]][contributorAddress_s1850]) >= (0));
M_Ref_int[contributions_Fund[this]][contributorAddress_s1850] := 0;
assume ((__var_90) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_90 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_91, contributorAddress_s1850);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_90 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_91, contributorAddress_s1850);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_90 := balanceOf_IERC20Token(token_Fund[this], this, __var_91, contributorAddress_s1850);
} else {
assume (false);
}
assume ((__var_90) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_89, contributorAddress_s1850, __var_90);
if (revert) {
return;
}
__var_92 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_92 := (__var_92) - (gas);
assume ((refundAmount_s1849) >= (0));
call __var_93 := send__success(this, contributorAddress_s1850, refundAmount_s1849);
if (!(__var_93)) {
revert := true;
return;
}
gas := (__var_92) + (gas);
assert {:EventEmitted "RefundContributor_Fund"} (true);
}

implementation getCurrentTapAmount_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var __var_94: int;
if ((__tmp__state_Fund[this]) != (2)) {
__ret_0_ := 0;
return;
}
assume ((__var_94) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_94 := calcTapAmount_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (Fund)) {
call __var_94 := calcTapAmount_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_94) >= (0));
__ret_0_ := __var_94;
return;
}

implementation getCurrentTapAmount_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var __var_94: int;
if ((state_Fund[this]) != (2)) {
__ret_0_ := 0;
return;
}
assume ((__var_94) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_94 := calcTapAmount_Fund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (Fund)) {
call __var_94 := calcTapAmount_Fund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_94) >= (0));
__ret_0_ := __var_94;
return;
}

implementation calcTapAmount_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var amount_s1898: int;
var __var_95: int;
var __var_96: Ref;
var __var_97: Ref;
assume ((amount_s1898) >= (0));
assume ((__var_95) >= (0));
assume ((__tmp__now) >= (0));
assume ((__tmp__lastWithdrawTime_Fund[this]) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_95 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__now, __tmp__lastWithdrawTime_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (Fund)) {
call __var_95 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__now, __tmp__lastWithdrawTime_Fund[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_95) >= (0));
assume (((__var_95) * (192901234567901)) >= (0));
amount_s1898 := (__var_95) * (192901234567901);
__var_96 := this;
assume ((__tmp__Balance[this]) >= (0));
assume ((amount_s1898) >= (0));
if ((__tmp__Balance[this]) < (amount_s1898)) {
assume ((amount_s1898) >= (0));
__var_97 := this;
assume ((__tmp__Balance[this]) >= (0));
amount_s1898 := __tmp__Balance[this];
}
assume ((amount_s1898) >= (0));
__ret_0_ := amount_s1898;
return;
}

implementation calcTapAmount_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var amount_s1898: int;
var __var_95: int;
var __var_96: Ref;
var __var_97: Ref;
assume ((amount_s1898) >= (0));
assume ((__var_95) >= (0));
assume ((now) >= (0));
assume ((lastWithdrawTime_Fund[this]) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_95 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, now, lastWithdrawTime_Fund[this]);
if (revert) {
return;
}
} else if ((DType[this]) == (Fund)) {
call __var_95 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, now, lastWithdrawTime_Fund[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_95) >= (0));
assume (((__var_95) * (192901234567901)) >= (0));
amount_s1898 := (__var_95) * (192901234567901);
__var_96 := this;
assume ((Balance[this]) >= (0));
assume ((amount_s1898) >= (0));
if ((Balance[this]) < (amount_s1898)) {
assume ((amount_s1898) >= (0));
__var_97 := this;
assume ((Balance[this]) >= (0));
amount_s1898 := Balance[this];
}
assume ((amount_s1898) >= (0));
__ret_0_ := amount_s1898;
return;
}

implementation firstWithdraw_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var amount_s1931: int;
var __var_98: int;
var __var_99: bool;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call withdrawEnabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((__tmp__firstWithdrawAmount_Fund[this]) >= (0));
if (!((__tmp__firstWithdrawAmount_Fund[this]) > (0))) {
revert := true;
return;
}
assume ((amount_s1931) >= (0));
assume ((__tmp__firstWithdrawAmount_Fund[this]) >= (0));
amount_s1931 := __tmp__firstWithdrawAmount_Fund[this];
assume ((__tmp__firstWithdrawAmount_Fund[this]) >= (0));
__tmp__firstWithdrawAmount_Fund[this] := 0;
__var_98 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_98 := (__var_98) - (gas);
assume ((amount_s1931) >= (0));
call __var_99 := send__fail(this, __tmp__teamWallet_Fund[this], amount_s1931);
if (!(__var_99)) {
revert := true;
return;
}
gas := (__var_98) + (gas);
}

implementation firstWithdraw_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var amount_s1931: int;
var __var_98: int;
var __var_99: bool;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call withdrawEnabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((firstWithdrawAmount_Fund[this]) >= (0));
if (!((firstWithdrawAmount_Fund[this]) > (0))) {
revert := true;
return;
}
assume ((amount_s1931) >= (0));
assume ((firstWithdrawAmount_Fund[this]) >= (0));
amount_s1931 := firstWithdrawAmount_Fund[this];
assume ((firstWithdrawAmount_Fund[this]) >= (0));
firstWithdrawAmount_Fund[this] := 0;
__var_98 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_98 := (__var_98) - (gas);
assume ((amount_s1931) >= (0));
call __var_99 := send__success(this, teamWallet_Fund[this], amount_s1931);
if (!(__var_99)) {
revert := true;
return;
}
gas := (__var_98) + (gas);
assert {:EventEmitted "Withdraw_Fund"} (true);
}

implementation withdraw_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var amount_s1966: int;
var __var_100: int;
var __var_101: bool;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call withdrawEnabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((__tmp__state_Fund[this]) == (2))) {
revert := true;
return;
}
assume ((amount_s1966) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call amount_s1966 := calcTapAmount_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (Fund)) {
call amount_s1966 := calcTapAmount_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
amount_s1966 := amount_s1966;
assume ((__tmp__lastWithdrawTime_Fund[this]) >= (0));
assume ((__tmp__now) >= (0));
__tmp__lastWithdrawTime_Fund[this] := __tmp__now;
__var_100 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_100 := (__var_100) - (gas);
assume ((amount_s1966) >= (0));
call __var_101 := send__fail(this, __tmp__teamWallet_Fund[this], amount_s1966);
if (!(__var_101)) {
revert := true;
return;
}
gas := (__var_100) + (gas);
}

implementation withdraw_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var amount_s1966: int;
var __var_100: int;
var __var_101: bool;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call withdrawEnabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((state_Fund[this]) == (2))) {
revert := true;
return;
}
assume ((amount_s1966) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call amount_s1966 := calcTapAmount_Fund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (Fund)) {
call amount_s1966 := calcTapAmount_Fund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
amount_s1966 := amount_s1966;
assume ((lastWithdrawTime_Fund[this]) >= (0));
assume ((now) >= (0));
lastWithdrawTime_Fund[this] := now;
__var_100 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_100 := (__var_100) - (gas);
assume ((amount_s1966) >= (0));
call __var_101 := send__success(this, teamWallet_Fund[this], amount_s1966);
if (!(__var_101)) {
revert := true;
return;
}
gas := (__var_100) + (gas);
assert {:EventEmitted "Withdraw_Fund"} (true);
}

implementation enableRefund_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_102: int;
var __var_103: int;
var __var_104: int;
var __var_105: int;
var __var_106: int;
var __var_107: int;
var __var_108: int;
var __var_109: int;
var __var_110: int;
var __var_111: int;
var __var_112: int;
var __var_113: int;
var __var_114: int;
var __var_115: int;
var __var_116: int;
var __var_117: int;
var __var_118: int;
var __var_119: int;
var __var_120: int;
var __var_121: int;
var __var_122: int;
if (!((__tmp__state_Fund[this]) == (2))) {
revert := true;
return;
}
__tmp__state_Fund[this] := 3;
assume ((__var_103) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_103 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_104, __tmp__lockedTokenAddress_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_103 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_104, __tmp__lockedTokenAddress_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_103 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_104, __tmp__lockedTokenAddress_Fund[this]);
} else {
assume (false);
}
assume ((__var_103) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_102, __tmp__lockedTokenAddress_Fund[this], __var_103);
if (revert) {
return;
}
assume ((__var_106) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_106 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_107, __tmp__companyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_106 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_107, __tmp__companyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_106 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_107, __tmp__companyTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_106) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_105, __tmp__companyTokenWallet_Fund[this], __var_106);
if (revert) {
return;
}
assume ((__var_109) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_109 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_110, __tmp__reserveTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_109 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_110, __tmp__reserveTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_109 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_110, __tmp__reserveTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_109) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_108, __tmp__reserveTokenWallet_Fund[this], __var_109);
if (revert) {
return;
}
assume ((__var_112) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_112 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_113, __tmp__foundationTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_112 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_113, __tmp__foundationTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_112 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_113, __tmp__foundationTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_112) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_111, __tmp__foundationTokenWallet_Fund[this], __var_112);
if (revert) {
return;
}
assume ((__var_115) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_115 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_116, __tmp__bountyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_115 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_116, __tmp__bountyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_115 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_116, __tmp__bountyTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_115) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_114, __tmp__bountyTokenWallet_Fund[this], __var_115);
if (revert) {
return;
}
assume ((__var_118) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_118 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_119, __tmp__referralTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_118 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_119, __tmp__referralTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_118 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_119, __tmp__referralTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_118) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_117, __tmp__referralTokenWallet_Fund[this], __var_118);
if (revert) {
return;
}
assume ((__var_121) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_121 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_122, __tmp__advisorTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_121 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_122, __tmp__advisorTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_121 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_122, __tmp__advisorTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_121) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_120, __tmp__advisorTokenWallet_Fund[this], __var_121);
if (revert) {
return;
}
}

implementation enableRefund_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_102: int;
var __var_103: int;
var __var_104: int;
var __var_105: int;
var __var_106: int;
var __var_107: int;
var __var_108: int;
var __var_109: int;
var __var_110: int;
var __var_111: int;
var __var_112: int;
var __var_113: int;
var __var_114: int;
var __var_115: int;
var __var_116: int;
var __var_117: int;
var __var_118: int;
var __var_119: int;
var __var_120: int;
var __var_121: int;
var __var_122: int;
if (!((state_Fund[this]) == (2))) {
revert := true;
return;
}
state_Fund[this] := 3;
assume ((__var_103) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_103 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_104, lockedTokenAddress_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_103 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_104, lockedTokenAddress_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_103 := balanceOf_IERC20Token(token_Fund[this], this, __var_104, lockedTokenAddress_Fund[this]);
} else {
assume (false);
}
assume ((__var_103) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_102, lockedTokenAddress_Fund[this], __var_103);
if (revert) {
return;
}
assume ((__var_106) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_106 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_107, companyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_106 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_107, companyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_106 := balanceOf_IERC20Token(token_Fund[this], this, __var_107, companyTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_106) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_105, companyTokenWallet_Fund[this], __var_106);
if (revert) {
return;
}
assume ((__var_109) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_109 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_110, reserveTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_109 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_110, reserveTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_109 := balanceOf_IERC20Token(token_Fund[this], this, __var_110, reserveTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_109) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_108, reserveTokenWallet_Fund[this], __var_109);
if (revert) {
return;
}
assume ((__var_112) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_112 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_113, foundationTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_112 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_113, foundationTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_112 := balanceOf_IERC20Token(token_Fund[this], this, __var_113, foundationTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_112) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_111, foundationTokenWallet_Fund[this], __var_112);
if (revert) {
return;
}
assume ((__var_115) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_115 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_116, bountyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_115 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_116, bountyTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_115 := balanceOf_IERC20Token(token_Fund[this], this, __var_116, bountyTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_115) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_114, bountyTokenWallet_Fund[this], __var_115);
if (revert) {
return;
}
assume ((__var_118) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_118 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_119, referralTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_118 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_119, referralTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_118 := balanceOf_IERC20Token(token_Fund[this], this, __var_119, referralTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_118) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_117, referralTokenWallet_Fund[this], __var_118);
if (revert) {
return;
}
assume ((__var_121) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_121 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_122, advisorTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_121 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_122, advisorTokenWallet_Fund[this]);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_121 := balanceOf_IERC20Token(token_Fund[this], this, __var_122, advisorTokenWallet_Fund[this]);
} else {
assume (false);
}
assume ((__var_121) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_120, advisorTokenWallet_Fund[this], __var_121);
if (revert) {
return;
}
assert {:EventEmitted "RefundEnabled_Fund"} (true);
}

implementation refundTokenHolder_Fund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var tokenBalance_s2133: int;
var __var_123: int;
var __var_124: int;
var __var_125: int;
var __var_126: Ref;
var refundAmount_s2133: int;
var __var_127: int;
var __var_128: int;
var __var_129: bool;
if (!((__tmp__state_Fund[this]) == (3))) {
revert := true;
return;
}
assume ((tokenBalance_s2133) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call tokenBalance_s2133 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_123, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call tokenBalance_s2133 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_123, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call tokenBalance_s2133 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_123, msgsender_MSG);
} else {
assume (false);
}
tokenBalance_s2133 := tokenBalance_s2133;
assume ((tokenBalance_s2133) >= (0));
if (!((tokenBalance_s2133) > (0))) {
revert := true;
return;
}
assume ((__var_124) >= (0));
assume ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken));
__var_124 := __tmp__totalSupply_IERC20Token[__tmp__token_Fund[this]];
assume ((__var_124) >= (0));
if (!((__var_124) == (100))) {
revert := true;
return;
}
__var_126 := this;
assume ((__tmp__Balance[this]) >= (0));
if (!((__tmp__Balance[this]) == (100))) {
revert := true;
return;
}
assume ((refundAmount_s2133) >= (0));
assume ((tokenBalance_s2133) >= (0));
refundAmount_s2133 := tokenBalance_s2133;
assume ((refundAmount_s2133) >= (0));
if (!((refundAmount_s2133) > (0))) {
revert := true;
return;
}
assume ((tokenBalance_s2133) >= (0));
call destroy_ManagedToken__fail(__tmp__token_Fund[this], this, __var_127, msgsender_MSG, tokenBalance_s2133);
if (revert) {
return;
}
__var_128 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_128 := (__var_128) - (gas);
assume ((refundAmount_s2133) >= (0));
call __var_129 := send__fail(this, msgsender_MSG, refundAmount_s2133);
if (!(__var_129)) {
revert := true;
return;
}
gas := (__var_128) + (gas);
}

implementation refundTokenHolder_Fund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var tokenBalance_s2133: int;
var __var_123: int;
var __var_124: int;
var __var_125: int;
var __var_126: Ref;
var refundAmount_s2133: int;
var __var_127: int;
var __var_128: int;
var __var_129: bool;
if (!((state_Fund[this]) == (3))) {
revert := true;
return;
}
assume ((tokenBalance_s2133) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call tokenBalance_s2133 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_123, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call tokenBalance_s2133 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_123, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call tokenBalance_s2133 := balanceOf_IERC20Token(token_Fund[this], this, __var_123, msgsender_MSG);
} else {
assume (false);
}
tokenBalance_s2133 := tokenBalance_s2133;
assume ((tokenBalance_s2133) >= (0));
if (!((tokenBalance_s2133) > (0))) {
revert := true;
return;
}
assume ((__var_124) >= (0));
assume ((DType[token_Fund[this]]) == (ManagedToken));
__var_124 := totalSupply_IERC20Token[token_Fund[this]];
assume ((__var_124) >= (0));
if (!((__var_124) == (100))) {
revert := true;
return;
}
__var_126 := this;
assume ((Balance[this]) >= (0));
if (!((Balance[this]) == (100))) {
revert := true;
return;
}
assume ((refundAmount_s2133) >= (0));
assume ((tokenBalance_s2133) >= (0));
refundAmount_s2133 := tokenBalance_s2133;
assume ((refundAmount_s2133) >= (0));
if (!((refundAmount_s2133) > (0))) {
revert := true;
return;
}
assume ((tokenBalance_s2133) >= (0));
call destroy_ManagedToken__success(token_Fund[this], this, __var_127, msgsender_MSG, tokenBalance_s2133);
if (revert) {
return;
}
__var_128 := gas;
if ((gas) > (2300)) {
gas := 2300;
}
__var_128 := (__var_128) - (gas);
assume ((refundAmount_s2133) >= (0));
call __var_129 := send__success(this, msgsender_MSG, refundAmount_s2133);
if (!(__var_129)) {
revert := true;
return;
}
gas := (__var_128) + (gas);
assert {:EventEmitted "RefundHolder_Fund"} (true);
}

implementation ICrowdsaleFund_ICrowdsaleFund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation ICrowdsaleFund_ICrowdsaleFund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation ICrowdsaleFund_ICrowdsaleFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call ICrowdsaleFund_ICrowdsaleFund_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation ICrowdsaleFund_ICrowdsaleFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call ICrowdsaleFund_ICrowdsaleFund_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation IERC20Token_IERC20Token_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__name_IERC20Token[this] := 1862791363;
__tmp__symbol_IERC20Token[this] := 1862791363;
__tmp__decimals_IERC20Token[this] := 0;
__tmp__totalSupply_IERC20Token[this] := 0;
// end of initialization
}

implementation IERC20Token_IERC20Token_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
name_IERC20Token[this] := 1862791363;
symbol_IERC20Token[this] := 1862791363;
decimals_IERC20Token[this] := 0;
totalSupply_IERC20Token[this] := 0;
// end of initialization
}

implementation IERC20Token_IERC20Token__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call IERC20Token_IERC20Token_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation IERC20Token_IERC20Token__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call IERC20Token_IERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation IPollManagedFund_IPollManagedFund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation IPollManagedFund_IPollManagedFund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation IPollManagedFund_IPollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call IPollManagedFund_IPollManagedFund_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation IPollManagedFund_IPollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call IPollManagedFund_IPollManagedFund_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation ISimpleCrowdsale_ISimpleCrowdsale_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation ISimpleCrowdsale_ISimpleCrowdsale_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation ISimpleCrowdsale_ISimpleCrowdsale__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call ISimpleCrowdsale_ISimpleCrowdsale_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation ISimpleCrowdsale_ISimpleCrowdsale__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call ISimpleCrowdsale_ISimpleCrowdsale_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation ITokenEventListener_ITokenEventListener_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation ITokenEventListener_ITokenEventListener_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation ITokenEventListener_ITokenEventListener__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call ITokenEventListener_ITokenEventListener_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation ITokenEventListener_ITokenEventListener__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call ITokenEventListener_ITokenEventListener_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation ManagedToken_ManagedToken_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref)
{
var __var_130: Ref;
var __var_131: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__allowTransfers_ManagedToken[this] := false;
__tmp__issuanceFinished_ManagedToken[this] := false;
// end of initialization
__var_130 := null;
if ((_listener_s2486) != (null)) {
assume ((__tmp__DType[_listener_s2486]) == (ITokenEventListener));
__var_131 := _listener_s2486;
__tmp__eventListener_ManagedToken[this] := __var_131;
}
if ((__tmp__DType[this]) == (ManagedToken)) {
call _setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s2486);
if (revert) {
return;
}
} else {
assume (false);
}
}

implementation ManagedToken_ManagedToken_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref)
{
var __var_130: Ref;
var __var_131: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
allowTransfers_ManagedToken[this] := false;
issuanceFinished_ManagedToken[this] := false;
// end of initialization
__var_130 := null;
if ((_listener_s2486) != (null)) {
assume ((DType[_listener_s2486]) == (ITokenEventListener));
__var_131 := _listener_s2486;
eventListener_ManagedToken[this] := __var_131;
}
if ((DType[this]) == (ManagedToken)) {
call _setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s2486);
if (revert) {
return;
}
} else {
assume (false);
}
}

implementation ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref)
{
var __var_130: Ref;
var __var_131: Ref;
call IERC20Token_IERC20Token__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call MultiOwnable_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ManagedToken_ManagedToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _listener_s2486, _owners_s2486);
if (revert) {
return;
}
}

implementation ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2486: Ref, _owners_s2486: Ref)
{
var __var_130: Ref;
var __var_131: Ref;
call IERC20Token_IERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call MultiOwnable_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ManagedToken_ManagedToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _listener_s2486, _owners_s2486);
if (revert) {
return;
}
}

implementation approve_ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2501: Ref, _value_s2501: int) returns (__ret_0_: bool)
{
var __var_132: bool;
assume ((_value_s2501) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_132 := approve_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s2501, _value_s2501);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_132;
return;
}

implementation approve_ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2501: Ref, _value_s2501: int) returns (__ret_0_: bool)
{
var __var_132: bool;
assume ((_value_s2501) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_132 := approve_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s2501, _value_s2501);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := __var_132;
return;
}

implementation setAllowTransfers_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _allowTransfers_s2517: bool)
{
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__tmp__allowTransfers_ManagedToken[this] := _allowTransfers_s2517;
}

implementation setAllowTransfers_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _allowTransfers_s2517: bool)
{
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
allowTransfers_ManagedToken[this] := _allowTransfers_s2517;
assert {:EventEmitted "AllowTransfersChanged_ManagedToken"} (true);
}

implementation setListener_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2542: Ref)
{
var __var_133: Ref;
var __var_134: Ref;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_133 := null;
if ((_listener_s2542) != (null)) {
assume ((__tmp__DType[_listener_s2542]) == (ITokenEventListener));
__var_134 := _listener_s2542;
__tmp__eventListener_ManagedToken[this] := __var_134;
} else {
}
}

implementation setListener_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _listener_s2542: Ref)
{
var __var_133: Ref;
var __var_134: Ref;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__var_133 := null;
if ((_listener_s2542) != (null)) {
assume ((DType[_listener_s2542]) == (ITokenEventListener));
__var_134 := _listener_s2542;
eventListener_ManagedToken[this] := __var_134;
} else {
}
}

implementation transfer_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2557: Ref, _value_s2557: int) returns (__ret_0_: bool)
{
var __var_135: bool;
assume ((_value_s2557) >= (0));
call __var_135 := transfer_ManagedToken_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s2557, _value_s2557);
if (revert) {
return;
}
__ret_0_ := __var_135;
return;
}

implementation transfer_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2557: Ref, _value_s2557: int) returns (__ret_0_: bool)
{
var __var_135: bool;
assume ((_value_s2557) >= (0));
call __var_135 := transfer_ManagedToken_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s2557, _value_s2557);
if (revert) {
return;
}
__ret_0_ := __var_135;
return;
}

implementation transfer_ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2593: Ref, _value_s2593: int) returns (__ret_0_: bool)
{
var success_s2592: bool;
var __var_136: bool;
var __var_137: int;
call transfersAllowed_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_value_s2593) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call success_s2592 := transfer_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s2593, _value_s2593);
if (revert) {
return;
}
} else {
assume (false);
}
success_s2592 := success_s2592;
call __var_136 := hasListener_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if ((__var_136) && (success_s2592)) {
assume ((_value_s2593) >= (0));
if ((__tmp__DType[__tmp__eventListener_ManagedToken[this]]) == (PollManagedFund)) {
call onTokenTransfer_PollManagedFund__fail(__tmp__eventListener_ManagedToken[this], this, __var_137, msgsender_MSG, _to_s2593, _value_s2593);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__eventListener_ManagedToken[this]]) == (ITokenEventListener)) {
call onTokenTransfer_ITokenEventListener(__tmp__eventListener_ManagedToken[this], this, __var_137, msgsender_MSG, _to_s2593, _value_s2593);
} else {
assume (false);
}
}
__ret_0_ := success_s2592;
return;
}

implementation transfer_ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2593: Ref, _value_s2593: int) returns (__ret_0_: bool)
{
var success_s2592: bool;
var __var_136: bool;
var __var_137: int;
call transfersAllowed_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_value_s2593) >= (0));
if ((DType[this]) == (ManagedToken)) {
call success_s2592 := transfer_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s2593, _value_s2593);
if (revert) {
return;
}
} else {
assume (false);
}
success_s2592 := success_s2592;
call __var_136 := hasListener_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if ((__var_136) && (success_s2592)) {
assume ((_value_s2593) >= (0));
if ((DType[eventListener_ManagedToken[this]]) == (PollManagedFund)) {
call onTokenTransfer_PollManagedFund__success(eventListener_ManagedToken[this], this, __var_137, msgsender_MSG, _to_s2593, _value_s2593);
if (revert) {
return;
}
} else if ((DType[eventListener_ManagedToken[this]]) == (ITokenEventListener)) {
call onTokenTransfer_ITokenEventListener(eventListener_ManagedToken[this], this, __var_137, msgsender_MSG, _to_s2593, _value_s2593);
} else {
assume (false);
}
}
__ret_0_ := success_s2592;
return;
}

implementation transferFrom_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2611: Ref, _to_s2611: Ref, _value_s2611: int) returns (__ret_0_: bool)
{
var __var_138: bool;
assume ((_value_s2611) >= (0));
call __var_138 := transferFrom_ManagedToken_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG, _from_s2611, _to_s2611, _value_s2611);
if (revert) {
return;
}
__ret_0_ := __var_138;
return;
}

implementation transferFrom_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2611: Ref, _to_s2611: Ref, _value_s2611: int) returns (__ret_0_: bool)
{
var __var_138: bool;
assume ((_value_s2611) >= (0));
call __var_138 := transferFrom_ManagedToken_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s2611, _to_s2611, _value_s2611);
if (revert) {
return;
}
__ret_0_ := __var_138;
return;
}

implementation transferFrom_ManagedToken_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2649: Ref, _to_s2649: Ref, _value_s2649: int) returns (__ret_0_: bool)
{
var success_s2648: bool;
var __var_139: bool;
var __var_140: int;
call transfersAllowed_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_value_s2649) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call success_s2648 := transferFrom_ERC20Token_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _from_s2649, _to_s2649, _value_s2649);
if (revert) {
return;
}
} else {
assume (false);
}
success_s2648 := success_s2648;
call __var_139 := hasListener_ManagedToken__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if ((__var_139) && (success_s2648)) {
assume ((_value_s2649) >= (0));
if ((__tmp__DType[__tmp__eventListener_ManagedToken[this]]) == (PollManagedFund)) {
call onTokenTransfer_PollManagedFund__fail(__tmp__eventListener_ManagedToken[this], this, __var_140, _from_s2649, _to_s2649, _value_s2649);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__eventListener_ManagedToken[this]]) == (ITokenEventListener)) {
call onTokenTransfer_ITokenEventListener(__tmp__eventListener_ManagedToken[this], this, __var_140, _from_s2649, _to_s2649, _value_s2649);
} else {
assume (false);
}
}
__ret_0_ := success_s2648;
return;
}

implementation transferFrom_ManagedToken_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2649: Ref, _to_s2649: Ref, _value_s2649: int) returns (__ret_0_: bool)
{
var success_s2648: bool;
var __var_139: bool;
var __var_140: int;
call transfersAllowed_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_value_s2649) >= (0));
if ((DType[this]) == (ManagedToken)) {
call success_s2648 := transferFrom_ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _from_s2649, _to_s2649, _value_s2649);
if (revert) {
return;
}
} else {
assume (false);
}
success_s2648 := success_s2648;
call __var_139 := hasListener_ManagedToken__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if ((__var_139) && (success_s2648)) {
assume ((_value_s2649) >= (0));
if ((DType[eventListener_ManagedToken[this]]) == (PollManagedFund)) {
call onTokenTransfer_PollManagedFund__success(eventListener_ManagedToken[this], this, __var_140, _from_s2649, _to_s2649, _value_s2649);
if (revert) {
return;
}
} else if ((DType[eventListener_ManagedToken[this]]) == (ITokenEventListener)) {
call onTokenTransfer_ITokenEventListener(eventListener_ManagedToken[this], this, __var_140, _from_s2649, _to_s2649, _value_s2649);
} else {
assume (false);
}
}
__ret_0_ := success_s2648;
return;
}

implementation hasListener_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_141: Ref;
var __var_142: Ref;
__var_141 := __tmp__eventListener_ManagedToken[this];
__var_142 := null;
if ((__tmp__eventListener_ManagedToken[this]) == (null)) {
__ret_0_ := false;
return;
}
__ret_0_ := true;
return;
}

implementation hasListener_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_141: Ref;
var __var_142: Ref;
__var_141 := eventListener_ManagedToken[this];
__var_142 := null;
if ((eventListener_ManagedToken[this]) == (null)) {
__ret_0_ := false;
return;
}
__ret_0_ := true;
return;
}

implementation issue_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2704: Ref, _value_s2704: int)
{
var __var_143: int;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call canIssue_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s2704]) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s2704]) >= (0));
assume ((_value_s2704) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_143 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s2704], _value_s2704);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_to_s2704] := __var_143;
assume ((__var_143) >= (0));
}

implementation issue_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _to_s2704: Ref, _value_s2704: int)
{
var __var_143: int;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call canIssue_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((M_Ref_int[balances_ERC20Token[this]][_to_s2704]) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][_to_s2704]) >= (0));
assume ((_value_s2704) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_143 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_to_s2704], _value_s2704);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[balances_ERC20Token[this]][_to_s2704] := __var_143;
assume ((__var_143) >= (0));
assert {:EventEmitted "Issue_ManagedToken"} (true);
assert {:EventEmitted "Transfer_ManagedToken"} (true);
}

implementation destroy_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2756: Ref, _value_s2756: int)
{
var __var_144: int;
if (!((__tmp__M_Ref_bool[__tmp__ownerByAddress_MultiOwnable[this]][msgsender_MSG]) || ((msgsender_MSG) == (_from_s2756)))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s2756]) >= (0));
assume ((_value_s2756) >= (0));
if (!((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s2756]) >= (_value_s2756))) {
revert := true;
return;
}
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s2756]) >= (0));
assume ((__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s2756]) >= (0));
assume ((_value_s2756) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_144 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s2756], _value_s2756);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__balances_ERC20Token[this]][_from_s2756] := __var_144;
assume ((__var_144) >= (0));
}

implementation destroy_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s2756: Ref, _value_s2756: int)
{
var __var_144: int;
if (!((M_Ref_bool[ownerByAddress_MultiOwnable[this]][msgsender_MSG]) || ((msgsender_MSG) == (_from_s2756)))) {
revert := true;
return;
}
assume ((M_Ref_int[balances_ERC20Token[this]][_from_s2756]) >= (0));
assume ((_value_s2756) >= (0));
if (!((M_Ref_int[balances_ERC20Token[this]][_from_s2756]) >= (_value_s2756))) {
revert := true;
return;
}
assume ((M_Ref_int[balances_ERC20Token[this]][_from_s2756]) >= (0));
assume ((M_Ref_int[balances_ERC20Token[this]][_from_s2756]) >= (0));
assume ((_value_s2756) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_144 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[balances_ERC20Token[this]][_from_s2756], _value_s2756);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[balances_ERC20Token[this]][_from_s2756] := __var_144;
assume ((__var_144) >= (0));
assert {:EventEmitted "Transfer_ManagedToken"} (true);
assert {:EventEmitted "Destroy_ManagedToken"} (true);
}

implementation increaseApproval_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2797: Ref, _addedValue_s2797: int) returns (__ret_0_: bool)
{
var __var_145: Ref;
var __var_146: int;
var __var_147: Ref;
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_145 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG] := __var_145;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797]) >= (0));
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_147 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG] := __var_147;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797]) >= (0));
assume ((_addedValue_s2797) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_146 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797], _addedValue_s2797);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797] := __var_146;
assume ((__var_146) >= (0));
__ret_0_ := true;
return;
}

implementation increaseApproval_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2797: Ref, _addedValue_s2797: int) returns (__ret_0_: bool)
{
var __var_145: Ref;
var __var_146: int;
var __var_147: Ref;
if ((M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_145 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG] := __var_145;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797]) >= (0));
if ((M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_147 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG] := __var_147;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797]) >= (0));
assume ((_addedValue_s2797) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_146 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797], _addedValue_s2797);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2797] := __var_146;
assume ((__var_146) >= (0));
assert {:EventEmitted "Approval_ManagedToken"} (true);
__ret_0_ := true;
return;
}

implementation decreaseApproval_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2857: Ref, _subtractedValue_s2857: int) returns (__ret_0_: bool)
{
var oldValue_s2856: int;
var __var_148: Ref;
var __var_149: Ref;
var __var_150: Ref;
var __var_151: int;
assume ((oldValue_s2856) >= (0));
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_148 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG] := __var_148;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857]) >= (0));
oldValue_s2856 := __tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857];
assume ((_subtractedValue_s2857) >= (0));
assume ((oldValue_s2856) >= (0));
if ((_subtractedValue_s2857) > (oldValue_s2856)) {
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_149 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG] := __var_149;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857]) >= (0));
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857] := 0;
} else {
if ((__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_150 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG] := __var_150;
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857]) >= (0));
assume ((oldValue_s2856) >= (0));
assume ((_subtractedValue_s2857) >= (0));
if ((__tmp__DType[this]) == (ManagedToken)) {
call __var_151 := safeSub_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, oldValue_s2856, _subtractedValue_s2857);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__M_Ref_int[__tmp__M_Ref_Ref[__tmp__allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857] := __var_151;
assume ((__var_151) >= (0));
}
__ret_0_ := true;
return;
}

implementation decreaseApproval_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _spender_s2857: Ref, _subtractedValue_s2857: int) returns (__ret_0_: bool)
{
var oldValue_s2856: int;
var __var_148: Ref;
var __var_149: Ref;
var __var_150: Ref;
var __var_151: int;
assume ((oldValue_s2856) >= (0));
if ((M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_148 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG] := __var_148;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857]) >= (0));
oldValue_s2856 := M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857];
assume ((_subtractedValue_s2857) >= (0));
assume ((oldValue_s2856) >= (0));
if ((_subtractedValue_s2857) > (oldValue_s2856)) {
if ((M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_149 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG] := __var_149;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857]) >= (0));
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857] := 0;
} else {
if ((M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]) == (null)) {
call __var_150 := FreshRefGenerator__success();
if (revert) {
return;
}
M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG] := __var_150;
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]] := zeroRefIntArr();
}
assume ((M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857]) >= (0));
assume ((oldValue_s2856) >= (0));
assume ((_subtractedValue_s2857) >= (0));
if ((DType[this]) == (ManagedToken)) {
call __var_151 := safeSub_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, oldValue_s2856, _subtractedValue_s2857);
if (revert) {
return;
}
} else {
assume (false);
}
M_Ref_int[M_Ref_Ref[allowed_ERC20Token[this]][msgsender_MSG]][_spender_s2857] := __var_151;
assume ((__var_151) >= (0));
}
assert {:EventEmitted "Approval_ManagedToken"} (true);
__ret_0_ := true;
return;
}

implementation finishIssuance_ManagedToken__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
__tmp__issuanceFinished_ManagedToken[this] := true;
__ret_0_ := true;
return;
}

implementation finishIssuance_ManagedToken__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
issuanceFinished_ManagedToken[this] := true;
assert {:EventEmitted "IssuanceFinished_ManagedToken"} (true);
__ret_0_ := true;
return;
}

implementation MultiOwnable_MultiOwnable_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_152: Ref;
var __var_153: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__manager_MultiOwnable[this] := null;
// Make array/mapping vars distinct for owners
call __var_152 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__owners_MultiOwnable[this] := __var_152;
assume ((__tmp__Length[__tmp__owners_MultiOwnable[this]]) == (0));
// Make array/mapping vars distinct for ownerByAddress
call __var_153 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__ownerByAddress_MultiOwnable[this] := __var_153;
// Initialize Boolean mapping ownerByAddress
__tmp__M_Ref_bool[__tmp__ownerByAddress_MultiOwnable[this]] := zeroRefBoolArr();
// end of initialization
__tmp__manager_MultiOwnable[this] := msgsender_MSG;
}

implementation MultiOwnable_MultiOwnable_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_152: Ref;
var __var_153: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
manager_MultiOwnable[this] := null;
// Make array/mapping vars distinct for owners
call __var_152 := FreshRefGenerator__success();
if (revert) {
return;
}
owners_MultiOwnable[this] := __var_152;
assume ((Length[owners_MultiOwnable[this]]) == (0));
// Make array/mapping vars distinct for ownerByAddress
call __var_153 := FreshRefGenerator__success();
if (revert) {
return;
}
ownerByAddress_MultiOwnable[this] := __var_153;
// Initialize Boolean mapping ownerByAddress
M_Ref_bool[ownerByAddress_MultiOwnable[this]] := zeroRefBoolArr();
// end of initialization
manager_MultiOwnable[this] := msgsender_MSG;
}

implementation MultiOwnable_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_152: Ref;
var __var_153: Ref;
call MultiOwnable_MultiOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation MultiOwnable_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_152: Ref;
var __var_153: Ref;
call MultiOwnable_MultiOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation setOwners_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2931: Ref)
{
if (!((msgsender_MSG) == (__tmp__manager_MultiOwnable[this]))) {
revert := true;
return;
}
if ((__tmp__DType[this]) == (PollManagedFund)) {
call _setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (ManagedToken)) {
call _setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (Fund)) {
call _setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (MultiOwnable)) {
call _setOwners_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else {
assume (false);
}
}

implementation setOwners_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2931: Ref)
{
if (!((msgsender_MSG) == (manager_MultiOwnable[this]))) {
revert := true;
return;
}
if ((DType[this]) == (PollManagedFund)) {
call _setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else if ((DType[this]) == (ManagedToken)) {
call _setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else if ((DType[this]) == (Fund)) {
call _setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else if ((DType[this]) == (MultiOwnable)) {
call _setOwners_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
if (revert) {
return;
}
} else {
assume (false);
}
}

implementation _setOwners_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2988: Ref)
{
var i_s2957: int;
var j_s2978: int;
assume ((i_s2957) >= (0));
assume ((__tmp__Length[__tmp__owners_MultiOwnable[this]]) >= (0));
assume ((i_s2957) >= (0));
i_s2957 := 0;
while ((i_s2957) < (__tmp__Length[__tmp__owners_MultiOwnable[this]]))
{
assume ((i_s2957) >= (0));
__tmp__M_Ref_bool[__tmp__ownerByAddress_MultiOwnable[this]][__tmp__M_int_Ref[__tmp__owners_MultiOwnable[this]][i_s2957]] := false;
assume ((i_s2957) >= (0));
i_s2957 := (i_s2957) + (1);
assume ((i_s2957) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((j_s2978) >= (0));
assume ((__tmp__Length[_owners_s2988]) >= (0));
assume ((j_s2978) >= (0));
j_s2978 := 0;
while ((j_s2978) < (__tmp__Length[_owners_s2988]))
{
assume ((j_s2978) >= (0));
__tmp__M_Ref_bool[__tmp__ownerByAddress_MultiOwnable[this]][__tmp__M_int_Ref[_owners_s2988][j_s2978]] := true;
assume ((j_s2978) >= (0));
j_s2978 := (j_s2978) + (1);
assume ((j_s2978) >= (0));
if ((gas) < (0)) {
return;
}
}
__tmp__owners_MultiOwnable[this] := _owners_s2988;
}

implementation _setOwners_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _owners_s2988: Ref)
{
var i_s2957: int;
var j_s2978: int;
assume ((i_s2957) >= (0));
assume ((Length[owners_MultiOwnable[this]]) >= (0));
assume ((i_s2957) >= (0));
i_s2957 := 0;
while ((i_s2957) < (Length[owners_MultiOwnable[this]]))
{
assume ((i_s2957) >= (0));
M_Ref_bool[ownerByAddress_MultiOwnable[this]][M_int_Ref[owners_MultiOwnable[this]][i_s2957]] := false;
assume ((i_s2957) >= (0));
i_s2957 := (i_s2957) + (1);
assume ((i_s2957) >= (0));
if ((gas) < (0)) {
return;
}
}
assume ((j_s2978) >= (0));
assume ((Length[_owners_s2988]) >= (0));
assume ((j_s2978) >= (0));
j_s2978 := 0;
while ((j_s2978) < (Length[_owners_s2988]))
{
assume ((j_s2978) >= (0));
M_Ref_bool[ownerByAddress_MultiOwnable[this]][M_int_Ref[_owners_s2988][j_s2978]] := true;
assume ((j_s2978) >= (0));
j_s2978 := (j_s2978) + (1);
assume ((j_s2978) >= (0));
if ((gas) < (0)) {
return;
}
}
owners_MultiOwnable[this] := _owners_s2988;
assert {:EventEmitted "SetOwners_MultiOwnable"} (true);
}

implementation getOwners_MultiOwnable__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: Ref)
{
__ret_0_ := __tmp__owners_MultiOwnable[this];
return;
}

implementation getOwners_MultiOwnable__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: Ref)
{
__ret_0_ := owners_MultiOwnable[this];
return;
}

implementation PollManagedFund_PollManagedFund_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref)
{
var __var_156: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__TAP_POLL_DURATION_PollManagedFund[this] := 3;
__tmp__REFUND_POLL_DURATION_PollManagedFund[this] := 7;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund[this] := 10;
__tmp__minVotedTokensPerc_PollManagedFund[this] := 0;
__tmp__secondRefundPollDate_PollManagedFund[this] := 0;
__tmp__isWithdrawEnabled_PollManagedFund[this] := true;
// Make array/mapping vars distinct for refundPollDates
call __var_156 := FreshRefGenerator__fail();
if (revert) {
return;
}
__tmp__refundPollDates_PollManagedFund[this] := __var_156;
assume ((__tmp__Length[__tmp__refundPollDates_PollManagedFund[this]]) == (0));
// end of initialization
}

implementation PollManagedFund_PollManagedFund_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref)
{
var __var_156: Ref;
// start of initialization
assume ((msgsender_MSG) != (null));
TAP_POLL_DURATION_PollManagedFund[this] := 3;
REFUND_POLL_DURATION_PollManagedFund[this] := 7;
MAX_VOTED_TOKEN_PERC_PollManagedFund[this] := 10;
minVotedTokensPerc_PollManagedFund[this] := 0;
secondRefundPollDate_PollManagedFund[this] := 0;
isWithdrawEnabled_PollManagedFund[this] := true;
// Make array/mapping vars distinct for refundPollDates
call __var_156 := FreshRefGenerator__success();
if (revert) {
return;
}
refundPollDates_PollManagedFund[this] := __var_156;
assume ((Length[refundPollDates_PollManagedFund[this]]) == (0));
// end of initialization
}

implementation PollManagedFund_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref)
{
var __var_156: Ref;
call ICrowdsaleFund_ICrowdsaleFund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call MultiOwnable_MultiOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call Fund_Fund__fail(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
if (revert) {
return;
}
call DateTime_DateTime__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ITokenEventListener_ITokenEventListener__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call PollManagedFund_PollManagedFund_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
if (revert) {
return;
}
}

implementation PollManagedFund_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _teamWallet_s110: Ref, _referralTokenWallet_s110: Ref, _foundationTokenWallet_s110: Ref, _companyTokenWallet_s110: Ref, _reserveTokenWallet_s110: Ref, _bountyTokenWallet_s110: Ref, _advisorTokenWallet_s110: Ref, _refundManager_s110: Ref, _owners_s110: Ref)
{
var __var_156: Ref;
call ICrowdsaleFund_ICrowdsaleFund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call MultiOwnable_MultiOwnable__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call Fund_Fund__success(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
if (revert) {
return;
}
call DateTime_DateTime__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call ITokenEventListener_ITokenEventListener__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
call PollManagedFund_PollManagedFund_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
if (revert) {
return;
}
}

implementation canWithdraw_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_157: Ref;
var __var_158: Ref;
var __var_159: bool;
var __var_160: int;
var __var_161: int;
var __var_162: int;
var __var_163: int;
var __var_164: int;
var __var_165: bool;
var __var_166: int;
__var_157 := __tmp__refundPoll_PollManagedFund[this];
__var_158 := null;
assume ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_159 := __tmp__finalized_BasePoll[__tmp__refundPoll_PollManagedFund[this]];
assume ((__var_161) >= (0));
assume ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_161 := __tmp__holdEndTime_RefundPoll[__tmp__refundPoll_PollManagedFund[this]];
assume ((__var_161) >= (0));
assume ((__tmp__now) >= (0));
assume ((__var_163) >= (0));
assume ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_163 := __tmp__holdEndTime_RefundPoll[__tmp__refundPoll_PollManagedFund[this]];
assume ((__var_163) >= (0));
if ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (TapPoll)) {
call __var_165 := isNowApproved_BasePoll__fail(__tmp__refundPoll_PollManagedFund[this], this, __var_166);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll)) {
call __var_165 := isNowApproved_BasePoll__fail(__tmp__refundPoll_PollManagedFund[this], this, __var_166);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (BasePoll)) {
call __var_165 := isNowApproved_BasePoll__fail(__tmp__refundPoll_PollManagedFund[this], this, __var_166);
if (revert) {
return;
}
} else {
assume (false);
}
if ((((((__tmp__refundPoll_PollManagedFund[this]) != (null)) && (!(__var_159))) && ((__var_161) > (0))) && ((__tmp__now) >= (__var_163))) && (__var_165)) {
__ret_0_ := false;
return;
}
__ret_0_ := __tmp__isWithdrawEnabled_PollManagedFund[this];
return;
}

implementation canWithdraw_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_157: Ref;
var __var_158: Ref;
var __var_159: bool;
var __var_160: int;
var __var_161: int;
var __var_162: int;
var __var_163: int;
var __var_164: int;
var __var_165: bool;
var __var_166: int;
__var_157 := refundPoll_PollManagedFund[this];
__var_158 := null;
assume ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_159 := finalized_BasePoll[refundPoll_PollManagedFund[this]];
assume ((__var_161) >= (0));
assume ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_161 := holdEndTime_RefundPoll[refundPoll_PollManagedFund[this]];
assume ((__var_161) >= (0));
assume ((now) >= (0));
assume ((__var_163) >= (0));
assume ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_163 := holdEndTime_RefundPoll[refundPoll_PollManagedFund[this]];
assume ((__var_163) >= (0));
if ((DType[refundPoll_PollManagedFund[this]]) == (TapPoll)) {
call __var_165 := isNowApproved_BasePoll__success(refundPoll_PollManagedFund[this], this, __var_166);
if (revert) {
return;
}
} else if ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll)) {
call __var_165 := isNowApproved_BasePoll__success(refundPoll_PollManagedFund[this], this, __var_166);
if (revert) {
return;
}
} else if ((DType[refundPoll_PollManagedFund[this]]) == (BasePoll)) {
call __var_165 := isNowApproved_BasePoll__success(refundPoll_PollManagedFund[this], this, __var_166);
if (revert) {
return;
}
} else {
assume (false);
}
if ((((((refundPoll_PollManagedFund[this]) != (null)) && (!(__var_159))) && ((__var_161) > (0))) && ((now) >= (__var_163))) && (__var_165)) {
__ret_0_ := false;
return;
}
__ret_0_ := isWithdrawEnabled_PollManagedFund[this];
return;
}

implementation onTokenTransfer_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s211: Ref, __param_0_: Ref, _value_s211: int)
{
var __var_167: Ref;
var __var_168: Ref;
var __var_169: Ref;
var __var_170: bool;
var __var_171: int;
var __var_172: int;
var __var_173: Ref;
var __var_174: Ref;
var __var_175: bool;
var __var_176: int;
var __var_177: int;
__var_167 := __tmp__token_Fund[this];
if (!((msgsender_MSG) == (__tmp__token_Fund[this]))) {
revert := true;
return;
}
__var_168 := __tmp__tapPoll_PollManagedFund[this];
__var_169 := null;
assume ((__tmp__DType[__tmp__tapPoll_PollManagedFund[this]]) == (TapPoll));
__var_170 := __tmp__finalized_BasePoll[__tmp__tapPoll_PollManagedFund[this]];
if (((__tmp__tapPoll_PollManagedFund[this]) != (null)) && (!(__var_170))) {
assume ((_value_s211) >= (0));
if ((__tmp__DType[__tmp__tapPoll_PollManagedFund[this]]) == (TapPoll)) {
call onTokenTransfer_BasePoll__fail(__tmp__tapPoll_PollManagedFund[this], this, __var_172, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__tapPoll_PollManagedFund[this]]) == (RefundPoll)) {
call onTokenTransfer_BasePoll__fail(__tmp__tapPoll_PollManagedFund[this], this, __var_172, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__tapPoll_PollManagedFund[this]]) == (BasePoll)) {
call onTokenTransfer_BasePoll__fail(__tmp__tapPoll_PollManagedFund[this], this, __var_172, _from_s211, _value_s211);
if (revert) {
return;
}
} else {
assume (false);
}
}
__var_173 := __tmp__refundPoll_PollManagedFund[this];
__var_174 := null;
assume ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_175 := __tmp__finalized_BasePoll[__tmp__refundPoll_PollManagedFund[this]];
if (((__tmp__refundPoll_PollManagedFund[this]) != (null)) && (!(__var_175))) {
assume ((_value_s211) >= (0));
if ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (TapPoll)) {
call onTokenTransfer_BasePoll__fail(__tmp__refundPoll_PollManagedFund[this], this, __var_177, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll)) {
call onTokenTransfer_BasePoll__fail(__tmp__refundPoll_PollManagedFund[this], this, __var_177, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (BasePoll)) {
call onTokenTransfer_BasePoll__fail(__tmp__refundPoll_PollManagedFund[this], this, __var_177, _from_s211, _value_s211);
if (revert) {
return;
}
} else {
assume (false);
}
}
}

implementation onTokenTransfer_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _from_s211: Ref, __param_0_: Ref, _value_s211: int)
{
var __var_167: Ref;
var __var_168: Ref;
var __var_169: Ref;
var __var_170: bool;
var __var_171: int;
var __var_172: int;
var __var_173: Ref;
var __var_174: Ref;
var __var_175: bool;
var __var_176: int;
var __var_177: int;
__var_167 := token_Fund[this];
if (!((msgsender_MSG) == (token_Fund[this]))) {
revert := true;
return;
}
__var_168 := tapPoll_PollManagedFund[this];
__var_169 := null;
assume ((DType[tapPoll_PollManagedFund[this]]) == (TapPoll));
__var_170 := finalized_BasePoll[tapPoll_PollManagedFund[this]];
if (((tapPoll_PollManagedFund[this]) != (null)) && (!(__var_170))) {
assume ((_value_s211) >= (0));
if ((DType[tapPoll_PollManagedFund[this]]) == (TapPoll)) {
call onTokenTransfer_BasePoll__success(tapPoll_PollManagedFund[this], this, __var_172, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((DType[tapPoll_PollManagedFund[this]]) == (RefundPoll)) {
call onTokenTransfer_BasePoll__success(tapPoll_PollManagedFund[this], this, __var_172, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((DType[tapPoll_PollManagedFund[this]]) == (BasePoll)) {
call onTokenTransfer_BasePoll__success(tapPoll_PollManagedFund[this], this, __var_172, _from_s211, _value_s211);
if (revert) {
return;
}
} else {
assume (false);
}
}
__var_173 := refundPoll_PollManagedFund[this];
__var_174 := null;
assume ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_175 := finalized_BasePoll[refundPoll_PollManagedFund[this]];
if (((refundPoll_PollManagedFund[this]) != (null)) && (!(__var_175))) {
assume ((_value_s211) >= (0));
if ((DType[refundPoll_PollManagedFund[this]]) == (TapPoll)) {
call onTokenTransfer_BasePoll__success(refundPoll_PollManagedFund[this], this, __var_177, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll)) {
call onTokenTransfer_BasePoll__success(refundPoll_PollManagedFund[this], this, __var_177, _from_s211, _value_s211);
if (revert) {
return;
}
} else if ((DType[refundPoll_PollManagedFund[this]]) == (BasePoll)) {
call onTokenTransfer_BasePoll__success(refundPoll_PollManagedFund[this], this, __var_177, _from_s211, _value_s211);
if (revert) {
return;
}
} else {
assume (false);
}
}
}

implementation updateMinVotedTokens_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _minVotedTokensPerc_s237: int)
{
var newPerc_s236: int;
assume ((newPerc_s236) >= (0));
assume ((_minVotedTokensPerc_s237) >= (0));
assume (((_minVotedTokensPerc_s237) / (2)) >= (0));
newPerc_s236 := (_minVotedTokensPerc_s237) / (2);
assume ((newPerc_s236) >= (0));
assume ((__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund[this]) >= (0));
if ((newPerc_s236) > (__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund[this])) {
assume ((__tmp__minVotedTokensPerc_PollManagedFund[this]) >= (0));
assume ((__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund[this]) >= (0));
__tmp__minVotedTokensPerc_PollManagedFund[this] := __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund[this];
return;
}
assume ((__tmp__minVotedTokensPerc_PollManagedFund[this]) >= (0));
assume ((newPerc_s236) >= (0));
__tmp__minVotedTokensPerc_PollManagedFund[this] := newPerc_s236;
}

implementation updateMinVotedTokens_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _minVotedTokensPerc_s237: int)
{
var newPerc_s236: int;
assume ((newPerc_s236) >= (0));
assume ((_minVotedTokensPerc_s237) >= (0));
assume (((_minVotedTokensPerc_s237) / (2)) >= (0));
newPerc_s236 := (_minVotedTokensPerc_s237) / (2);
assume ((newPerc_s236) >= (0));
assume ((MAX_VOTED_TOKEN_PERC_PollManagedFund[this]) >= (0));
if ((newPerc_s236) > (MAX_VOTED_TOKEN_PERC_PollManagedFund[this])) {
assume ((minVotedTokensPerc_PollManagedFund[this]) >= (0));
assume ((MAX_VOTED_TOKEN_PERC_PollManagedFund[this]) >= (0));
minVotedTokensPerc_PollManagedFund[this] := MAX_VOTED_TOKEN_PERC_PollManagedFund[this];
return;
}
assume ((minVotedTokensPerc_PollManagedFund[this]) >= (0));
assume ((newPerc_s236) >= (0));
minVotedTokensPerc_PollManagedFund[this] := newPerc_s236;
}

implementation createTapPoll_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tapIncPerc_s317: int)
{
var __var_178: Ref;
var __var_179: Ref;
var __var_180: int;
var _tap_s316: int;
var startTime_s316: int;
var endTime_s316: int;
var __var_181: Ref;
var __var_182: Ref;
var __var_183: int;
var __var_184: Ref;
var __var_185: Ref;
call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((__tmp__state_Fund[this]) == (2))) {
revert := true;
return;
}
__var_178 := __tmp__tapPoll_PollManagedFund[this];
__var_179 := null;
if (!((__tmp__tapPoll_PollManagedFund[this]) == (null))) {
revert := true;
return;
}
assume ((__var_180) >= (0));
assume ((__tmp__now) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_180 := getDay_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__now);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_180) >= (0));
if (!((__var_180) == (10))) {
revert := true;
return;
}
assume ((tapIncPerc_s317) >= (0));
if (!((tapIncPerc_s317) <= (50))) {
revert := true;
return;
}
assume ((_tap_s316) >= (0));
assume ((tapIncPerc_s317) >= (0));
assume ((((192901234567901) * (tapIncPerc_s317))) >= (0));
assume ((((((192901234567901) * (tapIncPerc_s317))) / (100))) >= (0));
assume (((192901234567901) + (((((192901234567901) * (tapIncPerc_s317))) / (100)))) >= (0));
_tap_s316 := (192901234567901) + (((((192901234567901) * (tapIncPerc_s317))) / (100)));
assume ((startTime_s316) >= (0));
assume ((__tmp__now) >= (0));
startTime_s316 := __tmp__now;
assume ((endTime_s316) >= (0));
assume ((startTime_s316) >= (0));
assume ((__tmp__TAP_POLL_DURATION_PollManagedFund[this]) >= (0));
assume (((startTime_s316) + (__tmp__TAP_POLL_DURATION_PollManagedFund[this])) >= (0));
endTime_s316 := (startTime_s316) + (__tmp__TAP_POLL_DURATION_PollManagedFund[this]);
call __var_182 := FreshRefGenerator__fail();
if (revert) {
return;
}
assume ((_tap_s316) >= (0));
__var_184 := __tmp__token_Fund[this];
__var_185 := this;
assume ((startTime_s316) >= (0));
assume ((endTime_s316) >= (0));
assume ((__tmp__minVotedTokensPerc_PollManagedFund[this]) >= (0));
assume ((__tmp__DType[__var_182]) == (TapPoll));
call TapPoll_TapPoll__fail(__var_182, this, 0, _tap_s316, __tmp__token_Fund[this], this, startTime_s316, endTime_s316, __tmp__minVotedTokensPerc_PollManagedFund[this]);
if (revert) {
return;
}
__var_181 := __var_182;
__tmp__tapPoll_PollManagedFund[this] := __var_181;
}

implementation createTapPoll_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, tapIncPerc_s317: int)
{
var __var_178: Ref;
var __var_179: Ref;
var __var_180: int;
var _tap_s316: int;
var startTime_s316: int;
var endTime_s316: int;
var __var_181: Ref;
var __var_182: Ref;
var __var_183: int;
var __var_184: Ref;
var __var_185: Ref;
call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((state_Fund[this]) == (2))) {
revert := true;
return;
}
__var_178 := tapPoll_PollManagedFund[this];
__var_179 := null;
if (!((tapPoll_PollManagedFund[this]) == (null))) {
revert := true;
return;
}
assume ((__var_180) >= (0));
assume ((now) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_180 := getDay_DateTime__success(this, msgsender_MSG, msgvalue_MSG, now);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_180) >= (0));
if (!((__var_180) == (10))) {
revert := true;
return;
}
assume ((tapIncPerc_s317) >= (0));
if (!((tapIncPerc_s317) <= (50))) {
revert := true;
return;
}
assume ((_tap_s316) >= (0));
assume ((tapIncPerc_s317) >= (0));
assume ((((192901234567901) * (tapIncPerc_s317))) >= (0));
assume ((((((192901234567901) * (tapIncPerc_s317))) / (100))) >= (0));
assume (((192901234567901) + (((((192901234567901) * (tapIncPerc_s317))) / (100)))) >= (0));
_tap_s316 := (192901234567901) + (((((192901234567901) * (tapIncPerc_s317))) / (100)));
assume ((startTime_s316) >= (0));
assume ((now) >= (0));
startTime_s316 := now;
assume ((endTime_s316) >= (0));
assume ((startTime_s316) >= (0));
assume ((TAP_POLL_DURATION_PollManagedFund[this]) >= (0));
assume (((startTime_s316) + (TAP_POLL_DURATION_PollManagedFund[this])) >= (0));
endTime_s316 := (startTime_s316) + (TAP_POLL_DURATION_PollManagedFund[this]);
call __var_182 := FreshRefGenerator__success();
if (revert) {
return;
}
assume ((_tap_s316) >= (0));
__var_184 := token_Fund[this];
__var_185 := this;
assume ((startTime_s316) >= (0));
assume ((endTime_s316) >= (0));
assume ((minVotedTokensPerc_PollManagedFund[this]) >= (0));
assume ((DType[__var_182]) == (TapPoll));
call TapPoll_TapPoll__success(__var_182, this, 0, _tap_s316, token_Fund[this], this, startTime_s316, endTime_s316, minVotedTokensPerc_PollManagedFund[this]);
if (revert) {
return;
}
__var_181 := __var_182;
tapPoll_PollManagedFund[this] := __var_181;
assert {:EventEmitted "TapPollCreated_PollManagedFund"} (true);
}

implementation onTapPollFinish_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s352: bool, _tap_s352: int)
{
var __var_186: Ref;
var __var_187: bool;
var __var_188: int;
var __var_189: int;
var __var_190: int;
__var_186 := __tmp__tapPoll_PollManagedFund[this];
assume ((__tmp__DType[__tmp__tapPoll_PollManagedFund[this]]) == (TapPoll));
__var_187 := __tmp__finalized_BasePoll[__tmp__tapPoll_PollManagedFund[this]];
if (!(((msgsender_MSG) == (__tmp__tapPoll_PollManagedFund[this])) && (__var_187))) {
revert := true;
return;
}
assume ((__var_189) >= (0));
call __var_189 := getVotedTokensPerc_TapPoll__fail(__tmp__tapPoll_PollManagedFund[this], this, __var_190);
if (revert) {
return;
}
assume ((__var_189) >= (0));
call updateMinVotedTokens_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG, __var_189);
if (revert) {
return;
}
}

implementation onTapPollFinish_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s352: bool, _tap_s352: int)
{
var __var_186: Ref;
var __var_187: bool;
var __var_188: int;
var __var_189: int;
var __var_190: int;
__var_186 := tapPoll_PollManagedFund[this];
assume ((DType[tapPoll_PollManagedFund[this]]) == (TapPoll));
__var_187 := finalized_BasePoll[tapPoll_PollManagedFund[this]];
if (!(((msgsender_MSG) == (tapPoll_PollManagedFund[this])) && (__var_187))) {
revert := true;
return;
}
assume ((__var_189) >= (0));
call __var_189 := getVotedTokensPerc_TapPoll__success(tapPoll_PollManagedFund[this], this, __var_190);
if (revert) {
return;
}
assume ((__var_189) >= (0));
call updateMinVotedTokens_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG, __var_189);
if (revert) {
return;
}
assert {:EventEmitted "TapPollFinished_PollManagedFund"} (true);
}

implementation checkRefundPollDate_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_191: int;
var __var_192: int;
var i_s408: int;
var __var_193: int;
var __var_194: int;
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__tmp__now) >= (0));
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__tmp__now) >= (0));
assume ((__var_191) >= (0));
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__var_192) >= (0));
__var_192 := 1;
assume ((1) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_191 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__secondRefundPollDate_PollManagedFund[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_191) >= (0));
if ((((__tmp__secondRefundPollDate_PollManagedFund[this]) > (0)) && ((__tmp__now) >= (__tmp__secondRefundPollDate_PollManagedFund[this]))) && ((__tmp__now) <= (__var_191))) {
__ret_0_ := true;
return;
}
assume ((i_s408) >= (0));
assume ((__tmp__Length[__tmp__refundPollDates_PollManagedFund[this]]) >= (0));
havoc i_s408;
while ((i_s408) < (__tmp__Length[__tmp__refundPollDates_PollManagedFund[this]]))
{
assume ((__tmp__now) >= (0));
assume ((i_s408) >= (0));
assume ((__tmp__M_int_int[__tmp__refundPollDates_PollManagedFund[this]][i_s408]) >= (0));
assume ((__tmp__now) >= (0));
assume ((__var_193) >= (0));
assume ((i_s408) >= (0));
assume ((__tmp__M_int_int[__tmp__refundPollDates_PollManagedFund[this]][i_s408]) >= (0));
assume ((__var_194) >= (0));
__var_194 := 1;
assume ((1) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_193 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__M_int_int[__tmp__refundPollDates_PollManagedFund[this]][i_s408], 1);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_193) >= (0));
if (((__tmp__now) >= (__tmp__M_int_int[__tmp__refundPollDates_PollManagedFund[this]][i_s408])) && ((__tmp__now) <= (__var_193))) {
__ret_0_ := true;
return;
}
assume ((i_s408) >= (0));
i_s408 := (i_s408) + (1);
assume ((i_s408) >= (0));
if ((gas) < (0)) {
return;
}
}
__ret_0_ := false;
return;
}

implementation checkRefundPollDate_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_191: int;
var __var_192: int;
var i_s408: int;
var __var_193: int;
var __var_194: int;
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((now) >= (0));
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((now) >= (0));
assume ((__var_191) >= (0));
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__var_192) >= (0));
__var_192 := 1;
assume ((1) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_191 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, secondRefundPollDate_PollManagedFund[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_191) >= (0));
if ((((secondRefundPollDate_PollManagedFund[this]) > (0)) && ((now) >= (secondRefundPollDate_PollManagedFund[this]))) && ((now) <= (__var_191))) {
__ret_0_ := true;
return;
}
assume ((i_s408) >= (0));
assume ((Length[refundPollDates_PollManagedFund[this]]) >= (0));
havoc i_s408;
while ((i_s408) < (Length[refundPollDates_PollManagedFund[this]]))
{
assume ((now) >= (0));
assume ((i_s408) >= (0));
assume ((M_int_int[refundPollDates_PollManagedFund[this]][i_s408]) >= (0));
assume ((now) >= (0));
assume ((__var_193) >= (0));
assume ((i_s408) >= (0));
assume ((M_int_int[refundPollDates_PollManagedFund[this]][i_s408]) >= (0));
assume ((__var_194) >= (0));
__var_194 := 1;
assume ((1) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_193 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, M_int_int[refundPollDates_PollManagedFund[this]][i_s408], 1);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_193) >= (0));
if (((now) >= (M_int_int[refundPollDates_PollManagedFund[this]][i_s408])) && ((now) <= (__var_193))) {
__ret_0_ := true;
return;
}
assume ((i_s408) >= (0));
i_s408 := (i_s408) + (1);
assume ((i_s408) >= (0));
if ((gas) < (0)) {
return;
}
}
__ret_0_ := false;
return;
}

implementation createRefundPoll_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_195: Ref;
var __var_196: Ref;
var __var_197: bool;
var __var_198: int;
var __var_199: int;
var startTime_s515: int;
var endTime_s515: int;
var isFirstRefund_s515: bool;
var holdEndTime_s515: int;
var __var_200: int;
var __var_201: int;
var __var_202: int;
var __var_203: Ref;
var __var_204: Ref;
var __var_205: int;
var __var_206: Ref;
var __var_207: Ref;
call onlyTokenHolder_pre__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((__tmp__state_Fund[this]) == (2))) {
revert := true;
return;
}
__var_195 := __tmp__refundPoll_PollManagedFund[this];
__var_196 := null;
if (!((__tmp__refundPoll_PollManagedFund[this]) == (null))) {
revert := true;
return;
}
call __var_197 := checkRefundPollDate_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!(__var_197)) {
revert := true;
return;
}
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__tmp__now) >= (0));
assume ((__var_198) >= (0));
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__var_199) >= (0));
__var_199 := 1;
assume ((1) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_198 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__secondRefundPollDate_PollManagedFund[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_198) >= (0));
if (((__tmp__secondRefundPollDate_PollManagedFund[this]) > (0)) && ((__tmp__now) > (__var_198))) {
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
__tmp__secondRefundPollDate_PollManagedFund[this] := 0;
}
assume ((startTime_s515) >= (0));
assume ((__tmp__now) >= (0));
startTime_s515 := __tmp__now;
assume ((endTime_s515) >= (0));
assume ((startTime_s515) >= (0));
assume ((__tmp__REFUND_POLL_DURATION_PollManagedFund[this]) >= (0));
assume (((startTime_s515) + (__tmp__REFUND_POLL_DURATION_PollManagedFund[this])) >= (0));
endTime_s515 := (startTime_s515) + (__tmp__REFUND_POLL_DURATION_PollManagedFund[this]);
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
isFirstRefund_s515 := (__tmp__secondRefundPollDate_PollManagedFund[this]) == (0);
assume ((holdEndTime_s515) >= (0));
holdEndTime_s515 := 0;
if (isFirstRefund_s515) {
assume ((holdEndTime_s515) >= (0));
assume ((__var_200) >= (0));
assume ((startTime_s515) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_200 := getYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, startTime_s515);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_200) >= (0));
assume ((__var_201) >= (0));
assume ((startTime_s515) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_201 := getMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, startTime_s515);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_201) >= (0));
assume (((__var_201) + (1)) >= (0));
assume ((__var_202) >= (0));
__var_202 := 1;
assume ((1) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call holdEndTime_s515 := toTimestamp3_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __var_200, (__var_201) + (1), 1);
if (revert) {
return;
}
} else {
assume (false);
}
holdEndTime_s515 := holdEndTime_s515;
}
call __var_204 := FreshRefGenerator__fail();
if (revert) {
return;
}
__var_206 := __tmp__token_Fund[this];
__var_207 := this;
assume ((startTime_s515) >= (0));
assume ((endTime_s515) >= (0));
assume ((holdEndTime_s515) >= (0));
assume ((__tmp__DType[__var_204]) == (RefundPoll));
call RefundPoll_RefundPoll__fail(__var_204, this, 0, __tmp__token_Fund[this], this, startTime_s515, endTime_s515, holdEndTime_s515, isFirstRefund_s515);
if (revert) {
return;
}
__var_203 := __var_204;
__tmp__refundPoll_PollManagedFund[this] := __var_203;
}

implementation createRefundPoll_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_195: Ref;
var __var_196: Ref;
var __var_197: bool;
var __var_198: int;
var __var_199: int;
var startTime_s515: int;
var endTime_s515: int;
var isFirstRefund_s515: bool;
var holdEndTime_s515: int;
var __var_200: int;
var __var_201: int;
var __var_202: int;
var __var_203: Ref;
var __var_204: Ref;
var __var_205: int;
var __var_206: Ref;
var __var_207: Ref;
call onlyTokenHolder_pre__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!((state_Fund[this]) == (2))) {
revert := true;
return;
}
__var_195 := refundPoll_PollManagedFund[this];
__var_196 := null;
if (!((refundPoll_PollManagedFund[this]) == (null))) {
revert := true;
return;
}
call __var_197 := checkRefundPollDate_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
if (!(__var_197)) {
revert := true;
return;
}
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((now) >= (0));
assume ((__var_198) >= (0));
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__var_199) >= (0));
__var_199 := 1;
assume ((1) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_198 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, secondRefundPollDate_PollManagedFund[this], 1);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_198) >= (0));
if (((secondRefundPollDate_PollManagedFund[this]) > (0)) && ((now) > (__var_198))) {
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
secondRefundPollDate_PollManagedFund[this] := 0;
}
assume ((startTime_s515) >= (0));
assume ((now) >= (0));
startTime_s515 := now;
assume ((endTime_s515) >= (0));
assume ((startTime_s515) >= (0));
assume ((REFUND_POLL_DURATION_PollManagedFund[this]) >= (0));
assume (((startTime_s515) + (REFUND_POLL_DURATION_PollManagedFund[this])) >= (0));
endTime_s515 := (startTime_s515) + (REFUND_POLL_DURATION_PollManagedFund[this]);
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
isFirstRefund_s515 := (secondRefundPollDate_PollManagedFund[this]) == (0);
assume ((holdEndTime_s515) >= (0));
holdEndTime_s515 := 0;
if (isFirstRefund_s515) {
assume ((holdEndTime_s515) >= (0));
assume ((__var_200) >= (0));
assume ((startTime_s515) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_200 := getYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, startTime_s515);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_200) >= (0));
assume ((__var_201) >= (0));
assume ((startTime_s515) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_201 := getMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, startTime_s515);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_201) >= (0));
assume (((__var_201) + (1)) >= (0));
assume ((__var_202) >= (0));
__var_202 := 1;
assume ((1) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call holdEndTime_s515 := toTimestamp3_DateTime__success(this, msgsender_MSG, msgvalue_MSG, __var_200, (__var_201) + (1), 1);
if (revert) {
return;
}
} else {
assume (false);
}
holdEndTime_s515 := holdEndTime_s515;
}
call __var_204 := FreshRefGenerator__success();
if (revert) {
return;
}
__var_206 := token_Fund[this];
__var_207 := this;
assume ((startTime_s515) >= (0));
assume ((endTime_s515) >= (0));
assume ((holdEndTime_s515) >= (0));
assume ((DType[__var_204]) == (RefundPoll));
call RefundPoll_RefundPoll__success(__var_204, this, 0, token_Fund[this], this, startTime_s515, endTime_s515, holdEndTime_s515, isFirstRefund_s515);
if (revert) {
return;
}
__var_203 := __var_204;
refundPoll_PollManagedFund[this] := __var_203;
assert {:EventEmitted "RefundPollCreated_PollManagedFund"} (true);
}

implementation onRefundPollFinish_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s589: bool)
{
var __var_208: Ref;
var __var_209: bool;
var __var_210: int;
var startTime_s568: int;
var __var_211: int;
var __var_212: int;
var __var_213: int;
var __var_214: int;
var __var_215: int;
__var_208 := __tmp__refundPoll_PollManagedFund[this];
assume ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_209 := __tmp__finalized_BasePoll[__tmp__refundPoll_PollManagedFund[this]];
if (!(((msgsender_MSG) == (__tmp__refundPoll_PollManagedFund[this])) && (__var_209))) {
revert := true;
return;
}
if (agree_s589) {
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
if ((__tmp__secondRefundPollDate_PollManagedFund[this]) > (0)) {
if ((__tmp__DType[this]) == (PollManagedFund)) {
call enableRefund_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
} else {
assume ((startTime_s568) >= (0));
assume ((__tmp__DType[__tmp__refundPoll_PollManagedFund[this]]) == (RefundPoll));
startTime_s568 := __tmp__startTime_BasePoll[__tmp__refundPoll_PollManagedFund[this]];
startTime_s568 := startTime_s568;
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__var_213) >= (0));
assume ((startTime_s568) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_213 := getYear_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, startTime_s568);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_213) >= (0));
assume ((__var_214) >= (0));
assume ((startTime_s568) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_214 := getMonth_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, startTime_s568);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_214) >= (0));
assume (((__var_214) + (2)) >= (0));
assume ((__var_215) >= (0));
__var_215 := 1;
assume ((1) >= (0));
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_212 := toTimestamp3_DateTime__fail(this, msgsender_MSG, msgvalue_MSG, __var_213, (__var_214) + (2), 1);
if (revert) {
return;
}
} else {
assume (false);
}
__tmp__secondRefundPollDate_PollManagedFund[this] := __var_212;
assume ((__var_212) >= (0));
__tmp__isWithdrawEnabled_PollManagedFund[this] := false;
}
} else {
assume ((__tmp__secondRefundPollDate_PollManagedFund[this]) >= (0));
__tmp__secondRefundPollDate_PollManagedFund[this] := 0;
__tmp__isWithdrawEnabled_PollManagedFund[this] := true;
}
}

implementation onRefundPollFinish_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s589: bool)
{
var __var_208: Ref;
var __var_209: bool;
var __var_210: int;
var startTime_s568: int;
var __var_211: int;
var __var_212: int;
var __var_213: int;
var __var_214: int;
var __var_215: int;
__var_208 := refundPoll_PollManagedFund[this];
assume ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll));
__var_209 := finalized_BasePoll[refundPoll_PollManagedFund[this]];
if (!(((msgsender_MSG) == (refundPoll_PollManagedFund[this])) && (__var_209))) {
revert := true;
return;
}
if (agree_s589) {
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
if ((secondRefundPollDate_PollManagedFund[this]) > (0)) {
if ((DType[this]) == (PollManagedFund)) {
call enableRefund_Fund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
} else {
assume ((startTime_s568) >= (0));
assume ((DType[refundPoll_PollManagedFund[this]]) == (RefundPoll));
startTime_s568 := startTime_BasePoll[refundPoll_PollManagedFund[this]];
startTime_s568 := startTime_s568;
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
assume ((__var_213) >= (0));
assume ((startTime_s568) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_213 := getYear_DateTime__success(this, msgsender_MSG, msgvalue_MSG, startTime_s568);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_213) >= (0));
assume ((__var_214) >= (0));
assume ((startTime_s568) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_214 := getMonth_DateTime__success(this, msgsender_MSG, msgvalue_MSG, startTime_s568);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_214) >= (0));
assume (((__var_214) + (2)) >= (0));
assume ((__var_215) >= (0));
__var_215 := 1;
assume ((1) >= (0));
if ((DType[this]) == (PollManagedFund)) {
call __var_212 := toTimestamp3_DateTime__success(this, msgsender_MSG, msgvalue_MSG, __var_213, (__var_214) + (2), 1);
if (revert) {
return;
}
} else {
assume (false);
}
secondRefundPollDate_PollManagedFund[this] := __var_212;
assume ((__var_212) >= (0));
isWithdrawEnabled_PollManagedFund[this] := false;
}
} else {
assume ((secondRefundPollDate_PollManagedFund[this]) >= (0));
secondRefundPollDate_PollManagedFund[this] := 0;
isWithdrawEnabled_PollManagedFund[this] := true;
}
assert {:EventEmitted "RefundPollFinished_PollManagedFund"} (true);
}

implementation forceRefund_PollManagedFund__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!((msgsender_MSG) == (__tmp__refundManager_Fund[this]))) {
revert := true;
return;
}
if ((__tmp__DType[this]) == (PollManagedFund)) {
call enableRefund_Fund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
}

implementation forceRefund_PollManagedFund__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!((msgsender_MSG) == (refundManager_Fund[this]))) {
revert := true;
return;
}
if ((DType[this]) == (PollManagedFund)) {
call enableRefund_Fund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
}

implementation RefundPoll_RefundPoll_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool)
{
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__holdEndTime_RefundPoll[this] := 0;
// end of initialization
assume ((__tmp__holdEndTime_RefundPoll[this]) >= (0));
assume ((_holdEndTime_s2198) >= (0));
__tmp__holdEndTime_RefundPoll[this] := _holdEndTime_s2198;
}

implementation RefundPoll_RefundPoll_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool)
{
// start of initialization
assume ((msgsender_MSG) != (null));
holdEndTime_RefundPoll[this] := 0;
// end of initialization
assume ((holdEndTime_RefundPoll[this]) >= (0));
assume ((_holdEndTime_s2198) >= (0));
holdEndTime_RefundPoll[this] := _holdEndTime_s2198;
}

implementation RefundPoll_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool)
{
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_startTime_s2198) >= (0));
assume ((_endTime_s2198) >= (0));
call BasePoll_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _checkTransfersAfterEnd_s2198);
if (revert) {
return;
}
call RefundPoll_RefundPoll_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _holdEndTime_s2198, _checkTransfersAfterEnd_s2198);
if (revert) {
return;
}
}

implementation RefundPoll_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tokenAddress_s2198: Ref, _fundAddress_s2198: Ref, _startTime_s2198: int, _endTime_s2198: int, _holdEndTime_s2198: int, _checkTransfersAfterEnd_s2198: bool)
{
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_startTime_s2198) >= (0));
assume ((_endTime_s2198) >= (0));
call BasePoll_BasePoll__success(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _checkTransfersAfterEnd_s2198);
if (revert) {
return;
}
call RefundPoll_RefundPoll_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _holdEndTime_s2198, _checkTransfersAfterEnd_s2198);
if (revert) {
return;
}
}

implementation tryToFinalize_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_216: bool;
assume ((__tmp__holdEndTime_RefundPoll[this]) >= (0));
assume ((__tmp__holdEndTime_RefundPoll[this]) >= (0));
assume ((__tmp__endTime_BasePoll[this]) >= (0));
if (((__tmp__holdEndTime_RefundPoll[this]) > (0)) && ((__tmp__holdEndTime_RefundPoll[this]) > (__tmp__endTime_BasePoll[this]))) {
assume ((__tmp__now) >= (0));
assume ((__tmp__holdEndTime_RefundPoll[this]) >= (0));
if (!((__tmp__now) >= (__tmp__holdEndTime_RefundPoll[this]))) {
revert := true;
return;
}
} else {
assume ((__tmp__now) >= (0));
assume ((__tmp__endTime_BasePoll[this]) >= (0));
if (!((__tmp__now) >= (__tmp__endTime_BasePoll[this]))) {
revert := true;
return;
}
}
__tmp__finalized_BasePoll[this] := true;
if ((__tmp__DType[this]) == (RefundPoll)) {
call __var_216 := isSubjectApproved_RefundPoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
if ((__tmp__DType[this]) == (RefundPoll)) {
call onPollFinish_RefundPoll__fail(this, msgsender_MSG, msgvalue_MSG, __var_216);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := true;
return;
}

implementation tryToFinalize_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_216: bool;
assume ((holdEndTime_RefundPoll[this]) >= (0));
assume ((holdEndTime_RefundPoll[this]) >= (0));
assume ((endTime_BasePoll[this]) >= (0));
if (((holdEndTime_RefundPoll[this]) > (0)) && ((holdEndTime_RefundPoll[this]) > (endTime_BasePoll[this]))) {
assume ((now) >= (0));
assume ((holdEndTime_RefundPoll[this]) >= (0));
if (!((now) >= (holdEndTime_RefundPoll[this]))) {
revert := true;
return;
}
} else {
assume ((now) >= (0));
assume ((endTime_BasePoll[this]) >= (0));
if (!((now) >= (endTime_BasePoll[this]))) {
revert := true;
return;
}
}
finalized_BasePoll[this] := true;
if ((DType[this]) == (RefundPoll)) {
call __var_216 := isSubjectApproved_RefundPoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else {
assume (false);
}
if ((DType[this]) == (RefundPoll)) {
call onPollFinish_RefundPoll__success(this, msgsender_MSG, msgvalue_MSG, __var_216);
if (revert) {
return;
}
} else {
assume (false);
}
__ret_0_ := true;
return;
}

implementation isSubjectApproved_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_217: int;
var __var_218: int;
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__var_217) >= (0));
assume ((__tmp__DType[__tmp__token_BasePoll[this]]) == (IERC20Token));
__var_217 := __tmp__totalSupply_IERC20Token[__tmp__token_BasePoll[this]];
assume ((__var_217) >= (0));
assume (((__var_217) / (3)) >= (0));
__ret_0_ := ((__tmp__yesCounter_BasePoll[this]) > (__tmp__noCounter_BasePoll[this])) && ((__tmp__yesCounter_BasePoll[this]) >= ((__var_217) / (3)));
return;
}

implementation isSubjectApproved_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_217: int;
var __var_218: int;
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((noCounter_BasePoll[this]) >= (0));
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((__var_217) >= (0));
assume ((DType[token_BasePoll[this]]) == (IERC20Token));
__var_217 := totalSupply_IERC20Token[token_BasePoll[this]];
assume ((__var_217) >= (0));
assume (((__var_217) / (3)) >= (0));
__ret_0_ := ((yesCounter_BasePoll[this]) > (noCounter_BasePoll[this])) && ((yesCounter_BasePoll[this]) >= ((__var_217) / (3)));
return;
}

implementation onPollFinish_RefundPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2273: bool)
{
var fund_s2272: Ref;
var __var_219: int;
assume ((__tmp__DType[__tmp__fundAddress_BasePoll[this]]) == (IPollManagedFund));
fund_s2272 := __tmp__fundAddress_BasePoll[this];
if ((__tmp__DType[fund_s2272]) == (PollManagedFund)) {
call onRefundPollFinish_PollManagedFund__fail(fund_s2272, this, __var_219, agree_s2273);
if (revert) {
return;
}
} else if ((__tmp__DType[fund_s2272]) == (IPollManagedFund)) {
call onRefundPollFinish_IPollManagedFund(fund_s2272, this, __var_219, agree_s2273);
} else {
assume (false);
}
}

implementation onPollFinish_RefundPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2273: bool)
{
var fund_s2272: Ref;
var __var_219: int;
assume ((DType[fundAddress_BasePoll[this]]) == (IPollManagedFund));
fund_s2272 := fundAddress_BasePoll[this];
if ((DType[fund_s2272]) == (PollManagedFund)) {
call onRefundPollFinish_PollManagedFund__success(fund_s2272, this, __var_219, agree_s2273);
if (revert) {
return;
}
} else if ((DType[fund_s2272]) == (IPollManagedFund)) {
call onRefundPollFinish_IPollManagedFund(fund_s2272, this, __var_219, agree_s2273);
} else {
assume (false);
}
}

implementation SafeMath_SafeMath_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation SafeMath_SafeMath_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
// end of initialization
}

implementation SafeMath_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

implementation SafeMath_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
}

// implementation safeMul_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3034: int, b_s3034: int) returns (__ret_0_: int)
// {
// var c_s3033: int;
// assume ((c_s3033) >= (0));
// assume ((a_s3034) >= (0));
// assume ((b_s3034) >= (0));
// assume (((a_s3034) * (b_s3034)) >= (0));
// c_s3033 := (a_s3034) * (b_s3034);
// assume ((a_s3034) >= (0));
// assume ((c_s3033) >= (0));
// assume ((a_s3034) >= (0));
// assume (((c_s3033) / (a_s3034)) >= (0));
// assume ((b_s3034) >= (0));
// assume ((c_s3033) >= (0));
// __ret_0_ := c_s3033;
// return;
// }

// implementation safeMul_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3034: int, b_s3034: int) returns (__ret_0_: int)
// {
// var c_s3033: int;
// assume ((c_s3033) >= (0));
// assume ((a_s3034) >= (0));
// assume ((b_s3034) >= (0));
// assume (((a_s3034) * (b_s3034)) >= (0));
// c_s3033 := (a_s3034) * (b_s3034);
// assume ((a_s3034) >= (0));
// assume ((c_s3033) >= (0));
// assume ((a_s3034) >= (0));
// assume (((c_s3033) / (a_s3034)) >= (0));
// assume ((b_s3034) >= (0));
// assert (((a_s3034) == (0)) || (((c_s3033) / (a_s3034)) == (b_s3034)));
// assume ((c_s3033) >= (0));
// __ret_0_ := c_s3033;
// return;
// }

// implementation safeDiv_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3052: int, b_s3052: int) returns (__ret_0_: int)
// {
// var c_s3051: int;
// assume ((c_s3051) >= (0));
// assume ((a_s3052) >= (0));
// assume ((b_s3052) >= (0));
// assume (((a_s3052) / (b_s3052)) >= (0));
// c_s3051 := (a_s3052) / (b_s3052);
// assume ((c_s3051) >= (0));
// __ret_0_ := c_s3051;
// return;
// }

// implementation safeDiv_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3052: int, b_s3052: int) returns (__ret_0_: int)
// {
// var c_s3051: int;
// assume ((c_s3051) >= (0));
// assume ((a_s3052) >= (0));
// assume ((b_s3052) >= (0));
// assume (((a_s3052) / (b_s3052)) >= (0));
// c_s3051 := (a_s3052) / (b_s3052);
// assume ((c_s3051) >= (0));
// __ret_0_ := c_s3051;
// return;
// }

implementation safeSub_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3072: int, b_s3072: int) returns (__ret_0_: int)
{
assume ((a_s3072) >= (0));
assume ((b_s3072) >= (0));
assume ((a_s3072) >= (0));
assume ((b_s3072) >= (0));
assume (((a_s3072) - (b_s3072)) >= (0));
__ret_0_ := (a_s3072) - (b_s3072);
return;
}

implementation safeSub_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3072: int, b_s3072: int) returns (__ret_0_: int)
{
assume ((a_s3072) >= (0));
assume ((b_s3072) >= (0));
assert ((a_s3072) >= (b_s3072));
assume ((a_s3072) >= (0));
assume ((b_s3072) >= (0));
assume (((a_s3072) - (b_s3072)) >= (0));
__ret_0_ := (a_s3072) - (b_s3072);
return;
}

implementation safeAdd_SafeMath__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3096: int, b_s3096: int) returns (__ret_0_: int)
{
var c_s3095: int;
assume ((c_s3095) >= (0));
assume ((a_s3096) >= (0));
assume ((b_s3096) >= (0));
assume (((a_s3096) + (b_s3096)) >= (0));
c_s3095 := (a_s3096) + (b_s3096);
assume ((c_s3095) >= (0));
assume ((a_s3096) >= (0));
assume ((c_s3095) >= (0));
__ret_0_ := c_s3095;
return;
}

implementation safeAdd_SafeMath__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, a_s3096: int, b_s3096: int) returns (__ret_0_: int)
{
var c_s3095: int;
assume ((c_s3095) >= (0));
assume ((a_s3096) >= (0));
assume ((b_s3096) >= (0));
assume (((a_s3096) + (b_s3096)) >= (0));
c_s3095 := (a_s3096) + (b_s3096);
assume ((c_s3095) >= (0));
assume ((a_s3096) >= (0));
assert ((c_s3095) >= (a_s3096));
assume ((c_s3095) >= (0));
__ret_0_ := c_s3095;
return;
}

implementation TapPoll_TapPoll_NoBaseCtor__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
__tmp__tap_TapPoll[this] := 0;
__tmp__minTokensPerc_TapPoll[this] := 0;
// end of initialization
assume ((__tmp__tap_TapPoll[this]) >= (0));
assume ((_tap_s2316) >= (0));
__tmp__tap_TapPoll[this] := _tap_s2316;
assume ((__tmp__minTokensPerc_TapPoll[this]) >= (0));
assume ((_minTokensPerc_s2316) >= (0));
__tmp__minTokensPerc_TapPoll[this] := _minTokensPerc_s2316;
}

implementation TapPoll_TapPoll_NoBaseCtor__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int)
{
// start of initialization
assume ((msgsender_MSG) != (null));
tap_TapPoll[this] := 0;
minTokensPerc_TapPoll[this] := 0;
// end of initialization
assume ((tap_TapPoll[this]) >= (0));
assume ((_tap_s2316) >= (0));
tap_TapPoll[this] := _tap_s2316;
assume ((minTokensPerc_TapPoll[this]) >= (0));
assume ((_minTokensPerc_s2316) >= (0));
minTokensPerc_TapPoll[this] := _minTokensPerc_s2316;
}

implementation TapPoll_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int)
{
call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_startTime_s2316) >= (0));
assume ((_endTime_s2316) >= (0));
call BasePoll_BasePoll__fail(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, false);
if (revert) {
return;
}
call TapPoll_TapPoll_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _tap_s2316, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, _minTokensPerc_s2316);
if (revert) {
return;
}
}

implementation TapPoll_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, _tap_s2316: int, _tokenAddress_s2316: Ref, _fundAddress_s2316: Ref, _startTime_s2316: int, _endTime_s2316: int, _minTokensPerc_s2316: int)
{
call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((_startTime_s2316) >= (0));
assume ((_endTime_s2316) >= (0));
call BasePoll_BasePoll__success(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, false);
if (revert) {
return;
}
call TapPoll_TapPoll_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _tap_s2316, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, _minTokensPerc_s2316);
if (revert) {
return;
}
}

implementation onPollFinish_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2335: bool)
{
var fund_s2334: Ref;
var __var_220: int;
assume ((__tmp__DType[__tmp__fundAddress_BasePoll[this]]) == (IPollManagedFund));
fund_s2334 := __tmp__fundAddress_BasePoll[this];
assume ((__tmp__tap_TapPoll[this]) >= (0));
if ((__tmp__DType[fund_s2334]) == (PollManagedFund)) {
call onTapPollFinish_PollManagedFund__fail(fund_s2334, this, __var_220, agree_s2335, __tmp__tap_TapPoll[this]);
if (revert) {
return;
}
} else if ((__tmp__DType[fund_s2334]) == (IPollManagedFund)) {
call onTapPollFinish_IPollManagedFund(fund_s2334, this, __var_220, agree_s2335, __tmp__tap_TapPoll[this]);
} else {
assume (false);
}
}

implementation onPollFinish_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int, agree_s2335: bool)
{
var fund_s2334: Ref;
var __var_220: int;
assume ((DType[fundAddress_BasePoll[this]]) == (IPollManagedFund));
fund_s2334 := fundAddress_BasePoll[this];
assume ((tap_TapPoll[this]) >= (0));
if ((DType[fund_s2334]) == (PollManagedFund)) {
call onTapPollFinish_PollManagedFund__success(fund_s2334, this, __var_220, agree_s2335, tap_TapPoll[this]);
if (revert) {
return;
}
} else if ((DType[fund_s2334]) == (IPollManagedFund)) {
call onTapPollFinish_IPollManagedFund(fund_s2334, this, __var_220, agree_s2335, tap_TapPoll[this]);
} else {
assume (false);
}
}

implementation getVotedTokensPerc_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var __var_221: int;
var __var_222: int;
var __var_223: int;
assume ((__var_221) >= (0));
assume ((__tmp__DType[__tmp__token_BasePoll[this]]) == (IERC20Token));
__var_221 := __tmp__totalSupply_IERC20Token[__tmp__token_BasePoll[this]];
assume ((__var_221) >= (0));
if (!((__var_221) == (100))) {
revert := true;
return;
}
assume ((__var_223) >= (0));
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
if ((__tmp__DType[this]) == (TapPoll)) {
call __var_223 := safeAdd_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__yesCounter_BasePoll[this], __tmp__noCounter_BasePoll[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_223) >= (0));
__ret_0_ := __var_223;
return;
}

implementation getVotedTokensPerc_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: int)
{
var __var_221: int;
var __var_222: int;
var __var_223: int;
assume ((__var_221) >= (0));
assume ((DType[token_BasePoll[this]]) == (IERC20Token));
__var_221 := totalSupply_IERC20Token[token_BasePoll[this]];
assume ((__var_221) >= (0));
if (!((__var_221) == (100))) {
revert := true;
return;
}
assume ((__var_223) >= (0));
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((noCounter_BasePoll[this]) >= (0));
if ((DType[this]) == (TapPoll)) {
call __var_223 := safeAdd_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, yesCounter_BasePoll[this], noCounter_BasePoll[this]);
if (revert) {
return;
}
} else {
assume (false);
}
assume ((__var_223) >= (0));
__ret_0_ := __var_223;
return;
}

implementation isSubjectApproved_TapPoll__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_224: int;
assume ((__tmp__yesCounter_BasePoll[this]) >= (0));
assume ((__tmp__noCounter_BasePoll[this]) >= (0));
assume ((__var_224) >= (0));
call __var_224 := getVotedTokensPerc_TapPoll__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((__var_224) >= (0));
assume ((__tmp__minTokensPerc_TapPoll[this]) >= (0));
__ret_0_ := ((__tmp__yesCounter_BasePoll[this]) > (__tmp__noCounter_BasePoll[this])) && ((__var_224) >= (__tmp__minTokensPerc_TapPoll[this]));
return;
}

implementation isSubjectApproved_TapPoll__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int) returns (__ret_0_: bool)
{
var __var_224: int;
assume ((yesCounter_BasePoll[this]) >= (0));
assume ((noCounter_BasePoll[this]) >= (0));
assume ((__var_224) >= (0));
call __var_224 := getVotedTokensPerc_TapPoll__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
assume ((__var_224) >= (0));
assume ((minTokensPerc_TapPoll[this]) >= (0));
__ret_0_ := ((yesCounter_BasePoll[this]) > (noCounter_BasePoll[this])) && ((__var_224) >= (minTokensPerc_TapPoll[this]));
return;
}

implementation FallbackDispatch__fail(from: Ref, to: Ref, amount: int)
{
if ((__tmp__DType[to]) == (TapPoll)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (SafeMath)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (RefundPoll)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (PollManagedFund)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (MultiOwnable)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (ManagedToken)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (ITokenEventListener)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (ISimpleCrowdsale)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (IPollManagedFund)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (IERC20Token)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (ICrowdsaleFund)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (Fund)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (ERC20Token)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (DateTime)) {
assume ((amount) == (0));
} else if ((__tmp__DType[to]) == (BasePoll)) {
assume ((amount) == (0));
} else {
call Fallback_UnknownType__fail(from, to, amount);
if (revert) {
return;
}
}
}

implementation FallbackDispatch__success(from: Ref, to: Ref, amount: int)
{
if ((DType[to]) == (TapPoll)) {
assume ((amount) == (0));
} else if ((DType[to]) == (SafeMath)) {
assume ((amount) == (0));
} else if ((DType[to]) == (RefundPoll)) {
assume ((amount) == (0));
} else if ((DType[to]) == (PollManagedFund)) {
assume ((amount) == (0));
} else if ((DType[to]) == (MultiOwnable)) {
assume ((amount) == (0));
} else if ((DType[to]) == (ManagedToken)) {
assume ((amount) == (0));
} else if ((DType[to]) == (ITokenEventListener)) {
assume ((amount) == (0));
} else if ((DType[to]) == (ISimpleCrowdsale)) {
assume ((amount) == (0));
} else if ((DType[to]) == (IPollManagedFund)) {
assume ((amount) == (0));
} else if ((DType[to]) == (IERC20Token)) {
assume ((amount) == (0));
} else if ((DType[to]) == (ICrowdsaleFund)) {
assume ((amount) == (0));
} else if ((DType[to]) == (Fund)) {
assume ((amount) == (0));
} else if ((DType[to]) == (ERC20Token)) {
assume ((amount) == (0));
} else if ((DType[to]) == (DateTime)) {
assume ((amount) == (0));
} else if ((DType[to]) == (BasePoll)) {
assume ((amount) == (0));
} else {
call Fallback_UnknownType__success(from, to, amount);
if (revert) {
return;
}
}
}

implementation Fallback_UnknownType__fail(from: Ref, to: Ref, amount: int)
{
// ---- Logic for payable function START 
assume ((__tmp__Balance[from]) >= (amount));
__tmp__Balance[from] := (__tmp__Balance[from]) - (amount);
__tmp__Balance[to] := (__tmp__Balance[to]) + (amount);
// ---- Logic for payable function END 
}

implementation Fallback_UnknownType__success(from: Ref, to: Ref, amount: int)
{
// ---- Logic for payable function START 
assume ((Balance[from]) >= (amount));
Balance[from] := (Balance[from]) - (amount);
Balance[to] := (Balance[to]) + (amount);
// ---- Logic for payable function END 
}

implementation send__fail(from: Ref, to: Ref, amount: int) returns (success: bool)
{
var __exception: bool;
var __snap___tmp__Balance: [Ref]int;
var __snap___tmp__DType: [Ref]ContractName;
var __snap___tmp__Alloc: [Ref]bool;
var __snap___tmp__balance_ADDR: [Ref]int;
var __snap___tmp__M_Ref_Ref: [Ref][Ref]Ref;
var __snap___tmp__M_Ref_int: [Ref][Ref]int;
var __snap___tmp__M_Ref_bool: [Ref][Ref]bool;
var __snap___tmp__M_int_int: [Ref][int]int;
var __snap___tmp__M_int_Ref: [Ref][int]Ref;
var __snap___tmp__Length: [Ref]int;
var __snap___tmp__now: int;
var __snap___tmp__time_BasePoll.Vote: [Ref]int;
var __snap___tmp__weight_BasePoll.Vote: [Ref]int;
var __snap___tmp__agree_BasePoll.Vote: [Ref]bool;
var __snap___tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll: [Ref]int;
var __snap___tmp__token_BasePoll: [Ref]Ref;
var __snap___tmp__fundAddress_BasePoll: [Ref]Ref;
var __snap___tmp__startTime_BasePoll: [Ref]int;
var __snap___tmp__endTime_BasePoll: [Ref]int;
var __snap___tmp__checkTransfersAfterEnd_BasePoll: [Ref]bool;
var __snap___tmp__yesCounter_BasePoll: [Ref]int;
var __snap___tmp__noCounter_BasePoll: [Ref]int;
var __snap___tmp__totalVoted_BasePoll: [Ref]int;
var __snap___tmp__finalized_BasePoll: [Ref]bool;
var __snap___tmp__votesByAddress_BasePoll: [Ref]Ref;
var __snap___tmp__year_DateTime._DateTime: [Ref]int;
var __snap___tmp__month_DateTime._DateTime: [Ref]int;
var __snap___tmp__day_DateTime._DateTime: [Ref]int;
var __snap___tmp__hour_DateTime._DateTime: [Ref]int;
var __snap___tmp__minute_DateTime._DateTime: [Ref]int;
var __snap___tmp__second_DateTime._DateTime: [Ref]int;
var __snap___tmp__weekday_DateTime._DateTime: [Ref]int;
var __snap___tmp__DAY_IN_SECONDS_DateTime: [Ref]int;
var __snap___tmp__YEAR_IN_SECONDS_DateTime: [Ref]int;
var __snap___tmp__LEAP_YEAR_IN_SECONDS_DateTime: [Ref]int;
var __snap___tmp__HOUR_IN_SECONDS_DateTime: [Ref]int;
var __snap___tmp__MINUTE_IN_SECONDS_DateTime: [Ref]int;
var __snap___tmp__ORIGIN_YEAR_DateTime: [Ref]int;
var __snap___tmp__balances_ERC20Token: [Ref]Ref;
var __snap___tmp__allowed_ERC20Token: [Ref]Ref;
var __snap___tmp__state_Fund: [Ref]int;
var __snap___tmp__token_Fund: [Ref]Ref;
var __snap___tmp__INITIAL_TAP_Fund: [Ref]int;
var __snap___tmp__teamWallet_Fund: [Ref]Ref;
var __snap___tmp__crowdsaleEndDate_Fund: [Ref]int;
var __snap___tmp__referralTokenWallet_Fund: [Ref]Ref;
var __snap___tmp__foundationTokenWallet_Fund: [Ref]Ref;
var __snap___tmp__reserveTokenWallet_Fund: [Ref]Ref;
var __snap___tmp__bountyTokenWallet_Fund: [Ref]Ref;
var __snap___tmp__companyTokenWallet_Fund: [Ref]Ref;
var __snap___tmp__advisorTokenWallet_Fund: [Ref]Ref;
var __snap___tmp__lockedTokenAddress_Fund: [Ref]Ref;
var __snap___tmp__refundManager_Fund: [Ref]Ref;
var __snap___tmp__lastWithdrawTime_Fund: [Ref]int;
var __snap___tmp__firstWithdrawAmount_Fund: [Ref]int;
var __snap___tmp__crowdsaleAddress_Fund: [Ref]Ref;
var __snap___tmp__contributions_Fund: [Ref]Ref;
var __snap___tmp__name_IERC20Token: [Ref]int;
var __snap___tmp__symbol_IERC20Token: [Ref]int;
var __snap___tmp__decimals_IERC20Token: [Ref]int;
var __snap___tmp__totalSupply_IERC20Token: [Ref]int;
var __snap___tmp__allowTransfers_ManagedToken: [Ref]bool;
var __snap___tmp__issuanceFinished_ManagedToken: [Ref]bool;
var __snap___tmp__eventListener_ManagedToken: [Ref]Ref;
var __snap___tmp__manager_MultiOwnable: [Ref]Ref;
var __snap___tmp__owners_MultiOwnable: [Ref]Ref;
var __snap___tmp__ownerByAddress_MultiOwnable: [Ref]Ref;
var __snap___tmp__TAP_POLL_DURATION_PollManagedFund: [Ref]int;
var __snap___tmp__REFUND_POLL_DURATION_PollManagedFund: [Ref]int;
var __snap___tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund: [Ref]int;
var __snap___tmp__tapPoll_PollManagedFund: [Ref]Ref;
var __snap___tmp__refundPoll_PollManagedFund: [Ref]Ref;
var __snap___tmp__minVotedTokensPerc_PollManagedFund: [Ref]int;
var __snap___tmp__secondRefundPollDate_PollManagedFund: [Ref]int;
var __snap___tmp__isWithdrawEnabled_PollManagedFund: [Ref]bool;
var __snap___tmp__refundPollDates_PollManagedFund: [Ref]Ref;
var __snap___tmp__holdEndTime_RefundPoll: [Ref]int;
var __snap___tmp__tap_TapPoll: [Ref]int;
var __snap___tmp__minTokensPerc_TapPoll: [Ref]int;
havoc __exception;
if (__exception) {
__snap___tmp__Balance := __tmp__Balance;
__snap___tmp__DType := __tmp__DType;
__snap___tmp__Alloc := __tmp__Alloc;
__snap___tmp__balance_ADDR := __tmp__balance_ADDR;
__snap___tmp__M_Ref_Ref := __tmp__M_Ref_Ref;
__snap___tmp__M_Ref_int := __tmp__M_Ref_int;
__snap___tmp__M_Ref_bool := __tmp__M_Ref_bool;
__snap___tmp__M_int_int := __tmp__M_int_int;
__snap___tmp__M_int_Ref := __tmp__M_int_Ref;
__snap___tmp__Length := __tmp__Length;
__snap___tmp__now := __tmp__now;
__snap___tmp__time_BasePoll.Vote := __tmp__time_BasePoll.Vote;
__snap___tmp__weight_BasePoll.Vote := __tmp__weight_BasePoll.Vote;
__snap___tmp__agree_BasePoll.Vote := __tmp__agree_BasePoll.Vote;
__snap___tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := __tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__snap___tmp__token_BasePoll := __tmp__token_BasePoll;
__snap___tmp__fundAddress_BasePoll := __tmp__fundAddress_BasePoll;
__snap___tmp__startTime_BasePoll := __tmp__startTime_BasePoll;
__snap___tmp__endTime_BasePoll := __tmp__endTime_BasePoll;
__snap___tmp__checkTransfersAfterEnd_BasePoll := __tmp__checkTransfersAfterEnd_BasePoll;
__snap___tmp__yesCounter_BasePoll := __tmp__yesCounter_BasePoll;
__snap___tmp__noCounter_BasePoll := __tmp__noCounter_BasePoll;
__snap___tmp__totalVoted_BasePoll := __tmp__totalVoted_BasePoll;
__snap___tmp__finalized_BasePoll := __tmp__finalized_BasePoll;
__snap___tmp__votesByAddress_BasePoll := __tmp__votesByAddress_BasePoll;
__snap___tmp__year_DateTime._DateTime := __tmp__year_DateTime._DateTime;
__snap___tmp__month_DateTime._DateTime := __tmp__month_DateTime._DateTime;
__snap___tmp__day_DateTime._DateTime := __tmp__day_DateTime._DateTime;
__snap___tmp__hour_DateTime._DateTime := __tmp__hour_DateTime._DateTime;
__snap___tmp__minute_DateTime._DateTime := __tmp__minute_DateTime._DateTime;
__snap___tmp__second_DateTime._DateTime := __tmp__second_DateTime._DateTime;
__snap___tmp__weekday_DateTime._DateTime := __tmp__weekday_DateTime._DateTime;
__snap___tmp__DAY_IN_SECONDS_DateTime := __tmp__DAY_IN_SECONDS_DateTime;
__snap___tmp__YEAR_IN_SECONDS_DateTime := __tmp__YEAR_IN_SECONDS_DateTime;
__snap___tmp__LEAP_YEAR_IN_SECONDS_DateTime := __tmp__LEAP_YEAR_IN_SECONDS_DateTime;
__snap___tmp__HOUR_IN_SECONDS_DateTime := __tmp__HOUR_IN_SECONDS_DateTime;
__snap___tmp__MINUTE_IN_SECONDS_DateTime := __tmp__MINUTE_IN_SECONDS_DateTime;
__snap___tmp__ORIGIN_YEAR_DateTime := __tmp__ORIGIN_YEAR_DateTime;
__snap___tmp__balances_ERC20Token := __tmp__balances_ERC20Token;
__snap___tmp__allowed_ERC20Token := __tmp__allowed_ERC20Token;
__snap___tmp__state_Fund := __tmp__state_Fund;
__snap___tmp__token_Fund := __tmp__token_Fund;
__snap___tmp__INITIAL_TAP_Fund := __tmp__INITIAL_TAP_Fund;
__snap___tmp__teamWallet_Fund := __tmp__teamWallet_Fund;
__snap___tmp__crowdsaleEndDate_Fund := __tmp__crowdsaleEndDate_Fund;
__snap___tmp__referralTokenWallet_Fund := __tmp__referralTokenWallet_Fund;
__snap___tmp__foundationTokenWallet_Fund := __tmp__foundationTokenWallet_Fund;
__snap___tmp__reserveTokenWallet_Fund := __tmp__reserveTokenWallet_Fund;
__snap___tmp__bountyTokenWallet_Fund := __tmp__bountyTokenWallet_Fund;
__snap___tmp__companyTokenWallet_Fund := __tmp__companyTokenWallet_Fund;
__snap___tmp__advisorTokenWallet_Fund := __tmp__advisorTokenWallet_Fund;
__snap___tmp__lockedTokenAddress_Fund := __tmp__lockedTokenAddress_Fund;
__snap___tmp__refundManager_Fund := __tmp__refundManager_Fund;
__snap___tmp__lastWithdrawTime_Fund := __tmp__lastWithdrawTime_Fund;
__snap___tmp__firstWithdrawAmount_Fund := __tmp__firstWithdrawAmount_Fund;
__snap___tmp__crowdsaleAddress_Fund := __tmp__crowdsaleAddress_Fund;
__snap___tmp__contributions_Fund := __tmp__contributions_Fund;
__snap___tmp__name_IERC20Token := __tmp__name_IERC20Token;
__snap___tmp__symbol_IERC20Token := __tmp__symbol_IERC20Token;
__snap___tmp__decimals_IERC20Token := __tmp__decimals_IERC20Token;
__snap___tmp__totalSupply_IERC20Token := __tmp__totalSupply_IERC20Token;
__snap___tmp__allowTransfers_ManagedToken := __tmp__allowTransfers_ManagedToken;
__snap___tmp__issuanceFinished_ManagedToken := __tmp__issuanceFinished_ManagedToken;
__snap___tmp__eventListener_ManagedToken := __tmp__eventListener_ManagedToken;
__snap___tmp__manager_MultiOwnable := __tmp__manager_MultiOwnable;
__snap___tmp__owners_MultiOwnable := __tmp__owners_MultiOwnable;
__snap___tmp__ownerByAddress_MultiOwnable := __tmp__ownerByAddress_MultiOwnable;
__snap___tmp__TAP_POLL_DURATION_PollManagedFund := __tmp__TAP_POLL_DURATION_PollManagedFund;
__snap___tmp__REFUND_POLL_DURATION_PollManagedFund := __tmp__REFUND_POLL_DURATION_PollManagedFund;
__snap___tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := __tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
__snap___tmp__tapPoll_PollManagedFund := __tmp__tapPoll_PollManagedFund;
__snap___tmp__refundPoll_PollManagedFund := __tmp__refundPoll_PollManagedFund;
__snap___tmp__minVotedTokensPerc_PollManagedFund := __tmp__minVotedTokensPerc_PollManagedFund;
__snap___tmp__secondRefundPollDate_PollManagedFund := __tmp__secondRefundPollDate_PollManagedFund;
__snap___tmp__isWithdrawEnabled_PollManagedFund := __tmp__isWithdrawEnabled_PollManagedFund;
__snap___tmp__refundPollDates_PollManagedFund := __tmp__refundPollDates_PollManagedFund;
__snap___tmp__holdEndTime_RefundPoll := __tmp__holdEndTime_RefundPoll;
__snap___tmp__tap_TapPoll := __tmp__tap_TapPoll;
__snap___tmp__minTokensPerc_TapPoll := __tmp__minTokensPerc_TapPoll;
if ((__tmp__Balance[from]) >= (amount)) {
call FallbackDispatch__fail(from, to, amount);
}
success := false;
assume ((revert) || ((gas) < (0)));
__tmp__Balance := __snap___tmp__Balance;
__tmp__DType := __snap___tmp__DType;
__tmp__Alloc := __snap___tmp__Alloc;
__tmp__balance_ADDR := __snap___tmp__balance_ADDR;
__tmp__M_Ref_Ref := __snap___tmp__M_Ref_Ref;
__tmp__M_Ref_int := __snap___tmp__M_Ref_int;
__tmp__M_Ref_bool := __snap___tmp__M_Ref_bool;
__tmp__M_int_int := __snap___tmp__M_int_int;
__tmp__M_int_Ref := __snap___tmp__M_int_Ref;
__tmp__Length := __snap___tmp__Length;
__tmp__now := __snap___tmp__now;
__tmp__time_BasePoll.Vote := __snap___tmp__time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := __snap___tmp__weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := __snap___tmp__agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := __snap___tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := __snap___tmp__token_BasePoll;
__tmp__fundAddress_BasePoll := __snap___tmp__fundAddress_BasePoll;
__tmp__startTime_BasePoll := __snap___tmp__startTime_BasePoll;
__tmp__endTime_BasePoll := __snap___tmp__endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := __snap___tmp__checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := __snap___tmp__yesCounter_BasePoll;
__tmp__noCounter_BasePoll := __snap___tmp__noCounter_BasePoll;
__tmp__totalVoted_BasePoll := __snap___tmp__totalVoted_BasePoll;
__tmp__finalized_BasePoll := __snap___tmp__finalized_BasePoll;
__tmp__votesByAddress_BasePoll := __snap___tmp__votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := __snap___tmp__year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := __snap___tmp__month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := __snap___tmp__day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := __snap___tmp__hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := __snap___tmp__minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := __snap___tmp__second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := __snap___tmp__weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := __snap___tmp__DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := __snap___tmp__YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := __snap___tmp__LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := __snap___tmp__HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := __snap___tmp__MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := __snap___tmp__ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := __snap___tmp__balances_ERC20Token;
__tmp__allowed_ERC20Token := __snap___tmp__allowed_ERC20Token;
__tmp__state_Fund := __snap___tmp__state_Fund;
__tmp__token_Fund := __snap___tmp__token_Fund;
__tmp__INITIAL_TAP_Fund := __snap___tmp__INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := __snap___tmp__teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := __snap___tmp__crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := __snap___tmp__referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := __snap___tmp__foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := __snap___tmp__reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := __snap___tmp__bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := __snap___tmp__companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := __snap___tmp__advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := __snap___tmp__lockedTokenAddress_Fund;
__tmp__refundManager_Fund := __snap___tmp__refundManager_Fund;
__tmp__lastWithdrawTime_Fund := __snap___tmp__lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := __snap___tmp__firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := __snap___tmp__crowdsaleAddress_Fund;
__tmp__contributions_Fund := __snap___tmp__contributions_Fund;
__tmp__name_IERC20Token := __snap___tmp__name_IERC20Token;
__tmp__symbol_IERC20Token := __snap___tmp__symbol_IERC20Token;
__tmp__decimals_IERC20Token := __snap___tmp__decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := __snap___tmp__totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := __snap___tmp__allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := __snap___tmp__issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := __snap___tmp__eventListener_ManagedToken;
__tmp__manager_MultiOwnable := __snap___tmp__manager_MultiOwnable;
__tmp__owners_MultiOwnable := __snap___tmp__owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := __snap___tmp__ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := __snap___tmp__TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := __snap___tmp__REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := __snap___tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := __snap___tmp__tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := __snap___tmp__refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := __snap___tmp__minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := __snap___tmp__secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := __snap___tmp__isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := __snap___tmp__refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := __snap___tmp__holdEndTime_RefundPoll;
__tmp__tap_TapPoll := __snap___tmp__tap_TapPoll;
__tmp__minTokensPerc_TapPoll := __snap___tmp__minTokensPerc_TapPoll;
revert := false;
} else {
if ((__tmp__Balance[from]) >= (amount)) {
call FallbackDispatch__fail(from, to, amount);
success := true;
} else {
success := false;
}
assume ((!(revert)) && ((gas) >= (0)));
}
}

implementation send__success(from: Ref, to: Ref, amount: int) returns (success: bool)
{
var __exception: bool;
havoc __exception;
if (__exception) {
__tmp__Balance := Balance;
__tmp__DType := DType;
__tmp__Alloc := Alloc;
__tmp__balance_ADDR := balance_ADDR;
__tmp__M_Ref_Ref := M_Ref_Ref;
__tmp__M_Ref_int := M_Ref_int;
__tmp__M_Ref_bool := M_Ref_bool;
__tmp__M_int_int := M_int_int;
__tmp__M_int_Ref := M_int_Ref;
__tmp__Length := Length;
__tmp__now := now;
__tmp__time_BasePoll.Vote := time_BasePoll.Vote;
__tmp__weight_BasePoll.Vote := weight_BasePoll.Vote;
__tmp__agree_BasePoll.Vote := agree_BasePoll.Vote;
__tmp__MAX_TOKENS_WEIGHT_DENOM_BasePoll := MAX_TOKENS_WEIGHT_DENOM_BasePoll;
__tmp__token_BasePoll := token_BasePoll;
__tmp__fundAddress_BasePoll := fundAddress_BasePoll;
__tmp__startTime_BasePoll := startTime_BasePoll;
__tmp__endTime_BasePoll := endTime_BasePoll;
__tmp__checkTransfersAfterEnd_BasePoll := checkTransfersAfterEnd_BasePoll;
__tmp__yesCounter_BasePoll := yesCounter_BasePoll;
__tmp__noCounter_BasePoll := noCounter_BasePoll;
__tmp__totalVoted_BasePoll := totalVoted_BasePoll;
__tmp__finalized_BasePoll := finalized_BasePoll;
__tmp__votesByAddress_BasePoll := votesByAddress_BasePoll;
__tmp__year_DateTime._DateTime := year_DateTime._DateTime;
__tmp__month_DateTime._DateTime := month_DateTime._DateTime;
__tmp__day_DateTime._DateTime := day_DateTime._DateTime;
__tmp__hour_DateTime._DateTime := hour_DateTime._DateTime;
__tmp__minute_DateTime._DateTime := minute_DateTime._DateTime;
__tmp__second_DateTime._DateTime := second_DateTime._DateTime;
__tmp__weekday_DateTime._DateTime := weekday_DateTime._DateTime;
__tmp__DAY_IN_SECONDS_DateTime := DAY_IN_SECONDS_DateTime;
__tmp__YEAR_IN_SECONDS_DateTime := YEAR_IN_SECONDS_DateTime;
__tmp__LEAP_YEAR_IN_SECONDS_DateTime := LEAP_YEAR_IN_SECONDS_DateTime;
__tmp__HOUR_IN_SECONDS_DateTime := HOUR_IN_SECONDS_DateTime;
__tmp__MINUTE_IN_SECONDS_DateTime := MINUTE_IN_SECONDS_DateTime;
__tmp__ORIGIN_YEAR_DateTime := ORIGIN_YEAR_DateTime;
__tmp__balances_ERC20Token := balances_ERC20Token;
__tmp__allowed_ERC20Token := allowed_ERC20Token;
__tmp__state_Fund := state_Fund;
__tmp__token_Fund := token_Fund;
__tmp__INITIAL_TAP_Fund := INITIAL_TAP_Fund;
__tmp__teamWallet_Fund := teamWallet_Fund;
__tmp__crowdsaleEndDate_Fund := crowdsaleEndDate_Fund;
__tmp__referralTokenWallet_Fund := referralTokenWallet_Fund;
__tmp__foundationTokenWallet_Fund := foundationTokenWallet_Fund;
__tmp__reserveTokenWallet_Fund := reserveTokenWallet_Fund;
__tmp__bountyTokenWallet_Fund := bountyTokenWallet_Fund;
__tmp__companyTokenWallet_Fund := companyTokenWallet_Fund;
__tmp__advisorTokenWallet_Fund := advisorTokenWallet_Fund;
__tmp__lockedTokenAddress_Fund := lockedTokenAddress_Fund;
__tmp__refundManager_Fund := refundManager_Fund;
__tmp__lastWithdrawTime_Fund := lastWithdrawTime_Fund;
__tmp__firstWithdrawAmount_Fund := firstWithdrawAmount_Fund;
__tmp__crowdsaleAddress_Fund := crowdsaleAddress_Fund;
__tmp__contributions_Fund := contributions_Fund;
__tmp__name_IERC20Token := name_IERC20Token;
__tmp__symbol_IERC20Token := symbol_IERC20Token;
__tmp__decimals_IERC20Token := decimals_IERC20Token;
__tmp__totalSupply_IERC20Token := totalSupply_IERC20Token;
__tmp__allowTransfers_ManagedToken := allowTransfers_ManagedToken;
__tmp__issuanceFinished_ManagedToken := issuanceFinished_ManagedToken;
__tmp__eventListener_ManagedToken := eventListener_ManagedToken;
__tmp__manager_MultiOwnable := manager_MultiOwnable;
__tmp__owners_MultiOwnable := owners_MultiOwnable;
__tmp__ownerByAddress_MultiOwnable := ownerByAddress_MultiOwnable;
__tmp__TAP_POLL_DURATION_PollManagedFund := TAP_POLL_DURATION_PollManagedFund;
__tmp__REFUND_POLL_DURATION_PollManagedFund := REFUND_POLL_DURATION_PollManagedFund;
__tmp__MAX_VOTED_TOKEN_PERC_PollManagedFund := MAX_VOTED_TOKEN_PERC_PollManagedFund;
__tmp__tapPoll_PollManagedFund := tapPoll_PollManagedFund;
__tmp__refundPoll_PollManagedFund := refundPoll_PollManagedFund;
__tmp__minVotedTokensPerc_PollManagedFund := minVotedTokensPerc_PollManagedFund;
__tmp__secondRefundPollDate_PollManagedFund := secondRefundPollDate_PollManagedFund;
__tmp__isWithdrawEnabled_PollManagedFund := isWithdrawEnabled_PollManagedFund;
__tmp__refundPollDates_PollManagedFund := refundPollDates_PollManagedFund;
__tmp__holdEndTime_RefundPoll := holdEndTime_RefundPoll;
__tmp__tap_TapPoll := tap_TapPoll;
__tmp__minTokensPerc_TapPoll := minTokensPerc_TapPoll;
if ((__tmp__Balance[from]) >= (amount)) {
call FallbackDispatch__fail(from, to, amount);
}
success := false;
assume ((revert) || ((gas) < (0)));
revert := false;
} else {
if ((Balance[from]) >= (amount)) {
call FallbackDispatch__success(from, to, amount);
success := true;
} else {
success := false;
}
assume ((!(revert)) && ((gas) >= (0)));
}
}

implementation checkTime_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
assume ((__tmp__now) >= (0));
assume ((__tmp__startTime_BasePoll[this]) >= (0));
assume ((__tmp__now) >= (0));
assume ((__tmp__endTime_BasePoll[this]) >= (0));
if (!(((__tmp__now) >= (__tmp__startTime_BasePoll[this])) && ((__tmp__now) <= (__tmp__endTime_BasePoll[this])))) {
revert := true;
return;
}
}

implementation checkTime_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
assume ((now) >= (0));
assume ((startTime_BasePoll[this]) >= (0));
assume ((now) >= (0));
assume ((endTime_BasePoll[this]) >= (0));
if (!(((now) >= (startTime_BasePoll[this])) && ((now) <= (endTime_BasePoll[this])))) {
revert := true;
return;
}
}

implementation notFinalized_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!(!(__tmp__finalized_BasePoll[this]))) {
revert := true;
return;
}
}

implementation notFinalized_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!(!(finalized_BasePoll[this]))) {
revert := true;
return;
}
}

implementation withdrawEnabled_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_75: bool;
if ((__tmp__DType[this]) == (PollManagedFund)) {
call __var_75 := canWithdraw_PollManagedFund__fail(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[this]) == (Fund)) {
call __var_75 := canWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else {
assume (false);
}
if (!(__var_75)) {
revert := true;
return;
}
}

implementation withdrawEnabled_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_75: bool;
if ((DType[this]) == (PollManagedFund)) {
call __var_75 := canWithdraw_PollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
if (revert) {
return;
}
} else if ((DType[this]) == (Fund)) {
call __var_75 := canWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else {
assume (false);
}
if (!(__var_75)) {
revert := true;
return;
}
}

implementation onlyCrowdsale_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!((msgsender_MSG) == (__tmp__crowdsaleAddress_Fund[this]))) {
revert := true;
return;
}
}

implementation onlyCrowdsale_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!((msgsender_MSG) == (crowdsaleAddress_Fund[this]))) {
revert := true;
return;
}
}

implementation transfersAllowed_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!(__tmp__allowTransfers_ManagedToken[this])) {
revert := true;
return;
}
}

implementation transfersAllowed_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!(allowTransfers_ManagedToken[this])) {
revert := true;
return;
}
}

implementation canIssue_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!(!(__tmp__issuanceFinished_ManagedToken[this]))) {
revert := true;
return;
}
}

implementation canIssue_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!(!(issuanceFinished_ManagedToken[this]))) {
revert := true;
return;
}
}

implementation onlyOwner_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!((__tmp__M_Ref_bool[__tmp__ownerByAddress_MultiOwnable[this]][msgsender_MSG]) == (true))) {
revert := true;
return;
}
}

implementation onlyOwner_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
if (!((M_Ref_bool[ownerByAddress_MultiOwnable[this]][msgsender_MSG]) == (true))) {
revert := true;
return;
}
}

implementation onlyTokenHolder_pre__fail(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_154: int;
var __var_155: int;
assume ((__var_154) >= (0));
if ((__tmp__DType[__tmp__token_Fund[this]]) == (ManagedToken)) {
call __var_154 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_155, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (ERC20Token)) {
call __var_154 := balanceOf_ERC20Token__fail(__tmp__token_Fund[this], this, __var_155, msgsender_MSG);
if (revert) {
return;
}
} else if ((__tmp__DType[__tmp__token_Fund[this]]) == (IERC20Token)) {
call __var_154 := balanceOf_IERC20Token(__tmp__token_Fund[this], this, __var_155, msgsender_MSG);
} else {
assume (false);
}
assume ((__var_154) >= (0));
if (!((__var_154) > (0))) {
revert := true;
return;
}
}

implementation onlyTokenHolder_pre__success(this: Ref, msgsender_MSG: Ref, msgvalue_MSG: int)
{
var __var_154: int;
var __var_155: int;
assume ((__var_154) >= (0));
if ((DType[token_Fund[this]]) == (ManagedToken)) {
call __var_154 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_155, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (ERC20Token)) {
call __var_154 := balanceOf_ERC20Token__success(token_Fund[this], this, __var_155, msgsender_MSG);
if (revert) {
return;
}
} else if ((DType[token_Fund[this]]) == (IERC20Token)) {
call __var_154 := balanceOf_IERC20Token(token_Fund[this], this, __var_155, msgsender_MSG);
} else {
assume (false);
}
assume ((__var_154) >= (0));
if (!((__var_154) > (0))) {
revert := true;
return;
}
}

implementation BoogieEntry_BasePoll()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _tokenAddress_s3219: Ref;
var _fundAddress_s3219: Ref;
var _startTime_s3219: int;
var _endTime_s3219: int;
var _checkTransfersAfterEnd_s3219: bool;
var agree_s3313: bool;
var tokenHolder_s3502: Ref;
var amount_s3502: int;
var __ret_0_tryToFinalize: bool;
var __ret_0_isNowApproved: bool;
var tmpNow: int;
assume ((now) >= (0));
assume ((((DType[this]) == (BasePoll)) || ((DType[this]) == (RefundPoll))) || ((DType[this]) == (TapPoll)));
gas := (gas) - (53000);
call BasePoll_BasePoll(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s3219, _fundAddress_s3219, _startTime_s3219, _endTime_s3219, _checkTransfersAfterEnd_s3219);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
  // invariant (HoudiniB1_BasePoll) ==> ((fundAddress_BasePoll[this]) == (null));
  // invariant (HoudiniB2_BasePoll) ==> ((fundAddress_BasePoll[this]) != (null));
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _tokenAddress_s3219;
havoc _fundAddress_s3219;
havoc _startTime_s3219;
havoc _endTime_s3219;
havoc _checkTransfersAfterEnd_s3219;
havoc agree_s3313;
havoc tokenHolder_s3502;
havoc amount_s3502;
havoc __ret_0_tryToFinalize;
havoc __ret_0_isNowApproved;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call vote_BasePoll(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call revokeVote_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call onTokenTransfer_BasePoll(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_tryToFinalize := tryToFinalize_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_isNowApproved := isNowApproved_BasePoll(this, msgsender_MSG, msgvalue_MSG);
}
}
}

implementation BoogieEntry_DateTime()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var year_s676: int;
var __ret_0_isLeapYear: bool;
var year2_s704: int;
var __ret_0_leapYearsBefore: int;
var month_s774: int;
var year_s774: int;
var __ret_0_getDaysInMonth: int;
var timestamp_s1031: int;
var __ret_0_getYear: int;
var timestamp_s1044: int;
var __ret_0_getMonth: int;
var timestamp_s1057: int;
var __ret_0_getDay: int;
var timestamp_s1076: int;
var __ret_0_getHour: int;
var timestamp_s1093: int;
var __ret_0_getMinute: int;
var timestamp_s1107: int;
var __ret_0_getSecond: int;
var timestamp_s1126: int;
var __ret_0_getWeekday: int;
var year_s1153: int;
var month_s1153: int;
var day_s1153: int;
var timestamp_s1153: int;
var year_s1180: int;
var month_s1180: int;
var day_s1180: int;
var hour_s1180: int;
var timestamp_s1180: int;
var year_s1207: int;
var month_s1207: int;
var day_s1207: int;
var hour_s1207: int;
var minute_s1207: int;
var timestamp_s1207: int;
var year_s1395: int;
var month_s1395: int;
var day_s1395: int;
var hour_s1395: int;
var minute_s1395: int;
var second_s1395: int;
var timestamp_s1395: int;
var tmpNow: int;
assume ((now) >= (0));
assume (((DType[this]) == (DateTime)) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call DateTime_DateTime__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc year_s676;
havoc __ret_0_isLeapYear;
havoc year2_s704;
havoc __ret_0_leapYearsBefore;
havoc month_s774;
havoc year_s774;
havoc __ret_0_getDaysInMonth;
havoc timestamp_s1031;
havoc __ret_0_getYear;
havoc timestamp_s1044;
havoc __ret_0_getMonth;
havoc timestamp_s1057;
havoc __ret_0_getDay;
havoc timestamp_s1076;
havoc __ret_0_getHour;
havoc timestamp_s1093;
havoc __ret_0_getMinute;
havoc timestamp_s1107;
havoc __ret_0_getSecond;
havoc timestamp_s1126;
havoc __ret_0_getWeekday;
havoc year_s1153;
havoc month_s1153;
havoc day_s1153;
havoc timestamp_s1153;
havoc year_s1180;
havoc month_s1180;
havoc day_s1180;
havoc hour_s1180;
havoc timestamp_s1180;
havoc year_s1207;
havoc month_s1207;
havoc day_s1207;
havoc hour_s1207;
havoc minute_s1207;
havoc timestamp_s1207;
havoc year_s1395;
havoc month_s1395;
havoc day_s1395;
havoc hour_s1395;
havoc minute_s1395;
havoc second_s1395;
havoc timestamp_s1395;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (14)) {
gas := (gas) - (21000);
call __ret_0_isLeapYear := isLeapYear_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s676);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call __ret_0_leapYearsBefore := leapYearsBefore_DateTime(this, msgsender_MSG, msgvalue_MSG, year2_s704);
} else if ((choice) == (12)) {
gas := (gas) - (21000);
call __ret_0_getDaysInMonth := getDaysInMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, month_s774, year_s774);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call __ret_0_getYear := getYear_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1031);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_getMonth := getMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
} else if ((choice) == (9)) {
gas := (gas) - (21000);
call __ret_0_getDay := getDay_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call __ret_0_getHour := getHour_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1076);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call __ret_0_getMinute := getMinute_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1093);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call __ret_0_getSecond := getSecond_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1107);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call __ret_0_getWeekday := getWeekday_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1126);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call timestamp_s1153 := toTimestamp3_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call timestamp_s1180 := toTimestamp4_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call timestamp_s1207 := toTimestamp5_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call timestamp_s1395 := toTimestamp6_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1395, month_s1395, day_s1395, hour_s1395, minute_s1395, second_s1395);
}
}
}

implementation BoogieEntry_ERC20Token()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owner_s3760: Ref;
var __ret_0_balanceOf: int;
var _to_s3586: Ref;
var _value_s3586: int;
var __ret_0_transfer: bool;
var _from_s3664: Ref;
var _to_s3664: Ref;
var _value_s3664: int;
var __ret_0_transferFrom: bool;
var _spender_s3775: Ref;
var _value_s3775: int;
var __ret_0_approve: bool;
var _owner_s3819: Ref;
var _spender_s3819: Ref;
var __ret_0_allowance: int;
var tmpNow: int;
assume ((now) >= (0));
assume (((DType[this]) == (ERC20Token)) || ((DType[this]) == (ManagedToken)));
gas := (gas) - (53000);
call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owner_s3760;
havoc __ret_0_balanceOf;
havoc _to_s3586;
havoc _value_s3586;
havoc __ret_0_transfer;
havoc _from_s3664;
havoc _to_s3664;
havoc _value_s3664;
havoc __ret_0_transferFrom;
havoc _spender_s3775;
havoc _value_s3775;
havoc __ret_0_approve;
havoc _owner_s3819;
havoc _spender_s3819;
havoc __ret_0_allowance;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call __ret_0_balanceOf := balanceOf_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3760);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call __ret_0_transfer := transfer_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call __ret_0_transferFrom := transferFrom_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_approve := approve_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_allowance := allowance_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3819, _spender_s3819);
}
}
}

implementation BoogieEntry_Fund()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var contributor_s1669: Ref;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var _teamWallet_s1547: Ref;
var _referralTokenWallet_s1547: Ref;
var _foundationTokenWallet_s1547: Ref;
var _companyTokenWallet_s1547: Ref;
var _reserveTokenWallet_s1547: Ref;
var _bountyTokenWallet_s1547: Ref;
var _advisorTokenWallet_s1547: Ref;
var _refundManager_s1547: Ref;
var _owners_s1547: Ref;
var __ret_0_canWithdraw: bool;
var _crowdsaleAddress_s1592: Ref;
var _tokenAddress_s1616: Ref;
var _lockedTokenAddress_s1638: Ref;
var contributorAddress_s1850: Ref;
var __ret_0_getCurrentTapAmount: int;
var tmpNow: int;
assume ((now) >= (0));
assume (((DType[this]) == (Fund)) || ((DType[this]) == (PollManagedFund)));
call _owners_s1547 := FreshRefGenerator__success();
gas := (gas) - (53000);
call Fund_Fund(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s1547, _referralTokenWallet_s1547, _foundationTokenWallet_s1547, _companyTokenWallet_s1547, _reserveTokenWallet_s1547, _bountyTokenWallet_s1547, _advisorTokenWallet_s1547, _refundManager_s1547, _owners_s1547);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
  // invariant (HoudiniB1_Fund) ==> ((manager_MultiOwnable[this]) == (null));
  // invariant (HoudiniB2_Fund) ==> ((manager_MultiOwnable[this]) != (null));
  // invariant (HoudiniB3_Fund) ==> ((teamWallet_Fund[this]) == (null));
  // invariant (HoudiniB4_Fund) ==> ((teamWallet_Fund[this]) != (null));
  // invariant (HoudiniB5_Fund) ==> ((referralTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB6_Fund) ==> ((referralTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB7_Fund) ==> ((foundationTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB8_Fund) ==> ((foundationTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB9_Fund) ==> ((reserveTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB10_Fund) ==> ((reserveTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB11_Fund) ==> ((bountyTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB12_Fund) ==> ((bountyTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB13_Fund) ==> ((companyTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB14_Fund) ==> ((companyTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB15_Fund) ==> ((advisorTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB16_Fund) ==> ((advisorTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB17_Fund) ==> ((lockedTokenAddress_Fund[this]) == (null));
  // invariant (HoudiniB18_Fund) ==> ((lockedTokenAddress_Fund[this]) != (null));
  // invariant (HoudiniB19_Fund) ==> ((refundManager_Fund[this]) == (null));
  // invariant (HoudiniB20_Fund) ==> ((refundManager_Fund[this]) != (null));
  // invariant (HoudiniB21_Fund) ==> ((crowdsaleAddress_Fund[this]) == (null));
  // invariant (HoudiniB22_Fund) ==> ((crowdsaleAddress_Fund[this]) != (null));
  // invariant (HoudiniB23_Fund) ==> ((manager_MultiOwnable[this]) == (teamWallet_Fund[this]));
  // invariant (HoudiniB24_Fund) ==> ((manager_MultiOwnable[this]) != (teamWallet_Fund[this]));
  // invariant (HoudiniB25_Fund) ==> ((manager_MultiOwnable[this]) == (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB26_Fund) ==> ((manager_MultiOwnable[this]) != (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB27_Fund) ==> ((manager_MultiOwnable[this]) == (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB28_Fund) ==> ((manager_MultiOwnable[this]) != (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB29_Fund) ==> ((manager_MultiOwnable[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB30_Fund) ==> ((manager_MultiOwnable[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB31_Fund) ==> ((manager_MultiOwnable[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB32_Fund) ==> ((manager_MultiOwnable[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB33_Fund) ==> ((manager_MultiOwnable[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB34_Fund) ==> ((manager_MultiOwnable[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB35_Fund) ==> ((manager_MultiOwnable[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB36_Fund) ==> ((manager_MultiOwnable[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB37_Fund) ==> ((manager_MultiOwnable[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB38_Fund) ==> ((manager_MultiOwnable[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB39_Fund) ==> ((manager_MultiOwnable[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB40_Fund) ==> ((manager_MultiOwnable[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB41_Fund) ==> ((manager_MultiOwnable[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB42_Fund) ==> ((manager_MultiOwnable[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB43_Fund) ==> ((teamWallet_Fund[this]) == (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB44_Fund) ==> ((teamWallet_Fund[this]) != (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB45_Fund) ==> ((teamWallet_Fund[this]) == (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB46_Fund) ==> ((teamWallet_Fund[this]) != (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB47_Fund) ==> ((teamWallet_Fund[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB48_Fund) ==> ((teamWallet_Fund[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB49_Fund) ==> ((teamWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB50_Fund) ==> ((teamWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB51_Fund) ==> ((teamWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB52_Fund) ==> ((teamWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB53_Fund) ==> ((teamWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB54_Fund) ==> ((teamWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB55_Fund) ==> ((teamWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB56_Fund) ==> ((teamWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB57_Fund) ==> ((teamWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB58_Fund) ==> ((teamWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB59_Fund) ==> ((teamWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB60_Fund) ==> ((teamWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB61_Fund) ==> ((referralTokenWallet_Fund[this]) == (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB62_Fund) ==> ((referralTokenWallet_Fund[this]) != (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB63_Fund) ==> ((referralTokenWallet_Fund[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB64_Fund) ==> ((referralTokenWallet_Fund[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB65_Fund) ==> ((referralTokenWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB66_Fund) ==> ((referralTokenWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB67_Fund) ==> ((referralTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB68_Fund) ==> ((referralTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB69_Fund) ==> ((referralTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB70_Fund) ==> ((referralTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB71_Fund) ==> ((referralTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB72_Fund) ==> ((referralTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB73_Fund) ==> ((referralTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB74_Fund) ==> ((referralTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB75_Fund) ==> ((referralTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB76_Fund) ==> ((referralTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB77_Fund) ==> ((foundationTokenWallet_Fund[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB78_Fund) ==> ((foundationTokenWallet_Fund[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB79_Fund) ==> ((foundationTokenWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB80_Fund) ==> ((foundationTokenWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB81_Fund) ==> ((foundationTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB82_Fund) ==> ((foundationTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB83_Fund) ==> ((foundationTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB84_Fund) ==> ((foundationTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB85_Fund) ==> ((foundationTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB86_Fund) ==> ((foundationTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB87_Fund) ==> ((foundationTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB88_Fund) ==> ((foundationTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB89_Fund) ==> ((foundationTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB90_Fund) ==> ((foundationTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB91_Fund) ==> ((reserveTokenWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB92_Fund) ==> ((reserveTokenWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB93_Fund) ==> ((reserveTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB94_Fund) ==> ((reserveTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB95_Fund) ==> ((reserveTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB96_Fund) ==> ((reserveTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB97_Fund) ==> ((reserveTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB98_Fund) ==> ((reserveTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB99_Fund) ==> ((reserveTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB100_Fund) ==> ((reserveTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB101_Fund) ==> ((reserveTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB102_Fund) ==> ((reserveTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB103_Fund) ==> ((bountyTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB104_Fund) ==> ((bountyTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB105_Fund) ==> ((bountyTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB106_Fund) ==> ((bountyTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB107_Fund) ==> ((bountyTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB108_Fund) ==> ((bountyTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB109_Fund) ==> ((bountyTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB110_Fund) ==> ((bountyTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB111_Fund) ==> ((bountyTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB112_Fund) ==> ((bountyTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB113_Fund) ==> ((companyTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB114_Fund) ==> ((companyTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB115_Fund) ==> ((companyTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB116_Fund) ==> ((companyTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB117_Fund) ==> ((companyTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB118_Fund) ==> ((companyTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB119_Fund) ==> ((companyTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB120_Fund) ==> ((companyTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB121_Fund) ==> ((advisorTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB122_Fund) ==> ((advisorTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB123_Fund) ==> ((advisorTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB124_Fund) ==> ((advisorTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB125_Fund) ==> ((advisorTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB126_Fund) ==> ((advisorTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB127_Fund) ==> ((lockedTokenAddress_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB128_Fund) ==> ((lockedTokenAddress_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB129_Fund) ==> ((lockedTokenAddress_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB130_Fund) ==> ((lockedTokenAddress_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB131_Fund) ==> ((refundManager_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB132_Fund) ==> ((refundManager_Fund[this]) != (crowdsaleAddress_Fund[this]));
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc contributor_s1669;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc _teamWallet_s1547;
havoc _referralTokenWallet_s1547;
havoc _foundationTokenWallet_s1547;
havoc _companyTokenWallet_s1547;
havoc _reserveTokenWallet_s1547;
havoc _bountyTokenWallet_s1547;
havoc _advisorTokenWallet_s1547;
havoc _refundManager_s1547;
havoc _owners_s1547;
havoc __ret_0_canWithdraw;
havoc _crowdsaleAddress_s1592;
havoc _tokenAddress_s1616;
havoc _lockedTokenAddress_s1638;
havoc contributorAddress_s1850;
havoc __ret_0_getCurrentTapAmount;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (15)) {
gas := (gas) - (21000);
call processContribution_Fund(this, msgsender_MSG, msgvalue_MSG, contributor_s1669);
} else if ((choice) == (14)) {
gas := (gas) - (21000);
call onCrowdsaleEnd_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call enableCrowdsaleRefund_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (12)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_canWithdraw := canWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (9)) {
gas := (gas) - (21000);
call setCrowdsaleAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _crowdsaleAddress_s1592);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call setTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s1616);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call setLockedTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _lockedTokenAddress_s1638);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call refundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call autoRefundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG, contributorAddress_s1850);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call __ret_0_getCurrentTapAmount := getCurrentTapAmount_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call firstWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call withdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call refundTokenHolder_Fund(this, msgsender_MSG, msgvalue_MSG);
}
}
}

implementation BoogieEntry_ICrowdsaleFund()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
assume ((now) >= (0));
assume ((((DType[this]) == (Fund)) || ((DType[this]) == (ICrowdsaleFund))) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call ICrowdsaleFund_ICrowdsaleFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}
}

implementation BoogieEntry_IERC20Token()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owner_s3837: Ref;
var balance_s3837: int;
var _to_s3846: Ref;
var _value_s3846: int;
var success_s3846: bool;
var _from_s3857: Ref;
var _to_s3857: Ref;
var _value_s3857: int;
var success_s3857: bool;
var _spender_s3866: Ref;
var _value_s3866: int;
var success_s3866: bool;
var _owner_s3875: Ref;
var _spender_s3875: Ref;
var remaining_s3875: int;
var tmpNow: int;
assume ((now) >= (0));
assume ((((DType[this]) == (ERC20Token)) || ((DType[this]) == (IERC20Token))) || ((DType[this]) == (ManagedToken)));
gas := (gas) - (53000);
call IERC20Token_IERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owner_s3837;
havoc balance_s3837;
havoc _to_s3846;
havoc _value_s3846;
havoc success_s3846;
havoc _from_s3857;
havoc _to_s3857;
havoc _value_s3857;
havoc success_s3857;
havoc _spender_s3866;
havoc _value_s3866;
havoc success_s3866;
havoc _owner_s3875;
havoc _spender_s3875;
havoc remaining_s3875;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call balance_s3837 := balanceOf_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3837);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call success_s3846 := transfer_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s3846, _value_s3846);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call success_s3857 := transferFrom_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s3857, _to_s3857, _value_s3857);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call success_s3866 := approve_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s3866, _value_s3866);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call remaining_s3875 := allowance_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3875, _spender_s3875);
}
}
}

implementation BoogieEntry_IPollManagedFund()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
assume ((now) >= (0));
assume ((DType[this]) == (IPollManagedFund));
gas := (gas) - (53000);
call IPollManagedFund_IPollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}
}

implementation BoogieEntry_ISimpleCrowdsale()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
assume ((now) >= (0));
assume ((DType[this]) == (ISimpleCrowdsale));
gas := (gas) - (53000);
call ISimpleCrowdsale_ISimpleCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}
}

implementation BoogieEntry_ITokenEventListener()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
assume ((now) >= (0));
assume (((DType[this]) == (ITokenEventListener)) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call ITokenEventListener_ITokenEventListener__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}
}

implementation BoogieEntry_ManagedToken()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owner_s3760: Ref;
var __ret_0_balanceOf: int;
var _to_s2557: Ref;
var _value_s2557: int;
var __ret_0_transfer: bool;
var _from_s2611: Ref;
var _to_s2611: Ref;
var _value_s2611: int;
var __ret_0_transferFrom: bool;
var _spender_s3775: Ref;
var _value_s3775: int;
var __ret_0_approve: bool;
var _owner_s3819: Ref;
var _spender_s3819: Ref;
var __ret_0_allowance: int;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var _listener_s2486: Ref;
var _owners_s2486: Ref;
var _allowTransfers_s2517: bool;
var _listener_s2542: Ref;
var _to_s2704: Ref;
var _value_s2704: int;
var _from_s2756: Ref;
var _value_s2756: int;
var _spender_s2797: Ref;
var _addedValue_s2797: int;
var __ret_0_increaseApproval: bool;
var _spender_s2857: Ref;
var _subtractedValue_s2857: int;
var __ret_0_decreaseApproval: bool;
var __ret_0_finishIssuance: bool;
var tmpNow: int;
assume ((now) >= (0));
assume ((DType[this]) == (ManagedToken));
call _owners_s2486 := FreshRefGenerator__success();
gas := (gas) - (53000);
call ManagedToken_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _listener_s2486, _owners_s2486);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
  // invariant (HoudiniB1_ManagedToken) ==> ((manager_MultiOwnable[this]) == (null));
  // invariant (HoudiniB2_ManagedToken) ==> ((manager_MultiOwnable[this]) != (null));
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owner_s3760;
havoc __ret_0_balanceOf;
havoc _to_s2557;
havoc _value_s2557;
havoc __ret_0_transfer;
havoc _from_s2611;
havoc _to_s2611;
havoc _value_s2611;
havoc __ret_0_transferFrom;
havoc _spender_s3775;
havoc _value_s3775;
havoc __ret_0_approve;
havoc _owner_s3819;
havoc _spender_s3819;
havoc __ret_0_allowance;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc _listener_s2486;
havoc _owners_s2486;
havoc _allowTransfers_s2517;
havoc _listener_s2542;
havoc _to_s2704;
havoc _value_s2704;
havoc _from_s2756;
havoc _value_s2756;
havoc _spender_s2797;
havoc _addedValue_s2797;
havoc __ret_0_increaseApproval;
havoc _spender_s2857;
havoc _subtractedValue_s2857;
havoc __ret_0_decreaseApproval;
havoc __ret_0_finishIssuance;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (14)) {
gas := (gas) - (21000);
call __ret_0_balanceOf := balanceOf_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3760);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call __ret_0_transfer := transfer_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _to_s2557, _value_s2557);
} else if ((choice) == (12)) {
gas := (gas) - (21000);
call __ret_0_transferFrom := transferFrom_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _from_s2611, _to_s2611, _value_s2611);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call __ret_0_approve := approve_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_allowance := allowance_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3819, _spender_s3819);
} else if ((choice) == (9)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call setAllowTransfers_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _allowTransfers_s2517);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call setListener_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _listener_s2542);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call issue_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _to_s2704, _value_s2704);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call destroy_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _from_s2756, _value_s2756);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call __ret_0_increaseApproval := increaseApproval_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _spender_s2797, _addedValue_s2797);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_decreaseApproval := decreaseApproval_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _spender_s2857, _subtractedValue_s2857);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_finishIssuance := finishIssuance_ManagedToken(this, msgsender_MSG, msgvalue_MSG);
}
}
}

implementation BoogieEntry_MultiOwnable()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var tmpNow: int;
assume ((now) >= (0));
assume (((((DType[this]) == (Fund)) || ((DType[this]) == (ManagedToken))) || ((DType[this]) == (MultiOwnable))) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call MultiOwnable_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
  // invariant (HoudiniB1_MultiOwnable) ==> ((manager_MultiOwnable[this]) == (null));
  // invariant (HoudiniB2_MultiOwnable) ==> ((manager_MultiOwnable[this]) != (null));
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (2)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
}
}
}

implementation main()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var year_s676: int;
var __ret_0_isLeapYear: bool;
var year2_s704: int;
var __ret_0_leapYearsBefore: int;
var month_s774: int;
var year_s774: int;
var __ret_0_getDaysInMonth: int;
var timestamp_s1031: int;
var __ret_0_getYear: int;
var timestamp_s1044: int;
var __ret_0_getMonth: int;
var timestamp_s1057: int;
var __ret_0_getDay: int;
var timestamp_s1076: int;
var __ret_0_getHour: int;
var timestamp_s1093: int;
var __ret_0_getMinute: int;
var timestamp_s1107: int;
var __ret_0_getSecond: int;
var timestamp_s1126: int;
var __ret_0_getWeekday: int;
var year_s1153: int;
var month_s1153: int;
var day_s1153: int;
var timestamp_s1153: int;
var year_s1180: int;
var month_s1180: int;
var day_s1180: int;
var hour_s1180: int;
var timestamp_s1180: int;
var year_s1207: int;
var month_s1207: int;
var day_s1207: int;
var hour_s1207: int;
var minute_s1207: int;
var timestamp_s1207: int;
var year_s1395: int;
var month_s1395: int;
var day_s1395: int;
var hour_s1395: int;
var minute_s1395: int;
var second_s1395: int;
var timestamp_s1395: int;
var contributor_s1669: Ref;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var _teamWallet_s1547: Ref;
var _referralTokenWallet_s1547: Ref;
var _foundationTokenWallet_s1547: Ref;
var _companyTokenWallet_s1547: Ref;
var _reserveTokenWallet_s1547: Ref;
var _bountyTokenWallet_s1547: Ref;
var _advisorTokenWallet_s1547: Ref;
var _refundManager_s1547: Ref;
var _owners_s1547: Ref;
var __ret_0_canWithdraw: bool;
var _crowdsaleAddress_s1592: Ref;
var _tokenAddress_s1616: Ref;
var _lockedTokenAddress_s1638: Ref;
var contributorAddress_s1850: Ref;
var __ret_0_getCurrentTapAmount: int;
var agree_s352: bool;
var _tap_s352: int;
var agree_s589: bool;
var _from_s211: Ref;
var __arg_1_onTokenTransfer: Ref;
var _value_s211: int;
var _teamWallet_s110: Ref;
var _referralTokenWallet_s110: Ref;
var _foundationTokenWallet_s110: Ref;
var _companyTokenWallet_s110: Ref;
var _reserveTokenWallet_s110: Ref;
var _bountyTokenWallet_s110: Ref;
var _advisorTokenWallet_s110: Ref;
var _refundManager_s110: Ref;
var _owners_s110: Ref;
var tapIncPerc_s317: int;
var tmpNow: int;

assume (null == 0);

assume ((now) >= (0));
assume ((DType[this]) == (PollManagedFund));
call _owners_s110 := FreshRefGenerator__success();
gas := (gas) - (53000);
call PollManagedFund_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
  // invariant (HoudiniB1_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (null));
  // invariant (HoudiniB2_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (null));
  // invariant (HoudiniB3_PollManagedFund) ==> ((teamWallet_Fund[this]) == (null));
  // invariant (HoudiniB4_PollManagedFund) ==> ((teamWallet_Fund[this]) != (null));
  // invariant (HoudiniB5_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB6_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB7_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB8_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB9_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB10_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB11_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB12_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB13_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB14_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB15_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) == (null));
  // invariant (HoudiniB16_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) != (null));
  // invariant (HoudiniB17_PollManagedFund) ==> ((lockedTokenAddress_Fund[this]) == (null));
  // invariant (HoudiniB18_PollManagedFund) ==> ((lockedTokenAddress_Fund[this]) != (null));
  // invariant (HoudiniB19_PollManagedFund) ==> ((refundManager_Fund[this]) == (null));
  // invariant (HoudiniB20_PollManagedFund) ==> ((refundManager_Fund[this]) != (null));
  // invariant (HoudiniB21_PollManagedFund) ==> ((crowdsaleAddress_Fund[this]) == (null));
  // invariant (HoudiniB22_PollManagedFund) ==> ((crowdsaleAddress_Fund[this]) != (null));
  // invariant (HoudiniB23_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (teamWallet_Fund[this]));
  // invariant (HoudiniB24_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (teamWallet_Fund[this]));
  // invariant (HoudiniB25_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB26_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB27_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB28_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB29_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB30_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB31_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB32_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB33_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB34_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB35_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB36_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB37_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB38_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB39_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB40_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB41_PollManagedFund) ==> ((manager_MultiOwnable[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB42_PollManagedFund) ==> ((manager_MultiOwnable[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB43_PollManagedFund) ==> ((teamWallet_Fund[this]) == (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB44_PollManagedFund) ==> ((teamWallet_Fund[this]) != (referralTokenWallet_Fund[this]));
  // invariant (HoudiniB45_PollManagedFund) ==> ((teamWallet_Fund[this]) == (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB46_PollManagedFund) ==> ((teamWallet_Fund[this]) != (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB47_PollManagedFund) ==> ((teamWallet_Fund[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB48_PollManagedFund) ==> ((teamWallet_Fund[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB49_PollManagedFund) ==> ((teamWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB50_PollManagedFund) ==> ((teamWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB51_PollManagedFund) ==> ((teamWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB52_PollManagedFund) ==> ((teamWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB53_PollManagedFund) ==> ((teamWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB54_PollManagedFund) ==> ((teamWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB55_PollManagedFund) ==> ((teamWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB56_PollManagedFund) ==> ((teamWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB57_PollManagedFund) ==> ((teamWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB58_PollManagedFund) ==> ((teamWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB59_PollManagedFund) ==> ((teamWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB60_PollManagedFund) ==> ((teamWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB61_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB62_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (foundationTokenWallet_Fund[this]));
  // invariant (HoudiniB63_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB64_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB65_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB66_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB67_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB68_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB69_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB70_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB71_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB72_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB73_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB74_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB75_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB76_PollManagedFund) ==> ((referralTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB77_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB78_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (reserveTokenWallet_Fund[this]));
  // invariant (HoudiniB79_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB80_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB81_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB82_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB83_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB84_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB85_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB86_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB87_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB88_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB89_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB90_PollManagedFund) ==> ((foundationTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB91_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) == (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB92_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) != (bountyTokenWallet_Fund[this]));
  // invariant (HoudiniB93_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB94_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB95_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB96_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB97_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB98_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB99_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB100_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB101_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB102_PollManagedFund) ==> ((reserveTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB103_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) == (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB104_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) != (companyTokenWallet_Fund[this]));
  // invariant (HoudiniB105_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB106_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB107_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB108_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB109_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB110_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB111_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB112_PollManagedFund) ==> ((bountyTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB113_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) == (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB114_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) != (advisorTokenWallet_Fund[this]));
  // invariant (HoudiniB115_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB116_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB117_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB118_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB119_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB120_PollManagedFund) ==> ((companyTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB121_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) == (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB122_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) != (lockedTokenAddress_Fund[this]));
  // invariant (HoudiniB123_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB124_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB125_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB126_PollManagedFund) ==> ((advisorTokenWallet_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB127_PollManagedFund) ==> ((lockedTokenAddress_Fund[this]) == (refundManager_Fund[this]));
  // invariant (HoudiniB128_PollManagedFund) ==> ((lockedTokenAddress_Fund[this]) != (refundManager_Fund[this]));
  // invariant (HoudiniB129_PollManagedFund) ==> ((lockedTokenAddress_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB130_PollManagedFund) ==> ((lockedTokenAddress_Fund[this]) != (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB131_PollManagedFund) ==> ((refundManager_Fund[this]) == (crowdsaleAddress_Fund[this]));
  // invariant (HoudiniB132_PollManagedFund) ==> ((refundManager_Fund[this]) != (crowdsaleAddress_Fund[this]));
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc year_s676;
havoc __ret_0_isLeapYear;
havoc year2_s704;
havoc __ret_0_leapYearsBefore;
havoc month_s774;
havoc year_s774;
havoc __ret_0_getDaysInMonth;
havoc timestamp_s1031;
havoc __ret_0_getYear;
havoc timestamp_s1044;
havoc __ret_0_getMonth;
havoc timestamp_s1057;
havoc __ret_0_getDay;
havoc timestamp_s1076;
havoc __ret_0_getHour;
havoc timestamp_s1093;
havoc __ret_0_getMinute;
havoc timestamp_s1107;
havoc __ret_0_getSecond;
havoc timestamp_s1126;
havoc __ret_0_getWeekday;
havoc year_s1153;
havoc month_s1153;
havoc day_s1153;
havoc timestamp_s1153;
havoc year_s1180;
havoc month_s1180;
havoc day_s1180;
havoc hour_s1180;
havoc timestamp_s1180;
havoc year_s1207;
havoc month_s1207;
havoc day_s1207;
havoc hour_s1207;
havoc minute_s1207;
havoc timestamp_s1207;
havoc year_s1395;
havoc month_s1395;
havoc day_s1395;
havoc hour_s1395;
havoc minute_s1395;
havoc second_s1395;
havoc timestamp_s1395;
havoc contributor_s1669;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc _teamWallet_s1547;
havoc _referralTokenWallet_s1547;
havoc _foundationTokenWallet_s1547;
havoc _companyTokenWallet_s1547;
havoc _reserveTokenWallet_s1547;
havoc _bountyTokenWallet_s1547;
havoc _advisorTokenWallet_s1547;
havoc _refundManager_s1547;
havoc _owners_s1547;
havoc __ret_0_canWithdraw;
havoc _crowdsaleAddress_s1592;
havoc _tokenAddress_s1616;
havoc _lockedTokenAddress_s1638;
havoc contributorAddress_s1850;
havoc __ret_0_getCurrentTapAmount;
havoc agree_s352;
havoc _tap_s352;
havoc agree_s589;
havoc _from_s211;
havoc __arg_1_onTokenTransfer;
havoc _value_s211;
havoc _teamWallet_s110;
havoc _referralTokenWallet_s110;
havoc _foundationTokenWallet_s110;
havoc _companyTokenWallet_s110;
havoc _reserveTokenWallet_s110;
havoc _bountyTokenWallet_s110;
havoc _advisorTokenWallet_s110;
havoc _refundManager_s110;
havoc _owners_s110;
havoc tapIncPerc_s317;
havoc tmpNow;
havoc gas;

assume(msgvalue_MSG >= 0);
assume(msgsender_MSG != null && msgsender_MSG != this);

assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (35)) {
gas := (gas) - (21000);
call __ret_0_isLeapYear := isLeapYear_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s676);
} else if ((choice) == (34)) {
gas := (gas) - (21000);
call __ret_0_leapYearsBefore := leapYearsBefore_DateTime(this, msgsender_MSG, msgvalue_MSG, year2_s704);
} else if ((choice) == (33)) {
gas := (gas) - (21000);
call __ret_0_getDaysInMonth := getDaysInMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, month_s774, year_s774);
} else if ((choice) == (32)) {
gas := (gas) - (21000);
call __ret_0_getYear := getYear_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1031);
} else if ((choice) == (31)) {
gas := (gas) - (21000);
call __ret_0_getMonth := getMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
} else if ((choice) == (30)) {
gas := (gas) - (21000);
call __ret_0_getDay := getDay_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
} else if ((choice) == (29)) {
gas := (gas) - (21000);
call __ret_0_getHour := getHour_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1076);
} else if ((choice) == (28)) {
gas := (gas) - (21000);
call __ret_0_getMinute := getMinute_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1093);
} else if ((choice) == (27)) {
gas := (gas) - (21000);
call __ret_0_getSecond := getSecond_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1107);
} else if ((choice) == (26)) {
gas := (gas) - (21000);
call __ret_0_getWeekday := getWeekday_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1126);
} else if ((choice) == (25)) {
gas := (gas) - (21000);
call timestamp_s1153 := toTimestamp3_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153);
} else if ((choice) == (24)) {
gas := (gas) - (21000);
call timestamp_s1180 := toTimestamp4_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180);
} else if ((choice) == (23)) {
gas := (gas) - (21000);
call timestamp_s1207 := toTimestamp5_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207);
} else if ((choice) == (22)) {
gas := (gas) - (21000);
call timestamp_s1395 := toTimestamp6_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1395, month_s1395, day_s1395, hour_s1395, minute_s1395, second_s1395);
} else if ((choice) == (21)) {
gas := (gas) - (21000);
call processContribution_Fund(this, msgsender_MSG, msgvalue_MSG, contributor_s1669);
} else if ((choice) == (20)) {
gas := (gas) - (21000);
call onCrowdsaleEnd_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (19)) {
gas := (gas) - (21000);
call enableCrowdsaleRefund_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (18)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (17)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (16)) {
gas := (gas) - (21000);
call __ret_0_canWithdraw := canWithdraw_PollManagedFund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (15)) {
gas := (gas) - (21000);
call setCrowdsaleAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _crowdsaleAddress_s1592);
} else if ((choice) == (14)) {
gas := (gas) - (21000);
call setTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s1616);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call setLockedTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _lockedTokenAddress_s1638);
} else if ((choice) == (12)) {
gas := (gas) - (21000);
call refundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call autoRefundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG, contributorAddress_s1850);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_getCurrentTapAmount := getCurrentTapAmount_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (9)) {
gas := (gas) - (21000);
call firstWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call withdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call refundTokenHolder_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call onTapPollFinish_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, agree_s352, _tap_s352);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call onRefundPollFinish_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, agree_s589);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call onTokenTransfer_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, _from_s211, __arg_1_onTokenTransfer, _value_s211);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call createTapPoll_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, tapIncPerc_s317);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call createRefundPoll_PollManagedFund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call forceRefund_PollManagedFund(this, msgsender_MSG, msgvalue_MSG);
}
}
}

implementation BoogieEntry_RefundPoll()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _tokenAddress_s3219: Ref;
var _fundAddress_s3219: Ref;
var _startTime_s3219: int;
var _endTime_s3219: int;
var _checkTransfersAfterEnd_s3219: bool;
var agree_s3313: bool;
var tokenHolder_s3502: Ref;
var amount_s3502: int;
var __ret_0_tryToFinalize: bool;
var __ret_0_isNowApproved: bool;
var _tokenAddress_s2198: Ref;
var _fundAddress_s2198: Ref;
var _startTime_s2198: int;
var _endTime_s2198: int;
var _holdEndTime_s2198: int;
var _checkTransfersAfterEnd_s2198: bool;
var tmpNow: int;
assume ((now) >= (0));
assume ((DType[this]) == (RefundPoll));
gas := (gas) - (53000);
call RefundPoll_RefundPoll(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _holdEndTime_s2198, _checkTransfersAfterEnd_s2198);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
  // invariant (HoudiniB1_RefundPoll) ==> ((fundAddress_BasePoll[this]) == (null));
  // invariant (HoudiniB2_RefundPoll) ==> ((fundAddress_BasePoll[this]) != (null));
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _tokenAddress_s3219;
havoc _fundAddress_s3219;
havoc _startTime_s3219;
havoc _endTime_s3219;
havoc _checkTransfersAfterEnd_s3219;
havoc agree_s3313;
havoc tokenHolder_s3502;
havoc amount_s3502;
havoc __ret_0_tryToFinalize;
havoc __ret_0_isNowApproved;
havoc _tokenAddress_s2198;
havoc _fundAddress_s2198;
havoc _startTime_s2198;
havoc _endTime_s2198;
havoc _holdEndTime_s2198;
havoc _checkTransfersAfterEnd_s2198;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call vote_BasePoll(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call revokeVote_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call onTokenTransfer_BasePoll(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_tryToFinalize := tryToFinalize_RefundPoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_isNowApproved := isNowApproved_BasePoll(this, msgsender_MSG, msgvalue_MSG);
}
}
}

implementation BoogieEntry_SafeMath()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
assume ((now) >= (0));
assume (((((((((DType[this]) == (BasePoll)) || ((DType[this]) == (ERC20Token))) || ((DType[this]) == (Fund))) || ((DType[this]) == (ManagedToken))) || ((DType[this]) == (PollManagedFund))) || ((DType[this]) == (RefundPoll))) || ((DType[this]) == (SafeMath))) || ((DType[this]) == (TapPoll)));
gas := (gas) - (53000);
call SafeMath_SafeMath(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}
}

implementation BoogieEntry_TapPoll()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _tokenAddress_s3219: Ref;
var _fundAddress_s3219: Ref;
var _startTime_s3219: int;
var _endTime_s3219: int;
var _checkTransfersAfterEnd_s3219: bool;
var agree_s3313: bool;
var tokenHolder_s3502: Ref;
var amount_s3502: int;
var __ret_0_tryToFinalize: bool;
var __ret_0_isNowApproved: bool;
var _tap_s2316: int;
var _tokenAddress_s2316: Ref;
var _fundAddress_s2316: Ref;
var _startTime_s2316: int;
var _endTime_s2316: int;
var _minTokensPerc_s2316: int;
var __ret_0_getVotedTokensPerc: int;
var tmpNow: int;
assume ((now) >= (0));
assume ((DType[this]) == (TapPoll));
gas := (gas) - (53000);
call TapPoll_TapPoll(this, msgsender_MSG, msgvalue_MSG, _tap_s2316, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, _minTokensPerc_s2316);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
  // invariant (HoudiniB1_TapPoll) ==> ((fundAddress_BasePoll[this]) == (null));
  // invariant (HoudiniB2_TapPoll) ==> ((fundAddress_BasePoll[this]) != (null));
{
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _tokenAddress_s3219;
havoc _fundAddress_s3219;
havoc _startTime_s3219;
havoc _endTime_s3219;
havoc _checkTransfersAfterEnd_s3219;
havoc agree_s3313;
havoc tokenHolder_s3502;
havoc amount_s3502;
havoc __ret_0_tryToFinalize;
havoc __ret_0_isNowApproved;
havoc _tap_s2316;
havoc _tokenAddress_s2316;
havoc _fundAddress_s2316;
havoc _startTime_s2316;
havoc _endTime_s2316;
havoc _minTokensPerc_s2316;
havoc __ret_0_getVotedTokensPerc;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (6)) {
gas := (gas) - (21000);
call vote_BasePoll(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call revokeVote_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call onTokenTransfer_BasePoll(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call __ret_0_tryToFinalize := tryToFinalize_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_isNowApproved := isNowApproved_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_getVotedTokensPerc := getVotedTokensPerc_TapPoll(this, msgsender_MSG, msgvalue_MSG);
}
}
}

implementation CorralChoice_BasePoll(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _tokenAddress_s3219: Ref;
var _fundAddress_s3219: Ref;
var _startTime_s3219: int;
var _endTime_s3219: int;
var _checkTransfersAfterEnd_s3219: bool;
var agree_s3313: bool;
var tokenHolder_s3502: Ref;
var amount_s3502: int;
var __ret_0_tryToFinalize: bool;
var __ret_0_isNowApproved: bool;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _tokenAddress_s3219;
havoc _fundAddress_s3219;
havoc _startTime_s3219;
havoc _endTime_s3219;
havoc _checkTransfersAfterEnd_s3219;
havoc agree_s3313;
havoc tokenHolder_s3502;
havoc amount_s3502;
havoc __ret_0_tryToFinalize;
havoc __ret_0_isNowApproved;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call vote_BasePoll(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call revokeVote_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call onTokenTransfer_BasePoll(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_tryToFinalize := tryToFinalize_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_isNowApproved := isNowApproved_BasePoll(this, msgsender_MSG, msgvalue_MSG);
}
}

implementation CorralEntry_BasePoll()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var _tokenAddress_s3219: Ref;
var _fundAddress_s3219: Ref;
var _startTime_s3219: int;
var _endTime_s3219: int;
var _checkTransfersAfterEnd_s3219: bool;
assume ((now) >= (0));
assume ((((DType[this]) == (BasePoll)) || ((DType[this]) == (RefundPoll))) || ((DType[this]) == (TapPoll)));
gas := (gas) - (53000);
call BasePoll_BasePoll(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s3219, _fundAddress_s3219, _startTime_s3219, _endTime_s3219, _checkTransfersAfterEnd_s3219);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_BasePoll(this);
}
}

implementation CorralChoice_DateTime(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var year_s676: int;
var __ret_0_isLeapYear: bool;
var year2_s704: int;
var __ret_0_leapYearsBefore: int;
var month_s774: int;
var year_s774: int;
var __ret_0_getDaysInMonth: int;
var timestamp_s1031: int;
var __ret_0_getYear: int;
var timestamp_s1044: int;
var __ret_0_getMonth: int;
var timestamp_s1057: int;
var __ret_0_getDay: int;
var timestamp_s1076: int;
var __ret_0_getHour: int;
var timestamp_s1093: int;
var __ret_0_getMinute: int;
var timestamp_s1107: int;
var __ret_0_getSecond: int;
var timestamp_s1126: int;
var __ret_0_getWeekday: int;
var year_s1153: int;
var month_s1153: int;
var day_s1153: int;
var timestamp_s1153: int;
var year_s1180: int;
var month_s1180: int;
var day_s1180: int;
var hour_s1180: int;
var timestamp_s1180: int;
var year_s1207: int;
var month_s1207: int;
var day_s1207: int;
var hour_s1207: int;
var minute_s1207: int;
var timestamp_s1207: int;
var year_s1395: int;
var month_s1395: int;
var day_s1395: int;
var hour_s1395: int;
var minute_s1395: int;
var second_s1395: int;
var timestamp_s1395: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc year_s676;
havoc __ret_0_isLeapYear;
havoc year2_s704;
havoc __ret_0_leapYearsBefore;
havoc month_s774;
havoc year_s774;
havoc __ret_0_getDaysInMonth;
havoc timestamp_s1031;
havoc __ret_0_getYear;
havoc timestamp_s1044;
havoc __ret_0_getMonth;
havoc timestamp_s1057;
havoc __ret_0_getDay;
havoc timestamp_s1076;
havoc __ret_0_getHour;
havoc timestamp_s1093;
havoc __ret_0_getMinute;
havoc timestamp_s1107;
havoc __ret_0_getSecond;
havoc timestamp_s1126;
havoc __ret_0_getWeekday;
havoc year_s1153;
havoc month_s1153;
havoc day_s1153;
havoc timestamp_s1153;
havoc year_s1180;
havoc month_s1180;
havoc day_s1180;
havoc hour_s1180;
havoc timestamp_s1180;
havoc year_s1207;
havoc month_s1207;
havoc day_s1207;
havoc hour_s1207;
havoc minute_s1207;
havoc timestamp_s1207;
havoc year_s1395;
havoc month_s1395;
havoc day_s1395;
havoc hour_s1395;
havoc minute_s1395;
havoc second_s1395;
havoc timestamp_s1395;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (14)) {
gas := (gas) - (21000);
call __ret_0_isLeapYear := isLeapYear_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s676);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call __ret_0_leapYearsBefore := leapYearsBefore_DateTime(this, msgsender_MSG, msgvalue_MSG, year2_s704);
} else if ((choice) == (12)) {
gas := (gas) - (21000);
call __ret_0_getDaysInMonth := getDaysInMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, month_s774, year_s774);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call __ret_0_getYear := getYear_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1031);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_getMonth := getMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
} else if ((choice) == (9)) {
gas := (gas) - (21000);
call __ret_0_getDay := getDay_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call __ret_0_getHour := getHour_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1076);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call __ret_0_getMinute := getMinute_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1093);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call __ret_0_getSecond := getSecond_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1107);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call __ret_0_getWeekday := getWeekday_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1126);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call timestamp_s1153 := toTimestamp3_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call timestamp_s1180 := toTimestamp4_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call timestamp_s1207 := toTimestamp5_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call timestamp_s1395 := toTimestamp6_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1395, month_s1395, day_s1395, hour_s1395, minute_s1395, second_s1395);
}
}

implementation CorralEntry_DateTime()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume (((DType[this]) == (DateTime)) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call DateTime_DateTime__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_DateTime(this);
}
}

implementation CorralChoice_ERC20Token(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owner_s3760: Ref;
var __ret_0_balanceOf: int;
var _to_s3586: Ref;
var _value_s3586: int;
var __ret_0_transfer: bool;
var _from_s3664: Ref;
var _to_s3664: Ref;
var _value_s3664: int;
var __ret_0_transferFrom: bool;
var _spender_s3775: Ref;
var _value_s3775: int;
var __ret_0_approve: bool;
var _owner_s3819: Ref;
var _spender_s3819: Ref;
var __ret_0_allowance: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owner_s3760;
havoc __ret_0_balanceOf;
havoc _to_s3586;
havoc _value_s3586;
havoc __ret_0_transfer;
havoc _from_s3664;
havoc _to_s3664;
havoc _value_s3664;
havoc __ret_0_transferFrom;
havoc _spender_s3775;
havoc _value_s3775;
havoc __ret_0_approve;
havoc _owner_s3819;
havoc _spender_s3819;
havoc __ret_0_allowance;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call __ret_0_balanceOf := balanceOf_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3760);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call __ret_0_transfer := transfer_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s3586, _value_s3586);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call __ret_0_transferFrom := transferFrom_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s3664, _to_s3664, _value_s3664);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_approve := approve_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_allowance := allowance_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3819, _spender_s3819);
}
}

implementation CorralEntry_ERC20Token()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume (((DType[this]) == (ERC20Token)) || ((DType[this]) == (ManagedToken)));
gas := (gas) - (53000);
call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_ERC20Token(this);
}
}

implementation CorralChoice_Fund(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var contributor_s1669: Ref;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var _teamWallet_s1547: Ref;
var _referralTokenWallet_s1547: Ref;
var _foundationTokenWallet_s1547: Ref;
var _companyTokenWallet_s1547: Ref;
var _reserveTokenWallet_s1547: Ref;
var _bountyTokenWallet_s1547: Ref;
var _advisorTokenWallet_s1547: Ref;
var _refundManager_s1547: Ref;
var _owners_s1547: Ref;
var __ret_0_canWithdraw: bool;
var _crowdsaleAddress_s1592: Ref;
var _tokenAddress_s1616: Ref;
var _lockedTokenAddress_s1638: Ref;
var contributorAddress_s1850: Ref;
var __ret_0_getCurrentTapAmount: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc contributor_s1669;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc _teamWallet_s1547;
havoc _referralTokenWallet_s1547;
havoc _foundationTokenWallet_s1547;
havoc _companyTokenWallet_s1547;
havoc _reserveTokenWallet_s1547;
havoc _bountyTokenWallet_s1547;
havoc _advisorTokenWallet_s1547;
havoc _refundManager_s1547;
havoc _owners_s1547;
havoc __ret_0_canWithdraw;
havoc _crowdsaleAddress_s1592;
havoc _tokenAddress_s1616;
havoc _lockedTokenAddress_s1638;
havoc contributorAddress_s1850;
havoc __ret_0_getCurrentTapAmount;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (15)) {
gas := (gas) - (21000);
call processContribution_Fund(this, msgsender_MSG, msgvalue_MSG, contributor_s1669);
} else if ((choice) == (14)) {
gas := (gas) - (21000);
call onCrowdsaleEnd_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call enableCrowdsaleRefund_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (12)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_canWithdraw := canWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (9)) {
gas := (gas) - (21000);
call setCrowdsaleAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _crowdsaleAddress_s1592);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call setTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s1616);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call setLockedTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _lockedTokenAddress_s1638);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call refundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call autoRefundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG, contributorAddress_s1850);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call __ret_0_getCurrentTapAmount := getCurrentTapAmount_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call firstWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call withdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call refundTokenHolder_Fund(this, msgsender_MSG, msgvalue_MSG);
}
}

implementation CorralEntry_Fund()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var _teamWallet_s1547: Ref;
var _referralTokenWallet_s1547: Ref;
var _foundationTokenWallet_s1547: Ref;
var _companyTokenWallet_s1547: Ref;
var _reserveTokenWallet_s1547: Ref;
var _bountyTokenWallet_s1547: Ref;
var _advisorTokenWallet_s1547: Ref;
var _refundManager_s1547: Ref;
var _owners_s1547: Ref;
assume ((now) >= (0));
assume (((DType[this]) == (Fund)) || ((DType[this]) == (PollManagedFund)));
call _owners_s1547 := FreshRefGenerator__success();
gas := (gas) - (53000);
call Fund_Fund(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s1547, _referralTokenWallet_s1547, _foundationTokenWallet_s1547, _companyTokenWallet_s1547, _reserveTokenWallet_s1547, _bountyTokenWallet_s1547, _advisorTokenWallet_s1547, _refundManager_s1547, _owners_s1547);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_Fund(this);
}
}

implementation CorralChoice_ICrowdsaleFund(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}

implementation CorralEntry_ICrowdsaleFund()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume ((((DType[this]) == (Fund)) || ((DType[this]) == (ICrowdsaleFund))) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call ICrowdsaleFund_ICrowdsaleFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_ICrowdsaleFund(this);
}
}

implementation CorralChoice_IERC20Token(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owner_s3837: Ref;
var balance_s3837: int;
var _to_s3846: Ref;
var _value_s3846: int;
var success_s3846: bool;
var _from_s3857: Ref;
var _to_s3857: Ref;
var _value_s3857: int;
var success_s3857: bool;
var _spender_s3866: Ref;
var _value_s3866: int;
var success_s3866: bool;
var _owner_s3875: Ref;
var _spender_s3875: Ref;
var remaining_s3875: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owner_s3837;
havoc balance_s3837;
havoc _to_s3846;
havoc _value_s3846;
havoc success_s3846;
havoc _from_s3857;
havoc _to_s3857;
havoc _value_s3857;
havoc success_s3857;
havoc _spender_s3866;
havoc _value_s3866;
havoc success_s3866;
havoc _owner_s3875;
havoc _spender_s3875;
havoc remaining_s3875;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call balance_s3837 := balanceOf_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3837);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call success_s3846 := transfer_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s3846, _value_s3846);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call success_s3857 := transferFrom_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _from_s3857, _to_s3857, _value_s3857);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call success_s3866 := approve_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s3866, _value_s3866);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call remaining_s3875 := allowance_IERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3875, _spender_s3875);
}
}

implementation CorralEntry_IERC20Token()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume ((((DType[this]) == (ERC20Token)) || ((DType[this]) == (IERC20Token))) || ((DType[this]) == (ManagedToken)));
gas := (gas) - (53000);
call IERC20Token_IERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_IERC20Token(this);
}
}

implementation CorralChoice_IPollManagedFund(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}

implementation CorralEntry_IPollManagedFund()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume ((DType[this]) == (IPollManagedFund));
gas := (gas) - (53000);
call IPollManagedFund_IPollManagedFund__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_IPollManagedFund(this);
}
}

implementation CorralChoice_ISimpleCrowdsale(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}

implementation CorralEntry_ISimpleCrowdsale()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume ((DType[this]) == (ISimpleCrowdsale));
gas := (gas) - (53000);
call ISimpleCrowdsale_ISimpleCrowdsale__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_ISimpleCrowdsale(this);
}
}

implementation CorralChoice_ITokenEventListener(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}

implementation CorralEntry_ITokenEventListener()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume (((DType[this]) == (ITokenEventListener)) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call ITokenEventListener_ITokenEventListener__success(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_ITokenEventListener(this);
}
}

implementation CorralChoice_ManagedToken(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owner_s3760: Ref;
var __ret_0_balanceOf: int;
var _to_s2557: Ref;
var _value_s2557: int;
var __ret_0_transfer: bool;
var _from_s2611: Ref;
var _to_s2611: Ref;
var _value_s2611: int;
var __ret_0_transferFrom: bool;
var _spender_s3775: Ref;
var _value_s3775: int;
var __ret_0_approve: bool;
var _owner_s3819: Ref;
var _spender_s3819: Ref;
var __ret_0_allowance: int;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var _listener_s2486: Ref;
var _owners_s2486: Ref;
var _allowTransfers_s2517: bool;
var _listener_s2542: Ref;
var _to_s2704: Ref;
var _value_s2704: int;
var _from_s2756: Ref;
var _value_s2756: int;
var _spender_s2797: Ref;
var _addedValue_s2797: int;
var __ret_0_increaseApproval: bool;
var _spender_s2857: Ref;
var _subtractedValue_s2857: int;
var __ret_0_decreaseApproval: bool;
var __ret_0_finishIssuance: bool;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owner_s3760;
havoc __ret_0_balanceOf;
havoc _to_s2557;
havoc _value_s2557;
havoc __ret_0_transfer;
havoc _from_s2611;
havoc _to_s2611;
havoc _value_s2611;
havoc __ret_0_transferFrom;
havoc _spender_s3775;
havoc _value_s3775;
havoc __ret_0_approve;
havoc _owner_s3819;
havoc _spender_s3819;
havoc __ret_0_allowance;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc _listener_s2486;
havoc _owners_s2486;
havoc _allowTransfers_s2517;
havoc _listener_s2542;
havoc _to_s2704;
havoc _value_s2704;
havoc _from_s2756;
havoc _value_s2756;
havoc _spender_s2797;
havoc _addedValue_s2797;
havoc __ret_0_increaseApproval;
havoc _spender_s2857;
havoc _subtractedValue_s2857;
havoc __ret_0_decreaseApproval;
havoc __ret_0_finishIssuance;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (14)) {
gas := (gas) - (21000);
call __ret_0_balanceOf := balanceOf_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3760);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call __ret_0_transfer := transfer_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _to_s2557, _value_s2557);
} else if ((choice) == (12)) {
gas := (gas) - (21000);
call __ret_0_transferFrom := transferFrom_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _from_s2611, _to_s2611, _value_s2611);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call __ret_0_approve := approve_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s3775, _value_s3775);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_allowance := allowance_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _owner_s3819, _spender_s3819);
} else if ((choice) == (9)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call setAllowTransfers_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _allowTransfers_s2517);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call setListener_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _listener_s2542);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call issue_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _to_s2704, _value_s2704);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call destroy_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _from_s2756, _value_s2756);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call __ret_0_increaseApproval := increaseApproval_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _spender_s2797, _addedValue_s2797);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_decreaseApproval := decreaseApproval_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _spender_s2857, _subtractedValue_s2857);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_finishIssuance := finishIssuance_ManagedToken(this, msgsender_MSG, msgvalue_MSG);
}
}

implementation CorralEntry_ManagedToken()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var _listener_s2486: Ref;
var _owners_s2486: Ref;
assume ((now) >= (0));
assume ((DType[this]) == (ManagedToken));
call _owners_s2486 := FreshRefGenerator__success();
gas := (gas) - (53000);
call ManagedToken_ManagedToken(this, msgsender_MSG, msgvalue_MSG, _listener_s2486, _owners_s2486);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_ManagedToken(this);
}
}

implementation CorralChoice_MultiOwnable(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (2)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
}
}

implementation CorralEntry_MultiOwnable()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume (((((DType[this]) == (Fund)) || ((DType[this]) == (ManagedToken))) || ((DType[this]) == (MultiOwnable))) || ((DType[this]) == (PollManagedFund)));
gas := (gas) - (53000);
call MultiOwnable_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_MultiOwnable(this);
}
}

implementation CorralChoice_PollManagedFund(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var year_s676: int;
var __ret_0_isLeapYear: bool;
var year2_s704: int;
var __ret_0_leapYearsBefore: int;
var month_s774: int;
var year_s774: int;
var __ret_0_getDaysInMonth: int;
var timestamp_s1031: int;
var __ret_0_getYear: int;
var timestamp_s1044: int;
var __ret_0_getMonth: int;
var timestamp_s1057: int;
var __ret_0_getDay: int;
var timestamp_s1076: int;
var __ret_0_getHour: int;
var timestamp_s1093: int;
var __ret_0_getMinute: int;
var timestamp_s1107: int;
var __ret_0_getSecond: int;
var timestamp_s1126: int;
var __ret_0_getWeekday: int;
var year_s1153: int;
var month_s1153: int;
var day_s1153: int;
var timestamp_s1153: int;
var year_s1180: int;
var month_s1180: int;
var day_s1180: int;
var hour_s1180: int;
var timestamp_s1180: int;
var year_s1207: int;
var month_s1207: int;
var day_s1207: int;
var hour_s1207: int;
var minute_s1207: int;
var timestamp_s1207: int;
var year_s1395: int;
var month_s1395: int;
var day_s1395: int;
var hour_s1395: int;
var minute_s1395: int;
var second_s1395: int;
var timestamp_s1395: int;
var contributor_s1669: Ref;
var _owners_s2931: Ref;
var __ret_0_getOwners: Ref;
var _teamWallet_s1547: Ref;
var _referralTokenWallet_s1547: Ref;
var _foundationTokenWallet_s1547: Ref;
var _companyTokenWallet_s1547: Ref;
var _reserveTokenWallet_s1547: Ref;
var _bountyTokenWallet_s1547: Ref;
var _advisorTokenWallet_s1547: Ref;
var _refundManager_s1547: Ref;
var _owners_s1547: Ref;
var __ret_0_canWithdraw: bool;
var _crowdsaleAddress_s1592: Ref;
var _tokenAddress_s1616: Ref;
var _lockedTokenAddress_s1638: Ref;
var contributorAddress_s1850: Ref;
var __ret_0_getCurrentTapAmount: int;
var agree_s352: bool;
var _tap_s352: int;
var agree_s589: bool;
var _from_s211: Ref;
var __arg_1_onTokenTransfer: Ref;
var _value_s211: int;
var _teamWallet_s110: Ref;
var _referralTokenWallet_s110: Ref;
var _foundationTokenWallet_s110: Ref;
var _companyTokenWallet_s110: Ref;
var _reserveTokenWallet_s110: Ref;
var _bountyTokenWallet_s110: Ref;
var _advisorTokenWallet_s110: Ref;
var _refundManager_s110: Ref;
var _owners_s110: Ref;
var tapIncPerc_s317: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc year_s676;
havoc __ret_0_isLeapYear;
havoc year2_s704;
havoc __ret_0_leapYearsBefore;
havoc month_s774;
havoc year_s774;
havoc __ret_0_getDaysInMonth;
havoc timestamp_s1031;
havoc __ret_0_getYear;
havoc timestamp_s1044;
havoc __ret_0_getMonth;
havoc timestamp_s1057;
havoc __ret_0_getDay;
havoc timestamp_s1076;
havoc __ret_0_getHour;
havoc timestamp_s1093;
havoc __ret_0_getMinute;
havoc timestamp_s1107;
havoc __ret_0_getSecond;
havoc timestamp_s1126;
havoc __ret_0_getWeekday;
havoc year_s1153;
havoc month_s1153;
havoc day_s1153;
havoc timestamp_s1153;
havoc year_s1180;
havoc month_s1180;
havoc day_s1180;
havoc hour_s1180;
havoc timestamp_s1180;
havoc year_s1207;
havoc month_s1207;
havoc day_s1207;
havoc hour_s1207;
havoc minute_s1207;
havoc timestamp_s1207;
havoc year_s1395;
havoc month_s1395;
havoc day_s1395;
havoc hour_s1395;
havoc minute_s1395;
havoc second_s1395;
havoc timestamp_s1395;
havoc contributor_s1669;
havoc _owners_s2931;
havoc __ret_0_getOwners;
havoc _teamWallet_s1547;
havoc _referralTokenWallet_s1547;
havoc _foundationTokenWallet_s1547;
havoc _companyTokenWallet_s1547;
havoc _reserveTokenWallet_s1547;
havoc _bountyTokenWallet_s1547;
havoc _advisorTokenWallet_s1547;
havoc _refundManager_s1547;
havoc _owners_s1547;
havoc __ret_0_canWithdraw;
havoc _crowdsaleAddress_s1592;
havoc _tokenAddress_s1616;
havoc _lockedTokenAddress_s1638;
havoc contributorAddress_s1850;
havoc __ret_0_getCurrentTapAmount;
havoc agree_s352;
havoc _tap_s352;
havoc agree_s589;
havoc _from_s211;
havoc __arg_1_onTokenTransfer;
havoc _value_s211;
havoc _teamWallet_s110;
havoc _referralTokenWallet_s110;
havoc _foundationTokenWallet_s110;
havoc _companyTokenWallet_s110;
havoc _reserveTokenWallet_s110;
havoc _bountyTokenWallet_s110;
havoc _advisorTokenWallet_s110;
havoc _refundManager_s110;
havoc _owners_s110;
havoc tapIncPerc_s317;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (35)) {
gas := (gas) - (21000);
call __ret_0_isLeapYear := isLeapYear_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s676);
} else if ((choice) == (34)) {
gas := (gas) - (21000);
call __ret_0_leapYearsBefore := leapYearsBefore_DateTime(this, msgsender_MSG, msgvalue_MSG, year2_s704);
} else if ((choice) == (33)) {
gas := (gas) - (21000);
call __ret_0_getDaysInMonth := getDaysInMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, month_s774, year_s774);
} else if ((choice) == (32)) {
gas := (gas) - (21000);
call __ret_0_getYear := getYear_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1031);
} else if ((choice) == (31)) {
gas := (gas) - (21000);
call __ret_0_getMonth := getMonth_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1044);
} else if ((choice) == (30)) {
gas := (gas) - (21000);
call __ret_0_getDay := getDay_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1057);
} else if ((choice) == (29)) {
gas := (gas) - (21000);
call __ret_0_getHour := getHour_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1076);
} else if ((choice) == (28)) {
gas := (gas) - (21000);
call __ret_0_getMinute := getMinute_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1093);
} else if ((choice) == (27)) {
gas := (gas) - (21000);
call __ret_0_getSecond := getSecond_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1107);
} else if ((choice) == (26)) {
gas := (gas) - (21000);
call __ret_0_getWeekday := getWeekday_DateTime(this, msgsender_MSG, msgvalue_MSG, timestamp_s1126);
} else if ((choice) == (25)) {
gas := (gas) - (21000);
call timestamp_s1153 := toTimestamp3_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1153, month_s1153, day_s1153);
} else if ((choice) == (24)) {
gas := (gas) - (21000);
call timestamp_s1180 := toTimestamp4_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1180, month_s1180, day_s1180, hour_s1180);
} else if ((choice) == (23)) {
gas := (gas) - (21000);
call timestamp_s1207 := toTimestamp5_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1207, month_s1207, day_s1207, hour_s1207, minute_s1207);
} else if ((choice) == (22)) {
gas := (gas) - (21000);
call timestamp_s1395 := toTimestamp6_DateTime(this, msgsender_MSG, msgvalue_MSG, year_s1395, month_s1395, day_s1395, hour_s1395, minute_s1395, second_s1395);
} else if ((choice) == (21)) {
gas := (gas) - (21000);
call processContribution_Fund(this, msgsender_MSG, msgvalue_MSG, contributor_s1669);
} else if ((choice) == (20)) {
gas := (gas) - (21000);
call onCrowdsaleEnd_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (19)) {
gas := (gas) - (21000);
call enableCrowdsaleRefund_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (18)) {
call _owners_s2931 := FreshRefGenerator__success();
gas := (gas) - (21000);
call setOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG, _owners_s2931);
} else if ((choice) == (17)) {
gas := (gas) - (21000);
call __ret_0_getOwners := getOwners_MultiOwnable(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (16)) {
gas := (gas) - (21000);
call __ret_0_canWithdraw := canWithdraw_PollManagedFund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (15)) {
gas := (gas) - (21000);
call setCrowdsaleAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _crowdsaleAddress_s1592);
} else if ((choice) == (14)) {
gas := (gas) - (21000);
call setTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s1616);
} else if ((choice) == (13)) {
gas := (gas) - (21000);
call setLockedTokenAddress_Fund(this, msgsender_MSG, msgvalue_MSG, _lockedTokenAddress_s1638);
} else if ((choice) == (12)) {
gas := (gas) - (21000);
call refundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (11)) {
gas := (gas) - (21000);
call autoRefundCrowdsaleContributor_Fund(this, msgsender_MSG, msgvalue_MSG, contributorAddress_s1850);
} else if ((choice) == (10)) {
gas := (gas) - (21000);
call __ret_0_getCurrentTapAmount := getCurrentTapAmount_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (9)) {
gas := (gas) - (21000);
call firstWithdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (8)) {
gas := (gas) - (21000);
call withdraw_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (7)) {
gas := (gas) - (21000);
call refundTokenHolder_Fund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (6)) {
gas := (gas) - (21000);
call onTapPollFinish_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, agree_s352, _tap_s352);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call onRefundPollFinish_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, agree_s589);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call onTokenTransfer_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, _from_s211, __arg_1_onTokenTransfer, _value_s211);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call createTapPoll_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, tapIncPerc_s317);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call createRefundPoll_PollManagedFund(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call forceRefund_PollManagedFund(this, msgsender_MSG, msgvalue_MSG);
}
}

implementation CorralEntry_PollManagedFund()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var _teamWallet_s110: Ref;
var _referralTokenWallet_s110: Ref;
var _foundationTokenWallet_s110: Ref;
var _companyTokenWallet_s110: Ref;
var _reserveTokenWallet_s110: Ref;
var _bountyTokenWallet_s110: Ref;
var _advisorTokenWallet_s110: Ref;
var _refundManager_s110: Ref;
var _owners_s110: Ref;
assume ((now) >= (0));
assume ((DType[this]) == (PollManagedFund));
call _owners_s110 := FreshRefGenerator__success();
gas := (gas) - (53000);
call PollManagedFund_PollManagedFund(this, msgsender_MSG, msgvalue_MSG, _teamWallet_s110, _referralTokenWallet_s110, _foundationTokenWallet_s110, _companyTokenWallet_s110, _reserveTokenWallet_s110, _bountyTokenWallet_s110, _advisorTokenWallet_s110, _refundManager_s110, _owners_s110);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_PollManagedFund(this);
}
}

implementation CorralChoice_RefundPoll(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _tokenAddress_s3219: Ref;
var _fundAddress_s3219: Ref;
var _startTime_s3219: int;
var _endTime_s3219: int;
var _checkTransfersAfterEnd_s3219: bool;
var agree_s3313: bool;
var tokenHolder_s3502: Ref;
var amount_s3502: int;
var __ret_0_tryToFinalize: bool;
var __ret_0_isNowApproved: bool;
var _tokenAddress_s2198: Ref;
var _fundAddress_s2198: Ref;
var _startTime_s2198: int;
var _endTime_s2198: int;
var _holdEndTime_s2198: int;
var _checkTransfersAfterEnd_s2198: bool;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _tokenAddress_s3219;
havoc _fundAddress_s3219;
havoc _startTime_s3219;
havoc _endTime_s3219;
havoc _checkTransfersAfterEnd_s3219;
havoc agree_s3313;
havoc tokenHolder_s3502;
havoc amount_s3502;
havoc __ret_0_tryToFinalize;
havoc __ret_0_isNowApproved;
havoc _tokenAddress_s2198;
havoc _fundAddress_s2198;
havoc _startTime_s2198;
havoc _endTime_s2198;
havoc _holdEndTime_s2198;
havoc _checkTransfersAfterEnd_s2198;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (5)) {
gas := (gas) - (21000);
call vote_BasePoll(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call revokeVote_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call onTokenTransfer_BasePoll(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_tryToFinalize := tryToFinalize_RefundPoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_isNowApproved := isNowApproved_BasePoll(this, msgsender_MSG, msgvalue_MSG);
}
}

implementation CorralEntry_RefundPoll()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var _tokenAddress_s2198: Ref;
var _fundAddress_s2198: Ref;
var _startTime_s2198: int;
var _endTime_s2198: int;
var _holdEndTime_s2198: int;
var _checkTransfersAfterEnd_s2198: bool;
assume ((now) >= (0));
assume ((DType[this]) == (RefundPoll));
gas := (gas) - (53000);
call RefundPoll_RefundPoll(this, msgsender_MSG, msgvalue_MSG, _tokenAddress_s2198, _fundAddress_s2198, _startTime_s2198, _endTime_s2198, _holdEndTime_s2198, _checkTransfersAfterEnd_s2198);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_RefundPoll(this);
}
}

implementation CorralChoice_SafeMath(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
}

implementation CorralEntry_SafeMath()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
assume ((now) >= (0));
assume (((((((((DType[this]) == (BasePoll)) || ((DType[this]) == (ERC20Token))) || ((DType[this]) == (Fund))) || ((DType[this]) == (ManagedToken))) || ((DType[this]) == (PollManagedFund))) || ((DType[this]) == (RefundPoll))) || ((DType[this]) == (SafeMath))) || ((DType[this]) == (TapPoll)));
gas := (gas) - (53000);
call SafeMath_SafeMath(this, msgsender_MSG, msgvalue_MSG);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_SafeMath(this);
}
}

implementation CorralChoice_TapPoll(this: Ref)
{
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var choice: int;
var _tokenAddress_s3219: Ref;
var _fundAddress_s3219: Ref;
var _startTime_s3219: int;
var _endTime_s3219: int;
var _checkTransfersAfterEnd_s3219: bool;
var agree_s3313: bool;
var tokenHolder_s3502: Ref;
var amount_s3502: int;
var __ret_0_tryToFinalize: bool;
var __ret_0_isNowApproved: bool;
var _tap_s2316: int;
var _tokenAddress_s2316: Ref;
var _fundAddress_s2316: Ref;
var _startTime_s2316: int;
var _endTime_s2316: int;
var _minTokensPerc_s2316: int;
var __ret_0_getVotedTokensPerc: int;
var tmpNow: int;
havoc msgsender_MSG;
havoc msgvalue_MSG;
havoc choice;
havoc _tokenAddress_s3219;
havoc _fundAddress_s3219;
havoc _startTime_s3219;
havoc _endTime_s3219;
havoc _checkTransfersAfterEnd_s3219;
havoc agree_s3313;
havoc tokenHolder_s3502;
havoc amount_s3502;
havoc __ret_0_tryToFinalize;
havoc __ret_0_isNowApproved;
havoc _tap_s2316;
havoc _tokenAddress_s2316;
havoc _fundAddress_s2316;
havoc _startTime_s2316;
havoc _endTime_s2316;
havoc _minTokensPerc_s2316;
havoc __ret_0_getVotedTokensPerc;
havoc tmpNow;
havoc gas;
assume (((gas) > (4000000)) && ((gas) <= (8000000)));
tmpNow := now;
havoc now;
assume ((now) > (tmpNow));
if ((choice) == (6)) {
gas := (gas) - (21000);
call vote_BasePoll(this, msgsender_MSG, msgvalue_MSG, agree_s3313);
} else if ((choice) == (5)) {
gas := (gas) - (21000);
call revokeVote_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (4)) {
gas := (gas) - (21000);
call onTokenTransfer_BasePoll(this, msgsender_MSG, msgvalue_MSG, tokenHolder_s3502, amount_s3502);
} else if ((choice) == (3)) {
gas := (gas) - (21000);
call __ret_0_tryToFinalize := tryToFinalize_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (2)) {
gas := (gas) - (21000);
call __ret_0_isNowApproved := isNowApproved_BasePoll(this, msgsender_MSG, msgvalue_MSG);
} else if ((choice) == (1)) {
gas := (gas) - (21000);
call __ret_0_getVotedTokensPerc := getVotedTokensPerc_TapPoll(this, msgsender_MSG, msgvalue_MSG);
}
}

implementation CorralEntry_TapPoll()
{
var this: Ref;
var msgsender_MSG: Ref;
var msgvalue_MSG: int;
var _tap_s2316: int;
var _tokenAddress_s2316: Ref;
var _fundAddress_s2316: Ref;
var _startTime_s2316: int;
var _endTime_s2316: int;
var _minTokensPerc_s2316: int;
assume ((now) >= (0));
assume ((DType[this]) == (TapPoll));
gas := (gas) - (53000);
call TapPoll_TapPoll(this, msgsender_MSG, msgvalue_MSG, _tap_s2316, _tokenAddress_s2316, _fundAddress_s2316, _startTime_s2316, _endTime_s2316, _minTokensPerc_s2316);
assume ((!(revert)) && ((gas) >= (0)));
while (true)
{
call CorralChoice_TapPoll(this);
}
}


